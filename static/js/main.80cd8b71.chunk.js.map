{"version":3,"sources":["assets/logo.svg","utils/utils.tsx","utils/fetch-loop.tsx","utils/connection.tsx","components/Link.js","utils/notifications.tsx","utils/wallet.tsx","global_style.ts","components/ErrorBoundary.jsx","utils/send.tsx","utils/tokens.tsx","utils/bonfidaConnector.tsx","utils/markets.tsx","utils/useInterval.tsx","components/layout/FloatingElement.jsx","components/Orderbook.jsx","utils/usePrevious.tsx","components/layout/DataTable.jsx","components/UserInfoTable/BalancesTable.jsx","components/UserInfoTable/OpenOrderTable.tsx","components/UserInfoTable/FillsTable.jsx","components/UserInfoTable/FeesTable.js","components/UserInfoTable/index.jsx","components/DepositDialog.jsx","components/StandaloneTokenAccountSelect.tsx","components/LinkAddress.tsx","components/StandaloneBalancesDisplay.tsx","components/TradeForm.tsx","components/TradesTable.tsx","components/DeprecatedMarketsInstructions.js","components/CustomMarketDialog.jsx","pages/TradePage.tsx","pages/OpenOrdersPage.tsx","components/UserInfoTable/WalletBalancesTable.tsx","pages/BalancesPage.tsx","components/WalletConnect.tsx","components/ConvertForm.tsx","pages/ConvertPage.tsx","utils/preferences.tsx","components/Settings.jsx","components/CustomClusterEndpointDialog.tsx","components/AppSearch.tsx","components/TopBar.tsx","components/HelpUrls.ts","components/Footer.tsx","components/BasicLayout.js","components/useMintInput.tsx","pages/ListNewMarketPage.jsx","pages/pools/NewPoolPage.tsx","components/MintName.tsx","pages/pools/PoolPage/PoolBasketDisplay.tsx","pages/pools/PoolPage/PoolInfoPanel.tsx","pages/pools/PoolPage/PoolCreateRedeemPanel.tsx","pages/pools/PoolPage/PoolBalancesPanel.tsx","pages/pools/PoolPage/PoolAdminPanel.tsx","pages/pools/PoolPage/index.tsx","pages/pools/PoolListPage.tsx","routes.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","isValidPublicKey","key","PublicKey","sleep","ms","a","Promise","resolve","setTimeout","percentFormat","Intl","NumberFormat","undefined","style","minimumFractionDigits","maximumFractionDigits","floorToDecimal","value","decimals","Math","floor","roundToDecimal","round","getDecimalCount","isNaN","toString","split","length","divideBnToNumber","numerator","denominator","quotient","div","toNumber","rem","umod","gcd","getTokenMultiplierFromDecimals","BN","pow","localStorageListeners","useLocalStorageStringState","defaultState","state","localStorage","getItem","useState","notify","useEffect","push","filter","listener","setState","useCallback","newState","removeItem","setItem","forEach","useLocalStorageState","JSON","stringify","stringState","setStringState","useMemo","parse","abbreviateAddress","address","size","base58","toBase58","slice","isEqual","obj1","obj2","keys","Object","k","pageLoadTime","Date","globalCache","Map","FetchLoopListener","cacheKey","fn","refreshInterval","refreshIntervalOnError","callback","cacheNullValues","this","FetchLoopInternal","timeoutId","listeners","errors","refresh","clearTimeout","stopped","errored","data","console","log","set","notifyListeners","warn","waitTime","min","timeSincePageLoad","document","visibilityState","hasFocus","random","Set","previousRefreshInterval","add","assert","delete","map","refreshIntervalsOnError","x","globalLoops","loops","has","get","addListener","loop","removeListener","all","values","useAsyncData","asyncFn","useReducer","i","rerender","loaded","refreshCache","clearCache","refreshAllCaches","ENDPOINTS","name","endpoint","custom","accountListenerCount","ConnectionContext","React","createContext","ConnectionProvider","children","setEndpoint","customEndpoints","setCustomEndpoints","availableEndpoints","concat","connection","Connection","sendConnection","id","onAccountChange","Account","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","Provider","useConnection","context","useContext","Error","useSendConnection","useConnectionConfig","endpointInfo","find","info","useAccountInfo","tuple","getAccountInfo","accountInfo","count","previousInfo","subscriptionId","equals","lamports","initializeOnly","setCache","currentItem","previousInfoRef","useRef","current","useAccountData","Link","external","props","to","rest","href","target","rel","message","description","txid","type","placement","color","notification","opacity","backgroundColor","WALLET_PROVIDERS","url","WalletContext","WalletProvider","providerUrl","savedProviderUrl","setProviderUrl","wallet","Wallet","connected","setConnected","on","walletPublicKey","substring","disconnect","providerName","useWallet","setProvider","GlobalStyle","createGlobalStyle","Title","Typography","ErrorBoundary","hasError","level","error","Component","createTokenAccountTransaction","mintPublicKey","newAccount","transaction","Transaction","SystemProgram","getMinimumBalanceForRentExemption","TokenInstructions","TOKEN_PROGRAM_ID","fromPubkey","newAccountPubkey","space","programId","instruction","createAccount","initializeAccount","account","mint","owner","signer","settleFunds","market","openOrders","baseCurrencyAccount","quoteCurrencyAccount","baseCurrencyAccountPubkey","pubkey","quoteCurrencyAccountPubkey","baseMintAddress","result","createAccountTransaction","createAccountSigner","quoteMintAddress","referrerQuoteWallet","supportsReferralFees","usdt","TOKEN_MINTS","usdc","process","makeSettleFundsTransaction","settleFundsTransaction","settleFundsSigners","signers","mergeTransactions","sendTransaction","sendingMessage","settleAllFunds","tokenAccounts","markets","selectedTokenAccounts","programIds","reduce","cumulative","m","_programId","p","getOpenOrdersAccountsForProgramId","OpenOrders","findForOwner","openOrdersAccounts","baseTokenFree","quoteTokenFree","openOrdersAccountsForProgramIds","accounts","openOrdersAccount","_decoded","ownAddress","baseMint","quoteMint","selectedBaseTokenAccount","getSelectedTokenAccountForMint","selectedQuoteTokenAccount","settleTransactions","transactions","t","s","cancelOrder","params","cancelOrders","orders","order","makeMatchOrdersTransaction","makeCancelOrderInstruction","placeOrder","side","price","orderType","feeDiscountPubkey","formattedMinOrderSize","minOrderSize","toFixed","formattedTickSize","tickSize","isIncrement","num","step","abs","createAccountSigners","payer","matchOrderstransaction","startTime","getUnixTs","makePlaceOrderTransaction","placeOrderTx","placeOrderSigners","endTime","listMarket","getVaultOwnerAndNonce","nonce","createProgramAddress","toBuffer","toArrayLike","Buffer","dexProgramId","vaultOwner","iaddn","baseLotSize","quoteLotSize","requestQueue","eventQueue","bids","asks","baseVault","quoteVault","feeRateBps","quoteDustThreshold","vaultSignerNonce","tx1","tx2","Market","getLayout","span","DexInstructions","initializeMarket","signTransactions","transactionsAndSigners","signedTransactions","signedTransaction","sendSignedTransaction","getTime","sentMessage","successMessage","timeout","signTransaction","getRecentBlockhash","recentBlockhash","blockhash","setSigners","partialSign","signAllTransactions","rawTransaction","serialize","sendRawTransaction","skipPreflight","done","awaitTransactionSignatureConfirmation","simulateResult","simulateTransaction","err","logs","line","startsWith","reject","onSignature","e","getSignatureStatuses","signatureStatuses","confirmations","resultDescription","AccountInfoResult","struct","executable","rentEpoch","GetMultipleAccountsAndContextRpcResult","array","union","jsonRpcVersion","literal","jsonrpc","jsonRpcResult","slot","getMultipleSolanaAccounts","publicKeys","args","commitment","_rpcRequest","unsafeRes","res","join","from","fromEntries","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","encoding","ACCOUNT_LAYOUT","BufferLayout","MINT_LAYOUT","parseTokenAccountData","decode","amount","parseTokenMintData","initialized","supply","getOwnedAccountsFilters","memcmp","offset","offsetOf","bytes","dataSize","getOwnedTokenAccounts","filters","resp","bs58","every","filterBytes","getTokenAccountInfo","ownerAddress","splAccounts","parsedSplAccounts","effectiveMint","WRAPPED_SOL_MINT","useMintToTickers","customMarkets","useCustomMarkets","useAllMarkets","mintsToTickers","customMarketInfo","customMarket","baseLabel","quoteLabel","useMintInfos","useTokenAccounts","allMarkets","allMints","marketInfo","uniqueMints","stringMint","mintInfos","entries","BonfidaApi","path","fetch","URL","response","ok","json","responseJson","success","marketAddress","USE_MARKETS","MARKETS","getMarketInfos","load","marketName","_VERY_SLOW_REFRESH_INTERVAL","useUnmigratedOpenOrdersAccounts","deprecatedOpenOrdersAccounts","deprecatedProgramIds","Array","deprecated","publicKeyStr","baseTokenTotal","quoteTokenTotal","some","MarketContext","DEFAULT_MARKET","getMarketDetails","otherMarket","baseCurrency","token","quoteCurrency","setCustomMarkets","MarketProvider","setMarketAddress","marketInfos","setMarket","then","catch","getTradePageUrl","saved","useSelectedTokenAccounts","useMarket","useMarkPrice","markPrice","setMarkPrice","useOrderbook","orderbook","trades","limit","_useUnfilteredTrades","eventFlags","maker","trade","useTrades","bb","Number","ba","last","sort","b","getUnfilteredTrades","loadFills","useOrderbookAccounts","bidData","askData","bidOrderbook","Orderbook","askOrderbook","depth","getL2","useOpenOrdersAccounts","fast","getOpenOrdersAccounts","findOpenOrdersAccountsForOwner","useSelectedOpenOrdersAccount","selectedPubKey","filtered","useSelectedQuoteCurrencyAccount","mintAddress","useSelectedBaseCurrencyAccount","useSelectedQuoteCurrencyBalances","quoteSplSizeToNumber","useSelectedBaseCurrencyBalances","baseSplSizeToNumber","useLocallyStoredFeeDiscountKey","storedFeeDiscountKey","setStoredFeeDiscountKey","useFeeDiscountKeys","findFeeDiscountKeys","feeDiscountKey","useAllOpenOrdersAccounts","useMarketInfos","stringProgramId","flat","useBalances","baseCurrencyBalances","quoteCurrencyBalances","baseExists","quoteExists","coin","sub","unsettled","useUnmigratedDeprecatedMarkets","marketsList","deps","getMarket","openOrdersList","customMarketsInfo","getMarketOrderPrice","cost","tickSizeDecimals","isBids","costAtLevel","spentCost","sendPrice","getExpectedFillPrice","sizeAtLevel","avgPrice","totalAvgPrice","useInterval","delay","savedCallback","setInterval","clearInterval","Wrapper","styled","FloatingElement","stretchVertical","height","SizeTitle","Row","MarkPriceTitle","Line","css","Price","smallScreen","onPrice","onSize","currentOrderbookData","lastOrderbookData","orderbookData","setOrderbookData","getCumulativeOrderbookSide","totalSize","backwards","cumulativeSize","sizePercent","reverse","sum","total","index","bidsToDisplay","asksToDisplay","flex","overflow","textAlign","OrderbookRow","onPriceClick","onSizeClick","MarkPriceComponent","memo","element","classList","contains","remove","formattedSize","formattedPrice","ref","marginBottom","onClick","data-width","data-bgcolor","prevProps","nextProps","previousMarkPrice","usePrevious","markPriceColor","formattedMarkPrice","justify","ArrowUpOutlined","marginRight","ArrowDownOutlined","DataTable","dataSource","columns","emptyLabel","pagination","loading","pageSize","renderEmpty","padding","display","justifyContent","alignItems","BalancesTable","balances","showMarket","hideWalletBalance","onSettleSuccess","title","dataIndex","render","ghost","onSettleFunds","CancelButton","Button","OpenOrderTable","onCancelSuccess","marketFilter","cancelId","setCancelId","orderId","marketFilters","orderInfos","text","onFilter","record","indexOf","fontWeight","charAt","toUpperCase","sorter","showSorterTooltip","icon","DeleteOutlined","cancel","FillsTable","fills","fill","useFills","liquidity","FeesTable","feeTier","row","marginLeft","format","getFeeRates","taker","_","SRM_MINT","MSRM_MINT","marginTop","FeeScheduleTable","balance","Paragraph","TabPane","Tabs","Index","paddingTop","defaultActiveKey","tab","supportsSrmFeeDiscounts","OpenOrdersTab","filterForOpenOrders","useOpenOrders","BalancesTab","DepositDialog","coinMint","depositCoin","onClose","baseOrQuote","visible","onOk","onCancel","StandaloneTokenAccountsSelect","selectedValue","label","setSelectedTokenAccounts","Fragment","width","onSelect","newSelectedTokenAccounts","Option","Text","code","shape","CopyOutlined","navigator","clipboard","writeText","LinkAddress","LinkOutlined","RowBox","Tip","ActionButton","StandaloneBalancesDisplay","setBaseOrQuote","formattedBalances","currency","borderColor","content","trigger","InfoCircleOutlined","align","paddingBottom","block","SellButton","BuyButton","sliderMarks","0","25","50","75","100","TradeForm","setChangeOrderRef","setSide","postOnly","setPostOnly","ioc","setIoc","baseSize","setBaseSize","quoteSize","setQuoteSize","setPrice","submitting","setSubmitting","sizeFraction","setSizeFraction","quoteBalance","baseBalance","sizeDecimalCount","priceDecimalCount","doChangeOrder","onSliderChange","updateSizeFraction","warmUpCache","findBestFeeDiscountKey","onSetBaseSize","usePrice","maxSize","parseFloat","newSize","formatted","onSubmit","flexDirection","Group","onChange","buttonStyle","background","addonBefore","suffix","fontSize","compact","onSetQuoteSize","tipFormatter","marks","checked","disabled","PublicTrades","getRecentTrades","useBonfidaTrades","minHeight","maxHeight","paddingRight","overflowY","time","toLocaleTimeString","DeprecatedMarketsInstructions","switchToLiveMarkets","openOrderAccountBalances","inOrdersBase","inOrdersQuote","unsettledBase","unsettledQuote","useBalancesForDeprecatedMarkets","marketsAndOrders","getOrders","loadOrdersForOwner","refreshOpenOrders","useGetOpenOrdersForDeprecatedMarkets","needToCancelOrders","filteredBalances","needToSettleFunds","CustomMarketDialog","onAddCustomMarket","marketId","setMarketId","marketLabel","setMarketLabel","setBaseLabel","setQuoteLabel","loadingMarket","setLoadingMarket","wellFormedMarketId","marketAccountInfo","resetLabels","finally","knownMarket","knownProgram","knownBaseCurrency","knownQuoteCurrency","canSubmit","onDoClose","okText","okButtonProps","placeholder","LoadingOutlined","gutter","Select","OptGroup","TradePage","useParams","history","useHistory","TradePageInner","handleDeprecated","setHandleDeprecated","addMarketVisible","setAddMarketVisible","deprecatedMarkets","window","innerHeight","innerWidth","dimensions","setDimensions","changeOrderRef","handleResize","addEventListener","removeEventListener","componentProps","onChangeOrderRef","component","newCustomMarkets","paddingLeft","MarketSelector","onDeleteCustomMarket","PlusCircleOutlined","extractBase","extractQuote","selectedMarket","proposedMarket","showSearch","optionFilterProp","listHeight","filterOption","input","option","toLowerCase","stopPropagation","nativeEvent","stopImmediatePropagation","DeprecatedMarketsPage","RenderNormal","flexWrap","RenderSmall","RenderSmaller","xs","sm","OpenOrdersPage","openOrdersAccountsConnected","marketInfosConnected","openOrdersAccountsByAddress","marketsAddr","marketsByAddress","getAllOpenOrders","marketAddr","loadBids","loadAsks","useAllOpenOrders","marketAddressesToNames","WalletBalancesTable","walletBalances","tokenAccountsConnected","allMarketsConnected","settlingFunds","setSettlingFunds","walletBalance","BalancesPage","mintInfosConnected","parsedAccount","mintInfo","additionalAmount","useWalletBalancesForAllMarkets","mintToTickers","openOrdersBalances","loadedOpenOrdersAccounts","baseMintInfo","baseFree","baseTotal","quoteMintInfo","quoteFree","quoteTotal","free","useAllOpenOrdersBalances","totalBalance","openOrdersFree","openOrdersTotal","WalletConnect","connect","UserOutlined","ConvertButton","ConvertForm","fromToken","setFromToken","toToken","setToToken","setSize","marketInfosbyName","tokenConvertMap","base","quote","maxWidth","minWidth","ConvertFormSubmit","fromAmount","setFromAmount","toAmount","setToAmount","isConverting","setIsConverting","isFromTokenBaseOfMarket","onConvert","sidedOrderbookAccount","decodedOrderbookData","parsedPrice","parsedSize","getPrice","expectedPrice","canConvert","coinBalance","availableBalance","SwapOutlined","ConvertPage","PreferencesContext","PreferencesProvider","autoSettleEnabled","setAutoSettleEnabled","marketList","autoSettle","autoApprove","Settings","usePreferences","CustomClusterEndpointDialog","testingConnection","onAddCustomEndpoint","customEndpoint","setCustomEndpoint","customEndpointName","setCustomEndpointName","appsAndTokens","apps","tags","AppSearch","searchMatches","setSearchMatches","searchValue","setSearchValue","handleClear","options","d","replace","allowClear","focussed","onSearch","filteredApps","app","searchString","lowerSearchStr","includes","tag","matchApp","onClear","open","onFocus","onBlur","notFoundContent","transition","dropdownStyle","dropdownMatchSelectWidth","suffixIcon","SearchOutlined","focus","LogoWrapper","EXTERNAL_LINKS","TopBar","addEndpointVisible","setAddEndpointVisible","setTestingConnection","location","useLocation","searchFocussed","setSearchFocussed","handleClick","endpointInfoCustom","handler","tradePageUrl","pathname","handleError","getEpochInfo","newCustomEndpoints","src","logo","alt","mode","selectedKeys","borderBottom","Item","margin","SubMenu","onTitleClick","SettingOutlined","helpUrls","Footer","Layout","useBreakpoint","Grid","footerElements","link","CustomFooter","lg","elem","Header","Content","BasicLayout","useMintInput","tooltip","setAddress","ticker","validateStatus","hasFeedback","help","parsed","ListNewMarketPage","baseMintInput","quoteMintInput","lotSize","setLotSize","setTickSize","listedMarket","setListedMarket","labelCol","wrapperCol","layout","onFinish","initialValue","trim","colon","htmlType","AddRemoveTokenButtons","SIMPLE_POOL_PROGRAM_ID","DEFAULT_PROGRAM_ID","PROGRAM_ID_OPTIONS","NewPoolPage","poolName","setPoolName","setProgramId","initialSupply","setInitialSupply","valid","initialAssets","setInitialAssets","adminControlled","setAdminControlled","adminAddress","setAdminAddress","newPoolAddress","setNewPoolAddress","asset","assets","PoolTransactions","initializeSimplePool","poolStateSpace","poolMintDecimals","initialPoolMintSupply","assetMints","initialAssetQuantities","quantity","creator","creatorAssets","found","tokenAccount","additionalAccounts","isSigner","isWritable","poolAddress","signed","AssetInput","mintInput","setQuantity","change","parsedQuantity","old","MintName","showAddress","mintKey","PoolBasketDisplay","poolInfo","basket","BasketItem","quantities","mintAccountInfo","quantityDisplay","feeFormat","PoolInfoPanel","getPoolBasket","redeem","totalBasket","copyable","poolTokenMint","adminKey","feeRate","PoolCreateRedeemPanel","CreateRedeemTab","action","create","basketLoaded","findTokenAccount","preventDefault","execute","poolTokenAccount","assetAccounts","PoolBalancesPanel","WalletBalancesTab","PoolBalancesTab","BalanceItem","isPoolToken","vaultAddress","balanceAccountInfo","PoolAdminPanel","PauseUnpauseTab","AddAssetTab","RemoveAssetTab","DepositTab","WithdrawTab","UpdateFeeTab","AdminControlledPoolInstructions","pause","unpause","useOnSubmitHandler","getAssociatedTokenAddress","vaultSigner","createAssociatedTokenAccount","addAsset","MintSelector","SubmitButton","removeAsset","MintInPoolSelector","walletTokenAccount","mintDecimals","wrappedSolAccount","transfer","source","destination","closeAccount","approveDelegate","setFeeRate","updateFee","makeTransaction","className","PoolPage","isPublicKey","poolAccountInfo","poolAccountLoaded","decodePoolState","program","mintAccountInfoLoaded","onBack","subTitle","isAdminControlledPool","Form","form","PoolListPage","setPoolAddress","Routes","basename","exact","App","fallback","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kC,uWCIpC,SAASC,EAAiBC,GAC/B,IAAKA,EACH,OAAO,EAET,IAEE,OADA,IAAIC,YAAUD,IACP,EACP,SACA,OAAO,GAIJ,SAAeE,EAAtB,kC,4CAAO,WAAqBC,GAArB,SAAAC,EAAA,+EACE,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASH,OAD/C,4C,sBAIA,IAAMK,EAAgB,IAAIC,KAAKC,kBAAaC,EAAW,CAC5DC,MAAO,UACPC,sBAAuB,EACvBC,sBAAuB,IAGlB,SAASC,EACdC,EACAC,GAEA,OAAOA,EAAWC,KAAKC,MAAMH,EAAK,SAAG,GAAMC,IAAzBC,KAAA,IAAqC,GAAMD,GAAWD,EAGnE,SAASI,EACdJ,EACAC,GAEA,OAAOA,EAAWC,KAAKG,MAAML,EAAK,SAAG,GAAMC,IAAzBC,KAAA,IAAqC,GAAMD,GAAWD,EAGnE,SAASM,EAAgBN,GAC9B,OAAKO,MAAMP,IAAUE,KAAKC,MAAMH,KAAWA,EAEpC,EADEA,EAAMQ,WAAWC,MAAM,KAAK,GAAGC,QAAU,EAI7C,SAASC,EAAiBC,EAAeC,GAC9C,IAAMC,EAAWF,EAAUG,IAAIF,GAAaG,WACtCC,EAAML,EAAUM,KAAKL,GACrBM,EAAMF,EAAIE,IAAIN,GACpB,OAAOC,EAAWG,EAAIF,IAAII,GAAKH,WAAaH,EAAYE,IAAII,GAAKH,WAG5D,SAASI,EAA+BnB,GAC7C,OAAO,IAAIoB,IAAG,IAAIC,IAAI,IAAID,IAAGpB,IAG/B,IAAMsB,EAAwB,GAEvB,SAASC,EACdxC,GAEqD,IADrDyC,EACoD,uDADtB,KAExBC,EAAQC,aAAaC,QAAQ5C,IAAQyC,EADS,EAGjCI,mBAAS7C,EAAM,KAAO0C,GAHW,mBAG3CI,EAH2C,KAKpDC,qBAAU,WAKR,OAJKR,EAAsBvC,KACzBuC,EAAsBvC,GAAO,IAE/BuC,EAAsBvC,GAAKgD,KAAKF,GACzB,WACLP,EAAsBvC,GAAOuC,EAAsBvC,GAAKiD,QACtD,SAACC,GAAD,OAAcA,IAAaJ,KAEa,IAAtCP,EAAsBvC,GAAK0B,eACtBa,EAAsBvC,MAGhC,CAACA,IAEJ,IAAMmD,EAAWC,uBACf,SAACC,GACiBX,IAAUW,IAKT,OAAbA,EACFV,aAAaW,WAAWtD,GAExB2C,aAAaY,QAAQvD,EAAKqD,GAE5Bd,EAAsBvC,GAAKwD,SAAQ,SAACN,GAAD,OACjCA,EAASlD,EAAM,KAAOqD,SAG1B,CAACX,EAAO1C,IAGV,MAAO,CAAC0C,EAAOS,GAGV,SAASM,EACdzD,GAE6B,IAD7ByC,EAC4B,uDADH,KACG,EACQD,EAClCxC,EACA0D,KAAKC,UAAUlB,IAHW,mBACvBmB,EADuB,KACVC,EADU,KAK5B,MAAO,CACLC,mBAAQ,kBAAMF,GAAeF,KAAKK,MAAMH,KAAc,CAACA,IACvD,SAACP,GAAD,OAAcQ,EAAeH,KAAKC,UAAUN,MAoBzC,SAASW,EAAkBC,GAA+B,IAAXC,EAAU,uDAAH,EACrDC,EAASF,EAAQG,WACvB,OAAOD,EAAOE,MAAM,EAAGH,GAAQ,SAAMC,EAAOE,OAAOH,GAG9C,SAASI,EAAQC,EAAMC,EAAMC,GAClC,IAAKA,GAAQC,OAAOD,KAAKF,GAAM7C,SAAWgD,OAAOD,KAAKD,GAAM9C,OAC1D,OAAO,EAET+C,EAAOA,GAAQC,OAAOD,KAAKF,GAJa,oBAKxBE,GALwB,IAKxC,2BAAsB,CAAC,IAAZE,EAAW,QACpB,GAAIJ,EAAKI,KAAOH,EAAKG,GAEnB,OAAO,GAR6B,8BAWxC,OAAO,E,8CClJHC,EAAe,IAAIC,KAEnBC,EAA6B,IAAIC,IAEjCC,EAQJ,WACEC,EACAC,EACAC,EACAC,EACAC,EACAC,GACC,yBAdHL,cAcE,OAbFC,QAaE,OAZFC,qBAYE,OAXFC,4BAWE,OAVFC,cAUE,OATFC,iBAA2B,EAUzBC,KAAKN,SAAWA,EAChBM,KAAKL,GAAKA,EACVK,KAAKJ,gBAAkBA,EACvBI,KAAKH,uBAAyBA,EAC9BG,KAAKF,SAAWA,EAChBE,KAAKD,gBAAkBA,GAIrBE,E,WAQJ,WAAYP,EAAeC,EAAsBI,GAA2B,IAAD,gCAP3EL,cAO2E,OAN3EC,QAM2E,OAL3EO,eAK2E,OAJ3EC,eAI2E,OAH3EC,YAG2E,OAF3EL,iBAA2B,EAEgD,KAmD3EM,QAnD2E,sBAmDjE,kCAAAxF,EAAA,yDACJ,EAAKqF,YACPI,aAAa,EAAKJ,WAClB,EAAKA,UAAY,OAEf,EAAKK,QALD,wDASJC,GAAU,EATN,kBAWa,EAAKb,KAXlB,UAWAc,EAXA,OAYD,EAAKV,iBAA4B,OAATU,EAZvB,wBAaJC,QAAQC,IAAR,qCAA0C,EAAKjB,WAE/C,EAAKU,OAAS,EAfV,kBAgBGK,GAhBH,eAkBJlB,EAAYqB,IAAI,EAAKlB,SAAUe,GAC/B,EAAKL,OAAS,EACd,EAAKS,kBApBD,kBAqBGJ,GArBH,4DAwBJ,EAAKL,OACPM,QAAQI,KAAR,MACAN,GAAU,EA1BJ,yBA4BD,EAAKN,WAAc,EAAKK,UACvBQ,EAAW,EAAKnB,gBAElBY,GACA,EAAKX,wBACL,EAAKA,uBAAyB,IAE9BkB,EAAW,EAAKlB,wBAId,EAAKO,OAAS,IAChBW,EAAWpF,KAAKqF,IAAI,aAAO,EAAM,EAAKZ,OAAS,GAAI,OAI/Ca,GAAqB,IAAI3B,MAAUD,GACjB,MACtB0B,GAAY,IAAOE,EAAoB,GAIR,WAA7BC,SAASC,gBACXJ,EAAW,IACDG,SAASE,aACnBL,GAAY,KAIdA,GAAY,GAAM,GAAMpF,KAAK0F,SAE7B,EAAKnB,UAAYlF,WAAW,EAAKqF,QAASU,IA3DtC,6EAlDRf,KAAKN,SAAWA,EAChBM,KAAKL,GAAKA,EACVK,KAAKE,UAAY,KACjBF,KAAKG,UAAY,IAAImB,IACrBtB,KAAKI,OAAS,EACdJ,KAAKD,gBAAkBA,E,wDAuBbpC,GACV,IAAM4D,EAA0BvB,KAAKJ,gBACrCI,KAAKG,UAAUqB,IAAI7D,GACfqC,KAAKJ,gBAAkB2B,GACzBvB,KAAKK,Y,qCAIM1C,GACb8D,IAAOzB,KAAKG,UAAUuB,OAAO/D,IACzBqC,KAAKO,SACHP,KAAKE,YACPI,aAAaN,KAAKE,WAClBF,KAAKE,UAAY,Q,wCAMrBF,KAAKG,UAAUlC,SAAQ,SAACN,GAAD,OAAcA,EAASmC,gB,sCAtC9C,OAAOnE,KAAKqF,IAAL,MAAArF,KAAI,YACN,YAAIqE,KAAKG,WAAWwB,KAAI,SAAChE,GAAD,OAAcA,EAASiC,uB,6CAKpD,IAAMgC,EAAoC,YAAI5B,KAAKG,WAChDwB,KAAI,SAAChE,GAAD,OAAcA,EAASkC,0BAC3BnC,QAAO,SAACmE,GAAD,OAA0B,OAANA,KAC9B,OAAuC,IAAnCD,EAAwBzF,OACnB,KAEFR,KAAKqF,IAAL,MAAArF,KAAI,YAAQiG,M,8BAInB,OAA+B,IAAxB5B,KAAKG,UAAUxB,S,KA8HpBmD,EAAc,I,iDAnClBC,MAAQ,IAAIvC,I,wDAEG7B,GACRqC,KAAK+B,MAAMC,IAAIrE,EAAS+B,WAC3BM,KAAK+B,MAAMnB,IACTjD,EAAS+B,SACT,IAAIO,EACFtC,EAAS+B,SACT/B,EAASgC,GACThC,EAASoC,kBAIfC,KAAK+B,MAAME,IAAItE,EAAS+B,UAAUwC,YAAYvE,K,qCAG9BA,GAChB,IAAMwE,EAAOnC,KAAK+B,MAAME,IAAItE,EAAS+B,UACrCyC,EAAKC,eAAezE,GAChBwE,EAAK5B,UACPP,KAAK+B,MAAML,OAAO/D,EAAS+B,UAC3BH,EAAYmC,OAAO/D,EAAS+B,a,8BAIxBA,GACFM,KAAK+B,MAAMC,IAAItC,IACjBM,KAAK+B,MAAME,IAAIvC,GAAUW,Y,mCAK3B,OAAOvF,QAAQuH,IAAI,YAAIrC,KAAK+B,MAAMO,UAAUX,KAAI,SAACQ,GAAD,OAAUA,EAAK9B,kB,MAK5D,SAASkC,EACdC,EACA9C,GAGkC,IAAD,yDAF4B,GAE5B,IAF/BE,uBAE+B,MAFb,IAEa,MAFNC,8BAEM,MAFmB,KAEnB,EADjCE,IACiC,2DACZ0C,sBAAW,SAACC,GAAD,OAAOA,EAAI,IAAG,GADb,mBACxBC,EADwB,KAqBjC,GAlBAnF,qBAAU,WACR,IAAKkC,EAEH,OAAO,aAET,IAAM/B,EAAW,IAAI8B,EACnBC,EACA8C,EACA5C,EACAC,EACA8C,EACA5C,GAGF,OADA+B,EAAYI,YAAYvE,GACjB,kBAAMmE,EAAYM,eAAezE,MAEvC,CAAC+B,EAAUE,KAETF,EACH,MAAO,CAAC,MAAM,GAGhB,IAAMkD,EAASrD,EAAYyC,IAAItC,GACzBe,EAAOmC,EAASrD,EAAY0C,IAAIvC,QAAYtE,EAClD,MAAO,CAACqF,EAAMmC,GAGT,SAASC,EAAanD,GAA0C,IAA3BoD,EAA0B,wDAChEA,GACFvD,EAAYmC,OAAOhC,GAErB,IAAMyC,EAAOL,EAAYC,MAAME,IAAIvC,GAC/ByC,IACFA,EAAK9B,UACDyC,GACFX,EAAKtB,mBAKJ,SAASkC,IAA0B,IAAD,gBACpBjB,EAAYC,MAAMO,UADE,IACvC,2BAA+C,SACxCjC,WAFgC,+B,YC5O5B2C,EAA4B,CACvC,CACEC,KAAM,eACNC,SAAU,sCACVC,QAAQ,GAEV,CAAEF,KAAM,WAAYC,SAAU,wBAAyBC,QAAQ,IAG3DC,EAAuB,IAAI5D,IAE3B6D,EAAmEC,IAAMC,cAC7E,MAGK,SAASC,EAAT,GAA2C,IAAbC,EAAY,EAAZA,SAAY,EACfvF,EAC9B,mBACA8E,EAAU,GAAGE,UAHgC,mBACxCA,EADwC,KAC9BQ,EAD8B,OAKDxF,EAE5C,4BAA6B,IAPgB,mBAKxCyF,EALwC,KAKvBC,EALuB,KAQzCC,EAAqBb,EAAUc,OAAOH,GAEtCI,EAAaxF,mBAAQ,kBAAM,IAAIyF,aAAWd,EAAU,YAAW,CACnEA,IAEIe,EAAiB1F,mBAAQ,kBAAM,IAAIyF,aAAWd,EAAU,YAAW,CACvEA,IAqCF,OA/BA1F,qBAAU,WACR,IAAM0G,EAAKH,EAAWI,iBAAgB,IAAIC,WAAUC,WAAW,eAC/D,OAAO,WACLN,EAAWO,4BAA4BJ,MAExC,CAACH,IAEJvG,qBAAU,WACR,IAAM0G,EAAKH,EAAWQ,cAAa,kBAAM,QACzC,OAAO,WACLR,EAAWS,yBAAyBN,MAErC,CAACH,IAEJvG,qBAAU,WACR,IAAM0G,EAAKD,EAAeE,iBACxB,IAAIC,WAAUC,WACd,eAEF,OAAO,WACLJ,EAAeK,4BAA4BJ,MAE5C,CAACD,IAEJzG,qBAAU,WACR,IAAM0G,EAAKD,EAAeM,cAAa,kBAAM,QAC7C,OAAO,WACLN,EAAeO,yBAAyBN,MAEzC,CAACD,IAGF,kBAACZ,EAAkBoB,SAAnB,CACEhJ,MAAO,CACLyH,WACAQ,cACAK,aACAE,iBACAJ,qBACAD,uBAGDH,GAKA,SAASiB,IACd,IAAMC,EAAUC,qBAAWvB,GAC3B,IAAKsB,EACH,MAAM,IAAIE,MAAM,8BAElB,OAAOF,EAAQZ,WAGV,SAASe,IACd,IAAMH,EAAUC,qBAAWvB,GAC3B,IAAKsB,EACH,MAAM,IAAIE,MAAM,8BAElB,OAAOF,EAAQV,eAGV,SAASc,IACd,IAAMJ,EAAUC,qBAAWvB,GAC3B,IAAKsB,EACH,MAAM,IAAIE,MAAM,8BAElB,MAAO,CACL3B,SAAUyB,EAAQzB,SAClB8B,aAAcL,EAAQd,mBAAmBoB,MACvC,SAACC,GAAD,OAAUA,EAAKhC,WAAayB,EAAQzB,YAEtCQ,YAAaiB,EAAQjB,YACrBG,mBAAoBc,EAAQd,mBAC5BD,mBAAoBe,EAAQf,oBAIzB,SAASuB,EACdd,GAEA,IAAMN,EAAaW,IACbhF,EAAW0F,YAAMrB,EAAD,OAAaM,QAAb,IAAaA,OAAb,EAAaA,EAAWxF,YAFK,EAGrB0D,EAAY,sBACxC,sBAAA1H,EAAA,+EAAawJ,EAAYN,EAAWsB,eAAehB,GAAa,MAAhE,2CACA3E,EACA,CAAEE,gBAAiB,MAN8B,mBAG5C0F,EAH4C,KAG/B1C,EAH+B,KAQnDpF,qBAAU,WACR,GAAK6G,EAAL,CAGA,GAAIjB,EAAqBpB,IAAItC,GAAW,GACpB0D,EAAqBnB,IAAIvC,GAC7B6F,UACT,CACL,IAAIC,EAA2C,KACzCC,EAAiB1B,EAAWI,gBAAgBE,GAAW,SAACa,GAEzDM,GACAA,EAAa/E,KAAKiF,OAAOR,EAAKzE,OAC/B+E,EAAaG,WAAaT,EAAKS,WAE/BH,EAAeN,EDuGlB,SACLxF,EACAjE,GAEO,IAAD,yDADuB,GACvB,IADJmK,sBACI,SACN,IAAIA,IAAkBrG,EAAYyC,IAAItC,GAAtC,CAGAH,EAAYqB,IAAIlB,EAAUjE,GAC1B,IAAM0G,EAAOL,EAAYC,MAAME,IAAIvC,GAC/ByC,GACFA,EAAKtB,mBCjHCgF,CAASnG,EAAUwF,OAGvB9B,EAAqBxC,IAAIlB,EAAU,CAAE6F,MAAO,EAAGE,mBAEjD,OAAO,WACL,IAAIK,EAAc1C,EAAqBnB,IAAIvC,GAC3BoG,EAAYP,MAAQ,GACnB,GACfxB,EAAWO,4BAA4BwB,EAAYL,gBACnDrC,EAAqB1B,OAAOhC,MAE1BoG,EAAYP,UAIjB,CAAC7F,IACJ,IAAMqG,EAAkBC,iBAA+C,MASvE,OAPGV,GACAS,EAAgBE,SAChBF,EAAgBE,QAAQxF,KAAKiF,OAAOJ,EAAY7E,OACjDsF,EAAgBE,QAAQN,WAAaL,EAAYK,WAEjDI,EAAgBE,QAAUX,GAErB,CAACS,EAAgBE,QAASrD,GAG5B,SAASsD,EAAe7B,GAAY,IAAD,EAClBc,EAAed,GAA9BiB,EADiC,oBAExC,OAAOA,GAAeA,EAAY7E,K,0CC/KrB,SAAS0F,GAAT,GAA+C,IAAD,IAA9BC,gBAA8B,SAATC,EAAS,6BACrDC,EAA0BD,EAA1BC,GAAI7C,EAAsB4C,EAAtB5C,SAAa8C,EADoC,aAC3BF,EAD2B,mBAE3D,OAAID,EAEA,qCAAGI,KAAMF,EAAIG,OAAO,SAASC,IAAI,uBAA0BH,GACxD9C,GAKL,kBAAC,KAAD,eAAY6C,GAAIA,GAAQC,GACrB9C,GCVA,SAASlG,GAAT,GAYH,IAXFoJ,EAWC,EAXDA,QACAC,EAUC,EAVDA,YACAC,EASC,EATDA,KASC,IARDC,YAQC,MARM,OAQN,MAPDC,iBAOC,MAPW,aAOX,EACGF,IACFD,EACE,kBAACT,GAAD,CACEC,UAAQ,EACRE,GAAI,kCAAoCO,EACxCxL,MAAO,CAAE2L,MAAO,YAHlB,oBAKoBH,EAAK/H,MAAM,EAAG,GALlC,MAKyC+H,EAAK/H,MAAM+H,EAAK1K,OAAS,KAItE8K,IAAaH,GAAM,CACjBH,QAAS,0BAAMtL,MAAO,CAAE2L,MAAO,UAAYL,GAC3CC,YACE,0BAAMvL,MAAO,CAAE2L,MAAO,QAASE,QAAS,KAAQN,GAElDG,YACA1L,MAAO,CACL8L,gBAAiB,WC5BhB,IAAMC,GAAmB,CAC9B,CAAEnE,KAAM,YAAaoE,IAAK,0BAGtBC,GAAgBhE,IAAMC,cAA0C,MAE/D,SAASgE,GAAT,GAAuC,IAAD,IAOvCC,EAP2B/D,EAAY,EAAZA,SACvBP,EAAa6B,IAAb7B,SADmC,EAGAhF,EACzC,iBACA,yBALyC,mBAGpCuJ,EAHoC,KAGlBC,EAHkB,KAWzCF,EAHGC,GACW,wBAKhB,IAAME,EAASpJ,mBAAQ,kBAAM,IAAIqJ,IAAOJ,EAAatE,KAAW,CAC9DsE,EACAtE,IAhByC,EAmBT5F,oBAAS,GAnBA,mBAmBpCuK,EAnBoC,KAmBzBC,EAnByB,KAsD3C,OAjCAtK,qBAAU,WA2BR,OA1BAkD,QAAQC,IAAI,qBACZgH,EAAOI,GAAG,WAAW,WACnBrH,QAAQC,IAAI,aACZvD,aAAaW,WAAW,kBACxB+J,GAAa,GACb,IAAIE,EAAkBL,EAAOtD,UAAUxF,WAQvCtB,GAAO,CACLoJ,QAAS,gBACTC,YAAa,wBARboB,EAAgB7L,OAAS,GAAzB,UACO6L,EAAgBC,UAAU,EAAG,GADpC,gBAC8CD,EAAgBC,UACxDD,EAAgB7L,OAAS,EACzB6L,EAAgB7L,SAElB6L,QAMRL,EAAOI,GAAG,cAAc,WACtBD,GAAa,GACbvK,GAAO,CACLoJ,QAAS,gBACTC,YAAa,6BAEfxJ,aAAaW,WAAW,qBAEnB,WACL4J,EAAOO,aACPJ,GAAa,MAEd,CAACH,IAGF,kBAACL,GAAc7C,SAAf,CACEhJ,MAAO,CACLkM,SACAE,YACAL,cACAE,iBACAS,aAAY,oBACVf,GAAiBnC,MAAK,qBAAGoC,MAAkBG,YADjC,aACV,EAAyDvE,YAD/C,QAEVuE,IAGH/D,GAKA,SAAS2E,KACd,IAAMzD,EAAUC,qBAAW0C,IAC3B,IAAK3C,EACH,MAAM,IAAIE,MAAM,0BAElB,MAAO,CACLgD,UAAWlD,EAAQkD,UACnBF,OAAQhD,EAAQgD,OAChBH,YAAa7C,EAAQ6C,YACrBa,YAAa1D,EAAQ+C,eACrBS,aAAcxD,EAAQwD,c,goEC5FnB,IAAMG,GAAcC,aAAH,M,wCCChBC,GAAUC,KAAVD,MAEaE,G,8MACnBvL,MAAQ,CACNwL,UAAU,G,uDAQV,OAAI3I,KAAK7C,MAAMwL,SAEX,6BACE,6BACE,kBAACH,GAAD,CAAOI,MAAO,GAAd,yBACA,kBAACJ,GAAD,CAAOI,MAAO,GAAd,6BAMD5I,KAAKqG,MAAM5C,Y,gDAhBYoF,GAC9B,MAAO,CAAEF,UAAU,O,GANoBG,a,kICyBpC,SAAeC,GAAtB,mC,8CAAO,uCAAAlO,EAAA,6DACLkJ,EADK,EACLA,WACA4D,EAFK,EAELA,OACAqB,EAHK,EAGLA,cAUMC,EAAa,IAAI7E,UACjB8E,EAAc,IAAIC,cAdnB,KAeeC,gBAff,KAgBSzB,EAAOtD,UAhBhB,KAiBe4E,EAAW5E,UAjB1B,SAkBaN,EAAWsF,kCAAkC,KAlB1D,+BAoBQC,qBAAkBC,iBApB1B,MAgBHC,WAhBG,KAiBHC,iBAjBG,KAkBH9D,SAlBG,KAmBH+D,MAAO,IACPC,UApBG,MAeCC,EAfD,KAe6BC,cAf7B,gBAsBLX,EAAY1H,IAAIoI,GAChBV,EAAY1H,IACV8H,qBAAkBQ,kBAAkB,CAClCC,QAASd,EAAW5E,UACpB2F,KAAMhB,EACNiB,MAAOtC,EAAOtD,aA3Bb,kBA8BE,CACL6E,cACAgB,OAAQjB,EACRQ,iBAAkBR,EAAW5E,YAjC1B,6C,sBAqCA,SAAe8F,GAAtB,mC,8CAAO,mEAAAtP,EAAA,yDACLuP,EADK,EACLA,OACAC,EAFK,EAELA,WACAtG,EAHK,EAGLA,WACA4D,EAJK,EAILA,OACA2C,EALK,EAKLA,oBACAC,EANK,EAMLA,qBAUGH,GACAzC,GACA5D,GACAsG,IACCC,GAAwBC,GApBvB,uBAsBHhN,GAAO,CAAEoJ,QAAS,kBAtBf,6BA4BD6D,EA5BC,OA4B2BF,QA5B3B,IA4B2BA,OA5B3B,EA4B2BA,EAAqBG,OACjDC,EA7BC,OA6B4BH,QA7B5B,IA6B4BA,OA7B5B,EA6B4BA,EAAsBE,OAElDD,EA/BA,iCAgCkBzB,GAA8B,CACjDhF,aACA4D,SACAqB,cAAeoB,EAAOO,kBAnCrB,OAgCGC,EAhCH,OAqCHJ,EAAyB,OAAGI,QAAH,IAAGA,OAAH,EAAGA,EAAQnB,iBACpCoB,EAAwB,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAQ1B,YACnC4B,EAAmB,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAQV,OAvC3B,WAyCAQ,EAzCA,kCA0CkB3B,GAA8B,CACjDhF,aACA4D,SACAqB,cAAeoB,EAAOW,mBA7CrB,QA0CGH,EA1CH,OA+CHF,EAA0B,OAAGE,QAAH,IAAGA,OAAH,EAAGA,EAAQnB,iBACrCoB,EAAwB,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAQ1B,YACnC4B,EAAmB,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAQV,OAjD3B,eAmDDc,EAAwC,KACxCZ,EAAOa,uBACHC,EAAOC,eAAYlG,MAAK,kBAAuB,SAAvB,EAAGhC,QAC3BmI,EAAOD,eAAYlG,MAAK,kBAAuB,SAAvB,EAAGhC,QAG/BiI,GACAd,EAAOW,iBAAiBrF,OAAOwF,EAAKxM,SAEpCsM,EAAsB,IAAItQ,YACxB2Q,gDAIFD,GACAhB,EAAOW,iBAAiBrF,OAAO0F,EAAK1M,WAEpCsM,EAAsB,IAAItQ,YACxB2Q,kDArED,UA4EKjB,EAAOkB,2BACfvH,EACAsG,EACAG,EACAE,EACAM,GAjFG,wBA0EUO,EA1EV,EA0EHrC,YACSsC,EA3EN,EA2EHC,QASEvC,EAAcwC,GAAkB,CAClCb,EACAU,IAEEE,EAAUX,EAAmB,sBACzBU,GADyB,CACLV,IACxBU,EA1FC,UA4FQG,GAAgB,CAC3BzC,cACAuC,UACA9D,SACA5D,aACA6H,eAAgB,sBAjGb,sF,sBAqGA,SAAeC,GAAtB,mC,8CAAO,qDAAAhR,EAAA,yDACLkJ,EADK,EACLA,WACA4D,EAFK,EAELA,OACAmE,EAHK,EAGLA,cACAC,EAJK,EAILA,QACAC,EALK,EAKLA,sBAQKD,GAAYpE,GAAW5D,GAAe+H,EAbtC,wDAiBCG,EAA0B,GAChCF,EACGG,QAAO,SAACC,EAAYC,GAGnB,OADAD,EAAW1O,KAAK2O,EAAEC,YACXF,IACN,IACFlO,SAAQ,SAAC0L,GACHsC,EAAWhH,MAAK,SAACqH,GAAD,OAAOA,EAAE5G,OAAOiE,OACnCsC,EAAWxO,KAAKkM,MAIhB4C,EA9BD,+BAAA1R,EAAA,MA8BqC,WAAO8O,GAAP,eAAA9O,EAAA,sEACP2R,cAAWC,aAC1C1I,EACA4D,EAAOtD,UACPsF,GAJsC,cAClC+C,EADkC,yBAMjCA,EAAmBhP,QACxB,SAAC2M,GAAD,OACEA,EAAWsC,cAAclQ,YACzB4N,EAAWuC,eAAenQ,eATU,2CA9BrC,+DA2CyC3B,QAAQuH,IACpD4J,EAAWtK,KAAI,SAACgI,GAAD,OAAe4C,EAAkC5C,OA5C7D,cA2CCkD,EA3CD,OA8CCH,EAAqBG,EAAgCX,QACzD,SAACY,EAAU7G,GAAX,OAAuB6G,EAAShJ,OAAOmC,KACvC,IAhDG,UAoDGnL,QAAQuH,IACZqK,EAAmB/K,KAAI,SAACoL,GAAuB,IAAD,IACtC3C,EAAS2B,EAAQ9G,MAAK,SAACmH,GAAD,uBAAC,EAE3BA,EAAEY,gBAFwB,iBAE1B,EAAYC,kBAFc,aAE1B,EAAwBvH,OAAOqH,EAAkB3C,WAE7C8C,EAAQ,OAAG9C,QAAH,IAAGA,OAAH,EAAGA,EAAQO,gBACnBwC,EAAS,OAAG/C,QAAH,IAAGA,OAAH,EAAGA,EAAQW,iBAEpBqC,EAAwB,UAAGC,GAC/BvB,EACAoB,EACAA,GACElB,GACAA,EAAsBkB,EAASrO,oBALL,aAAG,EAM9B4L,OACG6C,EAAyB,UAAGD,GAChCvB,EACAqB,EACAA,GACEnB,GACAA,EAAsBmB,EAAUtO,oBALL,aAAG,EAM/B4L,OACH,OAAK2C,GAA6BE,EAIhClD,GACAA,EAAOkB,2BACLvH,EACAgJ,EACAK,EACAE,GARK,SA5EV,YAmDCC,EAnDD,OAyFH7P,QACA,SACEmE,GADF,QAMOA,OAEgD,IAA9B0L,EAAmBpR,OAlGzC,0DAoGCqR,EAAeD,EAAmBzO,MAAM,EAAG,GAAG6C,KAAI,SAAC8L,GAAD,OAAOA,EAAEvE,eAC3DuC,EAA0B,GAChC8B,EACGrB,QAAO,SAACC,EAA4BsB,GAA7B,OAAmCtB,EAAWrI,OAAO2J,EAAEhC,WAAU,IACxExN,SAAQ,SAACiM,GACHuB,EAAQxG,MAAK,SAACyI,GAAD,OAAOA,EAAErJ,UAAUqB,OAAOwE,EAAO7F,eACjDoH,EAAQhO,KAAKyM,MAIbhB,EAAcwC,GAAkB8B,GA9GjC,UAgHQ7B,GAAgB,CAC3BzC,cACAuC,UACA9D,SACA5D,eApHG,sF,sBAwHA,SAAe4J,GAAtB,mC,8CAAO,WAA2BC,GAA3B,SAAA/S,EAAA,+EAMEgT,GAAa,6BAAKD,GAAN,IAAcE,OAAQ,CAACF,EAAOG,WAN5C,4C,sBASA,SAAeF,GAAtB,mC,8CAAO,qCAAAhT,EAAA,6DACLuP,EADK,EACLA,OACAzC,EAFK,EAELA,OACA5D,EAHK,EAGLA,WACA+J,EAJK,EAILA,OAOM5E,EAAckB,EAAO4D,2BAA2B,GACtDF,EAAO7P,SAAQ,SAAC8P,GACd7E,EAAY1H,IACV4I,EAAO6D,2BAA2BlK,EAAY4D,EAAOtD,UAAW0J,OAGpE7E,EAAY1H,IAAI4I,EAAO4D,2BAA2B,IAjB7C,SAkBQrC,GAAgB,CAC3BzC,cACAvB,SACA5D,aACA6H,eAAgB,sBAtBb,oF,sBA0BA,SAAesC,GAAtB,mC,8CAAO,iGAAArT,EAAA,yDACLsT,EADK,EACLA,KACAC,EAFK,EAELA,MACAzP,EAHK,EAGLA,KACA0P,EAJK,EAILA,UACAjE,EALK,EAKLA,OACArG,EANK,EAMLA,WACA4D,EAPK,EAOLA,OACA2C,EARK,EAQLA,oBACAC,EATK,EASLA,qBATK,IAUL+D,yBAVK,WAUelT,EAVf,EAuBDmT,GACI,OAANnE,QAAM,IAANA,GAAA,UAAAA,EAAQoE,oBAAR,eAAsBC,QAAQ1S,EAAgBqO,EAAOoE,kBAArD,OACApE,QADA,IACAA,OADA,EACAA,EAAQoE,cACNE,GACI,OAANtE,QAAM,IAANA,GAAA,UAAAA,EAAQuE,gBAAR,eAAkBF,QAAQ1S,EAAgBqO,EAAOuE,cAAjD,OACAvE,QADA,IACAA,OADA,EACAA,EAAQuE,UACJC,EAAc,SAACC,EAAKC,GAAN,OAClBnT,KAAKoT,IAAKF,EAAMC,EAAQ,GAAK,MAC7BnT,KAAKoT,IAAMF,EAAMC,EAAQ,EAAK,GAAK,OACjC9S,MAAMoS,GAhCL,uBAiCH7Q,GAAO,CAAEoJ,QAAS,gBAAiBG,KAAM,UAjCtC,8BAoCD9K,MAAM2C,GApCL,wBAqCHpB,GAAO,CAAEoJ,QAAS,eAAgBG,KAAM,UArCrC,8BAwCAa,GAAWA,EAAOtD,UAxClB,wBAyCH9G,GAAO,CAAEoJ,QAAS,iBAAkBG,KAAM,UAzCvC,8BA4CAsD,EA5CA,wBA6CH7M,GAAO,CAAEoJ,QAAS,kBAAmBG,KAAM,UA7CxC,8BAgDA8H,EAAYjQ,EAAMyL,EAAOoE,cAhDzB,wBAiDHjR,GAAO,CACLoJ,QAAQ,gCAAD,OAAkC4H,GACzCzH,KAAM,UAnDL,gCAuDDnI,EAAOyL,EAAOoE,cAvDb,wBAwDHjR,GAAO,CAAEoJ,QAAS,iBAAkBG,KAAM,UAxDvC,8BA2DA8H,EAAYR,EAAOhE,EAAOuE,UA3D1B,wBA4DHpR,GAAO,CACLoJ,QAAQ,iCAAD,OAAmC+H,GAC1C5H,KAAM,UA9DL,gCAkEDsH,EAAQhE,EAAOuE,UAlEd,wBAmEHpR,GAAO,CAAEoJ,QAAS,wBAAyBG,KAAM,UAnE9C,8BAsECmD,EAAQtC,EAAOtD,UACf6E,EAAc,IAAIC,cAClBsC,EAAqB,GAEtBnB,EA1EA,kCA+EOvB,GAA8B,CACtChF,aACA4D,SACAqB,cAAeoB,EAAOO,kBAlFrB,iBA4EYE,EA5EZ,EA4ED3B,YACQ8F,EA7EP,EA6ED9E,OACAT,EA9EC,EA8EDA,iBAMFP,EAAY1H,IAAIqJ,GAChBY,EAAQhO,KAAKuR,GACb1E,EAAsBb,EAtFnB,WAwFAc,EAxFA,kCA6FOxB,GAA8B,CACtChF,aACA4D,SACAqB,cAAeoB,EAAOW,mBAhGrB,iBA0FYF,EA1FZ,EA0FD3B,YACQ8F,EA3FP,EA2FD9E,OACAT,EA5FC,EA4FDA,iBAMFP,EAAY1H,IAAIqJ,GAChBY,EAAQhO,KAAKuR,GACbzE,EAAuBd,EApGpB,WAuGCwF,EAAiB,SAATd,EAAkB7D,EAAsBC,EAvGjD,wBAyGHhN,GAAO,CACLoJ,QAAS,8CACTG,KAAM,UA3GL,kCA+GC8G,EAAS,CACb3D,QACAgF,QACAd,OACAC,QACAzP,OACA0P,YACAC,kBAAmBA,GAAqB,MAE1C5N,QAAQC,IAAIiN,GAENsB,EAAyB9E,EAAO4D,2BAA2B,GACjE9E,EAAY1H,IAAI0N,GACVC,EAAYC,KA5Hb,UAgIKhF,EAAOiF,0BACftL,EACA6J,EACA,KACA,MApIG,wBA8HU0B,EA9HV,EA8HHpG,YACSqG,EA/HN,EA+HH9D,QAOI+D,EAAUJ,KAChB1O,QAAQC,IAAR,0CAA+C6O,EAAUL,IACzDjG,EAAY1H,IAAI8N,GAChBpG,EAAY1H,IAAI4I,EAAO4D,2BAA2B,IAClDvC,EAAQhO,KAAR,MAAAgO,EAAO,YAAS8D,IA1IX,UA4IQ5D,GAAgB,CAC3BzC,cACAvB,SACA5D,aACA0H,UACAG,eAAgB,qBAjJb,sF,sBAqJA,SAAe6D,GAAtB,mC,8CAAO,kDA2BUC,EA3BV,+BAAA7U,EAAA,iGAAAA,EAAA,MA2BL,8BAAAA,EAAA,sDACQ8U,EAAQ,IAAI7S,IAAG,GADvB,gCAI+BpC,YAAUkV,qBACjC,CAACxF,EAAO/F,UAAUwL,WAAYF,EAAMG,YAAYC,UAAQ,KAAM,IAC9DC,GANR,cAIYC,EAJZ,yBAQa,CAACA,EAAYN,IAR1B,gCAUMA,EAAMO,MAAM,GAVlB,iFA3BK,uBA2BUR,EA3BV,2CACL3L,EADK,EACLA,WACA4D,EAFK,EAELA,OACAuF,EAHK,EAGLA,SACAC,EAJK,EAILA,UACAgD,EALK,EAKLA,YACAC,EANK,EAMLA,aACAJ,EAPK,EAOLA,aAUM5F,EAAS,IAAIhG,UACbiM,EAAe,IAAIjM,UACnBkM,EAAa,IAAIlM,UACjBmM,EAAO,IAAInM,UACXoM,EAAO,IAAIpM,UACXqM,EAAY,IAAIrM,UAChBsM,EAAa,IAAItM,UACjBuM,EAAa,EACbC,EAAqB,IAAI9T,IAAG,KAzB7B,UAyCwC4S,IAzCxC,2CAyCEO,EAzCF,KAyCcY,EAzCd,KA2CCC,EAAM,IAAI3H,cA3CX,KA4CL2H,EA5CK,KA6CH1H,gBA7CG,KA8CWzB,EAAOtD,UA9ClB,KA+CiBoM,EAAUpM,UA/C3B,UAgDeN,EAAWsF,kCAAkC,KAhD5D,gCAkDUC,qBAAkBC,iBAlD5B,MA8CDC,WA9CC,KA+CDC,iBA/CC,KAgDD9D,SAhDC,KAiDD+D,MAAO,IACPC,UAlDC,gBA6CWE,cA7CX,qBAoDHT,gBApDG,KAqDWzB,EAAOtD,UArDlB,MAsDiBqM,EAAWrM,UAtD5B,UAuDeN,EAAWsF,kCAAkC,KAvD5D,kCAyDUC,qBAAkBC,iBAzD5B,OAqDDC,WArDC,KAsDDC,iBAtDC,MAuDD9D,SAvDC,MAwDD+D,MAAO,IACPC,UAzDC,kBAoDWE,cApDX,uBA2DHP,qBAAkBQ,kBAAkB,CAClCC,QAAS0G,EAAUpM,UACnB2F,KAAMkD,EACNjD,MAAOgG,IA9DN,MAgEH3G,qBAAkBQ,kBAAkB,CAClCC,QAAS2G,EAAWrM,UACpB2F,KAAMmD,EACNlD,MAAOgG,IAnEN,KA4CDzO,IA5CC,kCAuECuP,EAAM,IAAI5H,cAvEX,MAwEL4H,EAxEK,MAyEH3H,gBAzEG,MA0EWzB,EAAOtD,UA1ElB,MA2EiB+F,EAAO/F,UA3ExB,UA4EeN,EAAWsF,kCACzB2H,UAAOC,UAAUjB,GAAckB,MA7EhC,kCA+EMF,UAAOC,UAAUjB,GAAckB,KA/ErC,MAgFUlB,EAhFV,OA0EDxG,WA1EC,MA2EDC,iBA3EC,MA4ED9D,SA5EC,MA+ED+D,MA/EC,MAgFDC,UAhFC,mBAyEWE,cAzEX,wBAkFHT,gBAlFG,MAmFWzB,EAAOtD,UAnFlB,MAoFiBgM,EAAahM,UApF9B,UAqFeN,EAAWsF,kCAAkC,MArF5D,kCAsFM,KAtFN,MAuFU2G,EAvFV,OAmFDxG,WAnFC,MAoFDC,iBApFC,MAqFD9D,SArFC,MAsFD+D,MAtFC,MAuFDC,UAvFC,mBAkFWE,cAlFX,wBAyFHT,gBAzFG,MA0FWzB,EAAOtD,UA1FlB,MA2FiBiM,EAAWjM,UA3F5B,UA4FeN,EAAWsF,kCAAkC,QA5F5D,kCA6FM,OA7FN,MA8FU2G,EA9FV,OA0FDxG,WA1FC,MA2FDC,iBA3FC,MA4FD9D,SA5FC,MA6FD+D,MA7FC,MA8FDC,UA9FC,mBAyFWE,cAzFX,wBAgGHT,gBAhGG,MAiGWzB,EAAOtD,UAjGlB,MAkGiBkM,EAAKlM,UAlGtB,UAmGeN,EAAWsF,kCAAkC,OAnG5D,kCAoGM,MApGN,MAqGU2G,EArGV,OAiGDxG,WAjGC,MAkGDC,iBAlGC,MAmGD9D,SAnGC,MAoGD+D,MApGC,MAqGDC,UArGC,mBAgGWE,cAhGX,wBAuGHT,gBAvGG,MAwGWzB,EAAOtD,UAxGlB,MAyGiBmM,EAAKnM,UAzGtB,UA0GeN,EAAWsF,kCAAkC,OA1G5D,kCA2GM,MA3GN,MA4GU2G,EA5GV,OAwGDxG,WAxGC,MAyGDC,iBAzGC,MA0GD9D,SA1GC,MA2GD+D,MA3GC,MA4GDC,UA5GC,mBAuGWE,cAvGX,wBA8GHsH,mBAAgBC,iBAAiB,CAC/BhH,OAAQA,EAAO/F,UACfgM,aAAcA,EAAahM,UAC3BiM,WAAYA,EAAWjM,UACvBkM,KAAMA,EAAKlM,UACXmM,KAAMA,EAAKnM,UACXoM,UAAWA,EAAUpM,UACrBqM,WAAYA,EAAWrM,UACvB6I,WACAC,YACAgD,YAAa,IAAIrT,IAAGqT,GACpBC,aAAc,IAAItT,IAAGsT,GACrBO,aACAE,mBACAD,qBACAjH,UAAWqG,IA7HV,MAwEDxO,IAxEC,0DAiI4B6P,GAAiB,CAChDC,uBAAwB,CACtB,CAAEpI,YAAa4H,EAAKrF,QAAS,CAACgF,EAAWC,IACzC,CACExH,YAAa6H,EACbtF,QAAS,CAACrB,EAAQiG,EAAcC,EAAYC,EAAMC,KAGtD7I,SACA5D,eA1IG,QAiICwN,EAjID,qBA4IyBA,GA5IzB,oEA4IIC,EA5IJ,mBA6IGC,GAAsB,CAC1BD,oBACAzN,eA/IC,sLAmJEqG,EAAO/F,WAnJT,sE,sBAsJA,IAAM+K,GAAY,WACvB,OAAO,IAAI9P,MAAOoS,UAAY,KAKzB,SAAe/F,GAAtB,mC,8CAAO,uDAAA9Q,EAAA,6DACLqO,EADK,EACLA,YACAvB,EAFK,EAELA,OAFK,IAGL8D,eAHK,MAGK,GAHL,EAIL1H,EAJK,EAILA,WAJK,IAKL6H,sBALK,MAKY,yBALZ,MAML+F,mBANK,MAMS,mBANT,MAOLC,sBAPK,MAOY,wBAPZ,MAQLC,eARK,MAFiB,KAEjB,WAmB2BC,GAAgB,CAC9C5I,cACAvB,SACA8D,UACA1H,eAvBG,cAmBCyN,EAnBD,gBAyBQC,GAAsB,CACjCD,oBACAzN,aACA6H,iBACA+F,cACAC,iBACAC,YA/BG,oF,sBAmCA,SAAeC,GAAtB,mC,8CAAO,qCAAAjX,EAAA,6DACLqO,EADK,EACLA,YACAvB,EAFK,EAELA,OAFK,IAGL8D,eAHK,MAGK,GAHL,EAIL1H,EAJK,EAILA,WAJK,SAYGA,EAAWgO,mBAAmB,OAZjC,cAWL7I,EAAY8I,gBAXP,OAaHC,UACF/I,EAAYgJ,WAAZ,MAAAhJ,EAAW,CAAYvB,EAAOtD,WAAnB,mBAAiCoH,EAAQ9J,KAAI,SAAC+L,GAAD,OAAOA,EAAErJ,gBAC7DoH,EAAQtP,OAAS,GACnB+M,EAAYiJ,YAAZ,MAAAjJ,EAAW,YAAgBuC,IAhBxB,SAkBQ9D,EAAOmK,gBAAgB5I,GAlB/B,oF,sBAqBA,SAAemI,GAAtB,mC,8CAAO,mCAAAxW,EAAA,6DACLyW,EADK,EACLA,uBACA3J,EAFK,EAELA,OACA5D,EAHK,EAGLA,WAHK,SAYoBA,EAAWgO,mBAAmB,OAZlD,cAYCE,EAZD,OAY0DA,UAC/DX,EAAuBrT,SAAQ,YAAoC,IAAjCiL,EAAgC,EAAhCA,YAAgC,IAAnBuC,eAAmB,MAAT,GAAS,EAChEvC,EAAY8I,gBAAkBC,EAC9B/I,EAAYgJ,WAAZ,MAAAhJ,EAAW,CACTvB,EAAOtD,WADE,mBAENoH,EAAQ9J,KAAI,SAAC+L,GAAD,OAAOA,EAAErJ,iBAEf,OAAPoH,QAAO,IAAPA,OAAA,EAAAA,EAAStP,QAAS,GACpB+M,EAAYiJ,YAAZ,MAAAjJ,EAAW,YAAgBuC,OApB1B,SAuBQ9D,EAAOyK,oBAClBd,EAAuB3P,KAAI,qBAAGuH,gBAxB3B,oF,sBA4BA,SAAeuI,GAAtB,mC,8CAAO,6DAAA5W,EAAA,6DACL2W,EADK,EACLA,kBACAzN,EAFK,EAELA,WAFK,IAGL6H,sBAHK,MAGY,yBAHZ,MAIL+F,mBAJK,MAIS,mBAJT,MAKLC,sBALK,MAKY,wBALZ,MAMLC,eANK,MAtFiB,KAsFjB,EAeCQ,EAAiBb,EAAkBc,YACnCnD,EAAYC,KAClB7R,GAAO,CAAEoJ,QAASiF,IAjBb,SAkBoC7H,EAAWwO,mBAClDF,EACA,CACEG,eAAe,IArBd,cAkBC3L,EAlBD,OAwBLtJ,GAAO,CAAEoJ,QAASgL,EAAa7K,KAAM,UAAWD,SAEhDnG,QAAQC,IAAI,oCAAqCkG,GAE7C4L,GAAO,EACX,sBAAC,sBAAA5X,EAAA,yDACS4X,KAAQrD,KAAcD,EAAY0C,GAD3C,uBAEG9N,EAAWwO,mBAAmBF,EAAgB,CAC5CG,eAAe,IAHpB,SAKS7X,EAAM,KALf,gEAAD,GA7BK,oBAsCG+X,GAAsC7L,EAAMgL,EAAS9N,GAtCxD,+DAwCC,KAAI8N,QAxCL,uBAyCK,IAAIhN,MAAM,kDAzCf,eA2CC8N,EAAsD,KA3CvD,oBA8COC,GAAoB7O,EAAYyN,EAAmB,UA9C1D,QA6CDmB,EA7CC,OA+CClX,MA/CD,+DAiDCkX,IAAkBA,EAAeE,IAjDlC,qBAkDGF,EAAeG,KAlDlB,iBAmDUpQ,EAAIiQ,EAAeG,KAAK3W,OAAS,EAnD3C,aAmD8CuG,GAAK,GAnDnD,sBAoDSqQ,EAAOJ,EAAeG,KAAKpQ,IACxBsQ,WAAW,iBArDvB,uBAsDW,IAAInO,MACR,uBAAyBkO,EAAKjU,MAAM,gBAAgB3C,SAvD3D,UAmDwDuG,EAnDxD,8BA4DK,IAAImC,MAAM1G,KAAKC,UAAUuU,EAAeE,MA5D7C,cA8DG,IAAIhO,MAAM,sBA9Db,yBAgEH4N,GAAO,EAhEJ,4BAkELlV,GAAO,CAAEoJ,QAASiL,EAAgB9K,KAAM,UAAWD,SAEnDnG,QAAQC,IAAI,UAAWkG,EAAMuI,KAAcD,GApEtC,kBAqEEtI,GArEF,0E,+BAwEQ6L,G,qFAAf,WACE7L,EACAgL,EACA9N,GAHF,iBAAAlJ,EAAA,6DAKM4X,GAAO,EALb,SAMuB,IAAI3X,SAAQ,SAACC,EAASkY,GACzC,sBAAC,sBAAApY,EAAA,sDACCG,YAAW,WACLyX,IAGJA,GAAO,EACP/R,QAAQC,IAAI,qBAAsBkG,GAClCoM,EAAO,CAAEpB,SAAS,OACjBA,GACH,IACE9N,EAAWmP,YACTrM,GACA,SAAC+D,GACClK,QAAQC,IAAI,eAAgBkG,EAAM+D,GAClC6H,GAAO,EACH7H,EAAOiI,IACTI,EAAOrI,EAAOiI,KAEd9X,EAAQ6P,KAGZ,UAEFlK,QAAQC,IAAI,uBAAwBkG,GACpC,MAAOsM,GACPV,GAAO,EACP/R,QAAQC,IAAI,oBAAqBkG,EAAMsM,GA1B1C,UA4BSV,EA5BT,uBA8BG,sBAAC,8BAAA5X,EAAA,+EAEmCkJ,EAAWqP,qBAAqB,CAC9DvM,IAHL,OAESwM,EAFT,OAKSzI,EAASyI,GAAqBA,EAAkB5X,MAAM,GACvDgX,IACE7H,EAEMA,EAAOiI,KAChBnS,QAAQC,IAAI,iBAAkBkG,EAAM+D,GACpC6H,GAAO,EACPQ,EAAOrI,EAAOiI,MACJjI,EAAO0I,eAGjB5S,QAAQC,IAAI,wBAAyBkG,EAAM+D,GAC3C6H,GAAO,EACP1X,EAAQ6P,IAJRlK,QAAQC,IAAI,4BAA6BkG,EAAM+D,GAN/ClK,QAAQC,IAAI,uBAAwBkG,EAAM+D,IARjD,gDAsBQ6H,GACH/R,QAAQC,IAAI,8BAA+BkG,EAA3C,MAvBL,wDAAD,GA9BH,SAyDSlM,EAAM,KAzDf,gEAAD,MAPJ,cAMQiQ,EANR,OAoEE6H,GAAO,EApET,kBAqES7H,GArET,4C,sBAwEA,SAASc,GAAkB8B,GACzB,IAAMtE,EAAc,IAAIC,cAMxB,OALAqE,EACG9P,QAAO,SAAC+P,GAAD,YAA+BrS,IAANqS,KAChCxP,SAAQ,SAACwP,GACRvE,EAAY1H,IAAIiM,MAEbvE,EA6BT,IATiCqK,GAS3BC,GAAoBC,aAAO,CAC/BC,WAAY,UACZzJ,MAAO,SACPtE,SAAU,SACVlF,KAAM,MACNkT,UAAW,YAGAC,IAjBoBL,GAkB/BE,KAAOI,MAAM,CAACJ,KAAOK,MAAM,CAAC,OAAQN,OAnCtC,SAAuBD,GACrB,IAAMQ,EAAiBN,KAAOO,QAAQ,OACtC,OAAOP,KAAOK,MAAM,CAClBL,aAAO,CACLQ,QAASF,EACT7P,GAAI,SACJ2E,MAAO,QAET4K,aAAO,CACLQ,QAASF,EACT7P,GAAI,SACJ2E,MAAO,QACP+B,OAAQ2I,MAMLW,CAAc,CACnBvP,QAAS8O,aAAO,CACdU,KAAM,WAER1Y,MAAO8X,MAgBJ,SAAea,GAAtB,qC,8CAAO,WACLrQ,EACAsQ,GAFK,qCAAAxZ,EAAA,6DAMCyZ,EAAO,CAACD,EAAW1S,KAAI,SAACvC,GAAD,OAAOA,EAAEP,cAAa,CAAE0V,WAAY,WAN5D,SAQmBxQ,EAAWyQ,YAAY,sBAAuBF,GARjE,UAQCG,EARD,SASCC,EAAMd,GAAuCa,IAC3C5L,MAVH,sBAWG,IAAIhE,MACR,qCACEwP,EAAW1S,KAAI,SAACvC,GAAD,OAAOA,EAAEP,cAAY8V,KAAK,MACzC,KACAD,EAAI7L,MAAMlC,SAfX,OAkBLlF,IAA6B,qBAAfiT,EAAI9J,QACZkC,EAKM,GAxBP,cAyBiB4H,EAAI9J,OAAOnP,OAzB5B,IAyBL,2BAAWsO,EAA6B,QAClCtO,EAKO,KACPiZ,EAAI9J,OAAOnP,QACLiY,EAAsC3J,EAAtC2J,WAAYzJ,EAA0BF,EAA1BE,MAAOtE,EAAmBoE,EAAnBpE,SAAUlF,EAASsJ,EAATtJ,KACrCgB,IAAmB,WAAZhB,EAAK,IACZhF,EAAQ,CACNiY,aACAzJ,MAAO,IAAIvP,YAAUuP,GACrBtE,WACAlF,KAAMsP,UAAO6E,KAAKnU,EAAK,GAAI,YAG/BqM,EAASrP,KAAKhC,GA1CX,uDA4CE,CACLkJ,QAAS,CACPwP,KAAMO,EAAI9J,OAAOjG,QAAQwP,MAE3B1Y,MAAO0D,OAAO0V,YACZ/H,EAASnL,KAAI,SAACoI,EAASrH,GAAV,MAAgB,CAAC2R,EAAW3R,GAAG7D,WAAYkL,SAjDvD,6C,+BAuDQ6I,G,qFAAf,WACE7O,EACAmF,EACAqL,GAHF,uBAAA1Z,EAAA,sEAMsCkJ,EAAW+Q,iBAE7C/Q,EAAWgR,0BARf,cAME7L,EAAY8I,gBANd,OAWQgD,EAAW9L,EAAY+L,mBAEvBC,EAAkBhM,EAAYiM,WAAWH,GACzCI,EAAqBF,EAAgBjZ,SAAS,UAE9CqY,EAAO,CAACc,EADM,CAAEC,SAAU,SAAUd,eAf5C,UAmBoBxQ,EAAWyQ,YAAY,sBAAuBF,GAnBlE,aAmBQI,EAnBR,QAoBU7L,MApBV,uBAqBU,IAAIhE,MAAM,mCAAqC6P,EAAI7L,MAAMlC,SArBnE,iCAuBS+N,EAAI9J,QAvBb,6C,sBCj7BO,IAAM0K,GAAiBC,UAAoB,CAChDA,QAAkB,GAAI,QACtBA,QAAkB,GAAI,SACtBA,QAAkB,UAClBA,QAAkB,MAGPC,GAAcD,UAAoB,CAC7CA,QAAkB,IAClBA,QAAkB,EAAG,UACrBA,MAAgB,YAChBA,MAAgB,eAChBA,QAAkB,MAGb,SAASE,GACdhV,GACwD,IAAD,EACzB6U,GAAeI,OAAOjV,GAA9CuJ,EADiD,EACjDA,KAAMC,EAD2C,EAC3CA,MAAO0L,EADoC,EACpCA,OACnB,MAAO,CACL3L,KAAM,IAAItP,YAAUsP,GACpBC,MAAO,IAAIvP,YAAUuP,GACrB0L,UAUG,SAASC,GAAmBnV,GAAiB,IAAD,EACT+U,GAAYE,OAAOjV,GAArD/E,EAD2C,EAC3CA,SAAUma,EADiC,EACjCA,YAAaC,EADoB,EACpBA,OAC7B,MAAO,CACLpa,WACAma,cAAeA,EACfC,OAAQ,IAAIhZ,IAAGgZ,EAAQ,GAAI,OAIxB,SAASC,GAAwB1R,GACtC,MAAO,CACL,CACE2R,OAAQ,CACNC,OAAQX,GAAeY,SAAS,SAChCC,MAAO9R,EAAUxF,aAGrB,CACEuX,SAAUd,GAAepE,OAKxB,IAAM3H,GAAmB,IAAI7O,YAClC,+CAGK,SAAe2b,GAAtB,qC,8CAAO,WACLtS,EACAM,GAFK,iBAAAxJ,EAAA,6DAIDyb,EAAUP,GAAwB1R,GAJjC,SAMYN,EAAWyQ,YAAY,qBAAsB,CAC5DjL,GAAiB1K,WACjB,CACE0V,WAAYxQ,EAAWwQ,WACvB+B,aAVC,YAMDC,EANC,QAaI1N,MAbJ,sBAcG,IAAIhE,MACR,yCACER,EAAUxF,WACV,KACA0X,EAAK1N,MAAMlC,SAlBZ,gCAqBE4P,EAAK3L,OACTjJ,KAAI,gBAAG8I,EAAH,EAAGA,OAAH,IAAWV,QAAWtJ,EAAtB,EAAsBA,KAAMiT,EAA5B,EAA4BA,WAAYzJ,EAAxC,EAAwCA,MAAOtE,EAA/C,EAA+CA,SAA/C,MAAiE,CACpEtB,UAAW,IAAI3J,YAAU+P,GACzBnF,YAAa,CACX7E,KAAM+V,KAAKd,OAAOjV,GAClBiT,aACAzJ,MAAO,IAAIvP,YAAUuP,GACrBtE,gBAGHjI,QAAO,YAAsB,IAAnB4H,EAAkB,EAAlBA,YAET,OAAOgR,EAAQG,OAAM,SAAC/Y,GACpB,GAAIA,EAAO0Y,SACT,OAAO9Q,EAAY7E,KAAKtE,SAAWuB,EAAO0Y,SACrC,GAAI1Y,EAAOsY,OAAQ,CACxB,IAAIU,EAAcF,KAAKd,OAAOhY,EAAOsY,OAAOG,OAC5C,OAAO7Q,EAAY7E,KAChB3B,MACCpB,EAAOsY,OAAOC,OACdvY,EAAOsY,OAAOC,OAASS,EAAYva,QAEpCuJ,OAAOgR,GAEZ,OAAO,SA7CR,4C,sBAkDA,SAAeC,GAAtB,qC,8CAAO,WACL5S,EACA6S,GAFK,uBAAA/b,EAAA,sEAI8BC,QAAQuH,IAAI,CAC7CgU,GAAsBtS,EAAY6S,GAClC7S,EAAWsB,eAAeuR,KANvB,0CAIAC,EAJA,KAIa9M,EAJb,KAQC+M,EAAoCD,EAAYlV,KACpD,YAAiC,IAA9B0C,EAA6B,EAA7BA,UAAWiB,EAAkB,EAAlBA,YACZ,MAAO,CACLmF,OAAQpG,EACR0F,QAASzE,EACTyR,cAAetB,GAAsBnQ,EAAY7E,MAAMuJ,SAbxD,kBAiBE8M,EAAkBhT,OAAO,CAC9B2G,OAAQmM,EACR7M,UACAgN,cAAeC,uBApBZ,4C,sBAwBA,SAASC,KAAgD,IACtDC,EAAkBC,KAAlBD,cADqD,EAE3CE,KAAXrL,EAFsD,oBAG7D,OAAOxN,mBAAQ,WACb,IADmB,EACb8Y,EAAiBlY,OAAO0V,YAC5B1J,eAAYxJ,KAAI,SAACqI,GAAD,MAAU,CAACA,EAAKtL,QAAQG,WAAYmL,EAAK/G,UAFxC,cAIA8I,GAAW,IAJX,yBAIV3B,EAJU,QAKXkN,EAAmBJ,EAAcjS,MACrC,SAACsS,GAAD,OACEA,EAAa7Y,UAAY0L,EAAOA,OAAO1L,QAAQG,cAE7CuL,EAAOA,OAAOO,gBAAgB9L,aAAcwY,GAC5CC,IACFD,EAAejN,EAAOA,OAAOO,gBAAgB9L,YAC3CyY,EAAiBE,WAAjB,UAAiCF,EAAiBrU,KAAlD,UAGAmH,EAAOA,OAAOW,iBAAiBlM,aAAcwY,GAC7CC,IACFD,EAAejN,EAAOA,OAAOW,iBAAiBlM,YAC5CyY,EAAiBG,YAAjB,UAAkCH,EAAiBrU,KAAnD,YAdR,2BAAmC,IAJhB,8BAsBnB,OAAOoU,IAEN,QAACtL,QAAD,IAACA,OAAD,EAACA,EAAS5P,OAAQ+a,EAAc/a,SAK9B,SAASub,KAad,IAAM3T,EAAaW,IADnB,EAEwBiT,KAAjB7L,EAFP,sBAGqBsL,KAAdQ,EAHP,oBAKMC,GAAY/L,GAAiB,IAChCnK,KAAI,SAACoI,GAAD,OAAaA,EAAQgN,iBACzBjT,QACE8T,GAAc,IAAIjW,KAAI,SAACmW,GAAD,OAAgBA,EAAW1N,OAAOO,oBAE1D7G,QACE8T,GAAc,IAAIjW,KACjB,SAACmW,GAAD,OAAgBA,EAAW1N,OAAOW,qBAGlCgN,EAAc,YAAI,IAAIzW,IAAIuW,EAASlW,KAAI,SAACqI,GAAD,OAAUA,EAAKnL,gBAAc8C,KACxE,SAACqW,GAAD,OAAgB,IAAItd,YAAUsd,MAahC,OAAOzV,EAVa,uCAAG,4BAAA1H,EAAA,sEACGuZ,GAA0BrQ,EAAYgU,GADzC,cACfE,EADe,yBAEd9Y,OAAO0V,YACZ1V,OAAO+Y,QAAQD,EAAUxc,OAAOkG,KAAI,mCAAElH,EAAF,KAAO6K,EAAP,WAAwB,CAC1D7K,EACA6K,GAAesQ,GAAmBtQ,EAAY7E,YAL7B,2CAAH,qDAYlB2E,YACE,iBACArB,GACC+H,GAAiB,IAAI3P,QACrByb,GAAc,IAAIzb,QAErB,CAAEyD,gBAnD8B,M,IC/KfuY,G,0IAGFC,G,kGAEUC,MAAMrY,KAAKsY,IAAMF,G,YAAlCG,E,QACOC,G,gCACgBD,EAASE,O,cAA9BC,E,yBACCA,EAAaC,QAAUD,EAAajY,KAAO,M,yDAGpDC,QAAQC,IAAR,0CAA+CyX,EAA/C,oB,iCAEK,M,gMAIPQ,G,0FAEOT,EAAWlW,IAAX,yBAAiC2W,K,yGAnBvBT,GACZG,IAAc,iCAsBhB,ICsBMO,GAETC,WAMG,SAAS1B,KACd,IAAMrT,EAAaW,IACXwS,EAAkBC,KAAlBD,cAoCR,OAAO3U,EAlCY,uCAAG,4BAAA1H,EAAA,sEAKFC,QAAQuH,IACxB0W,GAAe7B,GAAevV,IAA9B,uCAAkC,WAAOmW,GAAP,eAAAjd,EAAA,+EAETmW,UAAOgI,KAC1BjV,EACA+T,EAAWpZ,QACX,GACAoZ,EAAWnO,WANiB,cAExBS,EAFwB,yBAQvB,CACLA,SACA6O,WAAYnB,EAAW7U,KACvB0G,UAAWmO,EAAWnO,YAXM,uCAc9BpM,GAAO,CACLoJ,QAAS,2BACTC,YAAa,KAAED,QACfG,KAAM,UAjBsB,kBAmBvB,MAnBuB,yDAAlC,wDANkB,cACdiF,EADc,yBA6BbA,EAAQrO,QACb,SAAC0O,GAAD,QACIA,MA/Bc,2CAAH,qDAoCjBhH,YAAM,gBAAiB8R,EAAc/a,OAAQ4H,GAC7C,CAAEnE,gBAAiBsZ,KAIhB,SAASC,KAAmC,IAAD,EAC1CpV,EAAaW,IACXiD,EAAWS,KAAXT,OAFwC,4CAIhD,wCAAA9M,EAAA,yDACO8M,GAAW5D,GAAe4D,EAAOtD,UADxC,yCAEW,IAFX,OAIE3D,QAAQC,IAAI,8CACRyY,EAA6C,GAC3CC,EAAuBC,MAAM1E,KACjC,IAAItT,IACFuX,GAAYnb,QACV,qBAAG6b,cACH5X,KAAI,qBAAGgI,UAA0B9K,gBAErC8C,KAAI,SAAC6X,GAAD,OAAkB,IAAI9e,YAAU8e,MAZxC,cAcoBH,GAdpB,gEAcO1P,EAdP,4BAgBuC6C,cAAWC,aAC1C1I,EACA4D,EAAOtD,UACPsF,GAnBR,QAgBY+C,EAhBZ,OAqBM0M,EAA+BA,EAA6BtV,OAC1D4I,EACGhP,QACC,SAAC2M,GAAD,OACEA,EAAWoP,eAAehd,YAC1B4N,EAAWqP,gBAAgBjd,cAE9BiB,QAAO,SAAC2M,GAAD,OACNwO,GAAYc,MACV,SAACvP,GAAD,OACEA,EAAOmP,YAAcnP,EAAO1L,QAAQgH,OAAO2E,EAAWD,eA/BtE,mDAoCM1J,QAAQC,IACN,mCADF,UAEEgJ,SAFF,aAEE,EAAW9K,WACX,KAAE8H,SAvCV,wKA4CSyS,GA5CT,yEAJgD,sBAmDhD,IAAM1Z,EAAW0F,YACf,kCACArB,EAFoB,OAGpB4D,QAHoB,IAGpBA,GAHoB,UAGpBA,EAAQtD,iBAHY,aAGpB,EAAmBxF,YAtD2B,EAwD7B0D,GAxD6B,4CAwDiB7C,EAAU,CACzEE,gBAAiBsZ,KAGnB,MAAO,CACLpM,SA7D8C,oBA8D9CzM,QAAS,SAACyC,GAAD,OAAyBD,EAAanD,EAAUoD,KAI7D,IAAM8W,GAA2DtW,IAAMC,cACrE,MAGI2V,GAA8B,IAQvBW,GAAiBhB,GAAY5T,MACxC,gBAAGhC,EAAH,EAAGA,KAAMsW,EAAT,EAASA,WAAT,MAAmC,aAATtW,IAAwBsW,KAG7C,SAASO,GACd1P,EACA8M,GACiB,IAAD,IAChB,IAAK9M,EACH,MAAO,GAET,IACM0N,EADciB,GAAe7B,GACJjS,MAAK,SAAC8U,GAAD,OAClCA,EAAYrb,QAAQgH,OAAO0E,EAAO1L,YAE9Bsb,GACG,OAAN5P,QAAM,IAANA,OAAA,EAAAA,EAAQO,mBAAR,UACCQ,eAAYlG,MAAK,SAACgV,GAAD,OAAWA,EAAMvb,QAAQgH,OAAO0E,EAAOO,2BADzD,aACC,EACI1H,QACK,OAAV6U,QAAU,IAAVA,OAAA,EAAAA,EAAYN,YAAZ,iBAA4BM,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAYN,UAAxC,MACD,UACI0C,GACG,OAAN9P,QAAM,IAANA,OAAA,EAAAA,EAAQW,oBAAR,UACCI,eAAYlG,MAAK,SAACgV,GAAD,OAAWA,EAAMvb,QAAQgH,OAAO0E,EAAOW,4BADzD,aACC,EACI9H,QACK,OAAV6U,QAAU,IAAVA,OAAA,EAAAA,EAAYL,aAAZ,iBAA6BK,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAYL,WAAzC,MACD,UAEF,OAAO,6BACFK,GADL,IAEEmB,WAAU,OAAEnB,QAAF,IAAEA,OAAF,EAAEA,EAAY7U,KACxB+W,eACAE,gBACApC,eAIG,SAASX,KAAoB,IAAD,EACSjZ,EAExC,gBAAiB,IAHc,mBAIjC,MAAO,CAAEgZ,cAJwB,KAITiD,iBAJS,MAO5B,SAASC,GAAT,GAAwE,IAA9CxB,EAA6C,EAA7CA,cAAeyB,EAA8B,EAA9BA,iBAAkB5W,EAAY,EAAZA,SAAY,EAChC0T,KAApCD,EADoE,EACpEA,cAAeiD,EADqD,EACrDA,iBAEjBzb,EAAUka,GAAiB,IAAIle,YAAUke,GACzC7U,EAAaW,IACb4V,EAAcvB,GAAe7B,GAC7BY,EACJpZ,GAAW4b,EAAYrV,MAAK,SAACmF,GAAD,OAAYA,EAAO1L,QAAQgH,OAAOhH,MAGhElB,qBAAU,WACJsa,GAAcA,EAAWyB,aAC3B7Y,QAAQC,IAAI,oCAAqCmX,GAC7C+B,IACFQ,EAAiBR,GAAenb,QAAQG,eAI3C,IAlByE,MAoBhDvB,qBApBgD,mBAoBrE8M,EApBqE,KAoB7DmQ,EApB6D,KAmD5E,OA9BA/c,qBAAU,WAAO,IAAD,EAEZ4M,GACA0N,IADA,UAGA1N,EAAO4C,SAASC,kBAHhB,aAGA,EAA4BvH,OAA5B,OAAmCoS,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAYpZ,YAIjD6b,EAAU,MACLzC,GAAeA,EAAWpZ,QAQ/BsS,UAAOgI,KAAKjV,EAAY+T,EAAWpZ,QAAS,GAAIoZ,EAAWnO,WACxD6Q,KAAKD,GACLE,OAAM,SAACtH,GAAD,OACL5V,GAAO,CACLoJ,QAAS,uBACTC,YAAauM,EAAExM,QACfG,KAAM,aAbVvJ,GAAO,CACLoJ,QAAS,uBACTC,YAAa,2CACbE,KAAM,aAcT,CAAC/C,EAAY+T,IAGd,kBAAC8B,GAAcnV,SAAf,CACEhJ,MAAK,2BACH2O,UACG0P,GAAiB1P,EAAQ8M,IAFzB,IAGHmD,mBACAnD,gBACAiD,sBAGD1W,GAKA,SAASiX,GAAgB9B,GAC9B,IAAKA,EAAe,CAClB,IAAM+B,EAAQvd,aAAaC,QAAQ,iBAC/Bsd,IACF/B,EAAgBza,KAAKK,MAAMmc,IAE7B/B,EAAgBA,IAAa,OAAIiB,SAAJ,IAAIA,QAAJ,EAAIA,GAAgBnb,QAAQG,aAAc,GAEzE,MAAM,WAAN,OAAkB+Z,GAGb,SAASgC,KAGb,IAAD,EAII1c,EAA4C,wBAAyB,IAJzE,mBAKA,MAAO,CALP,WAQK,SAAS2c,KACd,IAAMlW,EAAUC,qBAAWgV,IAC3B,IAAKjV,EACH,MAAM,IAAIE,MAAM,0BAElB,OAAOF,EAGF,SAASmW,KAAgB,IAAD,EACKxd,mBAAwB,MAD7B,mBACtByd,EADsB,KACXC,EADW,OAGTC,KAAbC,EAHsB,oBAIvBC,EA0OD,WAAiC,IAAdC,EAAa,uDAAL,IAC1BD,EAASE,GAAqBD,GACpC,IAAKD,EACH,OAAO,KAGT,OAAOA,EACJzd,QAAO,qBAAG4d,WAA4BC,SACtC5Z,KAAI,SAAC6Z,GAAD,oBAAC,gBACDA,GADA,IAEHrN,KAAqB,QAAfqN,EAAMrN,KAAiB,OAAS,WApP3BsN,GAiBf,OAfAje,qBAAU,WAAO,IAAD,IACVke,GAAc,OAATR,QAAS,IAATA,GAAA,UAAAA,EAAW3K,YAAX,eAAiBpU,QAAS,GAAKwf,OAAOT,EAAU3K,KAAK,GAAG,IAC7DqL,GAAc,OAATV,QAAS,IAATA,GAAA,UAAAA,EAAW1K,YAAX,eAAiBrU,QAAS,GAAKwf,OAAOT,EAAU1K,KAAK,GAAG,IAC7DqL,EAAOV,GAAUA,EAAOhf,OAAS,GAAKgf,EAAO,GAAG/M,MAEhD2M,EACFW,GAAME,EACFC,EACE,CAACH,EAAIE,EAAIC,GAAMC,MAAK,SAACjhB,EAAGkhB,GAAJ,OAAUlhB,EAAIkhB,KAAG,IACpCL,EAAKE,GAAM,EACd,KAENZ,EAAaD,KACZ,CAACG,EAAWC,IAERJ,EAGF,SAASM,KAAqC,IAAhBD,EAAe,uDAAP,IAAO,EAC/BP,KAAXzQ,EAD0C,EAC1CA,OACFrG,EAAaW,IAF+B,SAGnCsX,IAHmC,2EAGlD,sBAAAnhB,EAAA,yDACOuP,GAAWrG,EADlB,yCAEW,MAFX,uBAIeqG,EAAO6R,UAAUlY,EAAYqX,GAJ5C,oFAHkD,4BASjC7Y,EACfyZ,EACA5W,YAAM,sBAAuBgF,EAAQrG,GACrC,CAAEnE,gBArLyB,MAyKqB,mBAS3Cub,EAT2C,KAclD,OAAOA,EAiCF,SAASe,KAAwB,IAC9B9R,EAAWyQ,KAAXzQ,OAEJ+R,EAAUjW,EAAekE,GAAUA,EAAO4C,SAASuD,MAEnD6L,EAAUlW,EAAekE,GAAUA,EAAO4C,SAASwD,MACvD,MAAO,CACL6L,aAAcjS,GAAU+R,EAAUG,aAAU5G,OAAOtL,EAAQ+R,GAAW,KACtEI,aAAcnS,GAAUgS,EAAUE,aAAU5G,OAAOtL,EAAQgS,GAAW,MAInE,SAASnB,KAEsC,IADpDuB,EACmD,uDAD3C,GAC2C,EACZN,KAA/BG,EAD2C,EAC3CA,aAAcE,EAD6B,EAC7BA,aAD6B,EAEhC1B,KAAXzQ,EAF2C,EAE3CA,OACFmG,EACH8L,GAAiBjS,EAEdiS,EAAaI,MAAMD,GAAO7a,KAAI,yCAAmB,CAAnB,cAD9B,GAEA6O,EACH+L,GAAiBnS,EAEdmS,EAAaE,MAAMD,GAAO7a,KAAI,yCAAmB,CAAnB,cAD9B,GAEN,MAAO,CAAC,CAAE4O,OAAMC,UAAUD,KAAUC,GAK/B,SAASkM,KAAqC,IAAfC,EAAc,0DAC/B9B,KAAXzQ,EAD0C,EAC1CA,OAD0C,EAEpBhC,KAAtBP,EAF0C,EAE1CA,UAAWF,EAF+B,EAE/BA,OACb5D,EAAaW,IAH+B,SAInCkY,IAJmC,2EAIlD,sBAAA/hB,EAAA,yDACOgN,EADP,yCAEW,MAFX,UAIOuC,EAJP,yCAKW,MALX,uBAOeA,EAAOyS,+BAClB9Y,EACA4D,EAAOtD,WATX,oFAJkD,sBAgBlD,OAAO9B,EACLqa,EACAxX,YAAM,wBAAyBuC,EAAQyC,EAAQvC,GAC/C,CAAEjI,gBAAiB+c,EAtQQ,IAHA,MA6QxB,SAASG,KAA4C,IAAfH,EAAc,0DACtCD,GAAsBC,GADgB,mBAClD7P,EADkD,KAEzD,OAAKA,EAGEA,EAAS,GAFP,KAKJ,SAAS6K,KAGb,IAAD,EAC8BvP,KAAtBP,EADR,EACQA,UAAWF,EADnB,EACmBA,OACb5D,EAAaW,IAFnB,4CAGA,sBAAA7J,EAAA,yDACOgN,EADP,yCAEW,MAFX,uBAIe8O,GAAoB5S,EAAY4D,EAAOtD,WAJtD,oFAHA,sBASA,OAAO9B,GATP,4CAWE6C,YAAM,mBAAoBuC,EAAQE,GAClC,CAAEjI,gBApSyB,MAwSxB,SAASyN,GACdP,EACA9C,EACA+S,GAEA,IAAKjQ,IAAa9C,EAChB,OAAO,KAET,IAAMgT,EAAWlQ,EAASpP,QACxB,gBAAGqZ,EAAH,EAAGA,cAAetM,EAAlB,EAAkBA,OAAlB,OACET,EAAKtE,OAAOqR,MACVgG,IAC2B,kBAAnBA,EACJA,EACAA,EAAele,cAAgB4L,EAAO5L,eAEhD,OAAOme,GAAYA,EAAS,GAGvB,SAASC,KAAmC,IAAD,EAC7BtF,KAAZ7K,EADyC,oBAExC1C,EAAWyQ,KAAXzQ,OAFwC,EAGhBwQ,KAAzB5O,EAHyC,oBAI1CkR,EAAW,OAAG9S,QAAH,IAAGA,OAAH,EAAGA,EAAQW,iBAC5B,OAAOsC,GACLP,EACAoQ,EACAA,GAAelR,EAAsBkR,EAAYre,aAI9C,SAASse,KAAkC,IAAD,EAC5BxF,KAAZ7K,EADwC,oBAEvC1C,EAAWyQ,KAAXzQ,OAFuC,EAGfwQ,KAAzB5O,EAHwC,oBAIzCkR,EAAW,OAAG9S,QAAH,IAAGA,OAAH,EAAGA,EAAQO,gBAC5B,OAAO0C,GACLP,EACAoQ,EACAA,GAAelR,EAAsBkR,EAAYre,aAK9C,SAASue,KACd,IAMwE,EANlE7S,EAAuB0S,KACrB7S,EAAWyQ,KAAXzQ,OAFyC,EAGnBjF,EAAc,OAACoF,QAAD,IAACA,OAAD,EAACA,EAAsBE,QAHlB,mBAG1CnF,EAH0C,KAG7B1C,EAH6B,KAIjD,OAAKwH,GAAWG,GAAyB3H,GAAW0C,EAGhD8E,EAAOW,iBAAiBrF,OAAO4D,qBAAkB0N,kBACnD,WAAkB,OAAX1R,QAAW,IAAXA,OAAA,EAAAA,EAAaK,UAAW,WAA/B,QAAsC,EAEjCyE,EAAOiT,qBACZ,IAAIvgB,IAAGwI,EAAY7E,KAAK3B,MAAM,GAAI,IAAK,GAAI,OANpC,KAWJ,SAASwe,KACd,IAMuE,EANjEhT,EAAsB6S,KACpB/S,EAAWyQ,KAAXzQ,OAFwC,EAGlBjF,EAAc,OAACmF,QAAD,IAACA,OAAD,EAACA,EAAqBG,QAHlB,mBAGzCnF,EAHyC,KAG5B1C,EAH4B,KAIhD,OAAKwH,GAAWE,GAAwB1H,GAAW0C,EAG/C8E,EAAOO,gBAAgBjF,OAAO4D,qBAAkB0N,kBAClD,WAAkB,OAAX1R,QAAW,IAAXA,OAAA,EAAAA,EAAaK,UAAW,WAA/B,QAAsC,EAEjCyE,EAAOmT,oBACZ,IAAIzgB,IAAGwI,EAAY7E,KAAK3B,MAAM,GAAI,IAAK,GAAI,OANpC,KAoCJ,SAAS0e,KAGb,IAAD,EACwDtf,EAAoB,sBAA2B9C,GADvG,mBACOqiB,EADP,KAC6BC,EAD7B,KAEA,MAAO,CACLD,qBAAsBA,EAAuB,IAAI/iB,YAAU+iB,QAAwBriB,EACnFsiB,2BAIG,SAASC,KAYb,IACOvT,EAAWyQ,KAAXzQ,OADR,EAE8BhC,KAAtBP,EAFR,EAEQA,UAAWF,EAFnB,EAEmBA,OACb5D,EAAaW,IACXgZ,EAA4BF,KAA5BE,wBAcR,OAAOnb,EAbe,uCAAG,4BAAA1H,EAAA,yDAClBgN,EADkB,yCAEd,MAFc,UAIlBuC,EAJkB,yCAKd,MALc,uBAOMA,EAAOwT,oBAAoB7Z,EAAY4D,EAAOtD,WAPpD,cAOjBwZ,EAPiB,SASrBH,EAAwBG,EAAe,GAAGpT,OAAO5L,YAT5B,kBAWhBgf,GAXgB,2CAAH,qDAepBzY,YAAM,qBAAsBuC,EAAQyC,EAAQvC,GAC5C,CAAEjI,gBAzbyB,MAygBxB,SAASke,KAA4B,IAAD,IACX1V,KAAtBT,EADiC,EACjCA,OAAQE,EADyB,EACzBA,UACV9D,EAAaW,IACb4V,EAAcyD,KACd9R,EAAa,YACd,IAAI3K,IAAIgZ,EAAY3Y,KAAI,SAACuD,GAAD,OAAUA,EAAKyE,UAAU9K,gBACpD8C,KAAI,SAACqc,GAAD,OAAqB,IAAItjB,YAAUsjB,MAczC,OAAOzb,EAZuB,uCAAG,sBAAA1H,EAAA,yDAC1BgN,EAD0B,yCAEtB,IAFsB,uBAKvB/M,QAAQuH,IACZ4J,EAAWtK,KAAI,SAACgI,GAAD,OACb6C,cAAWC,aAAa1I,EAAY4D,EAAOtD,UAAWsF,OAP7B,uCAU7BsU,QAV6B,2CAAH,qDAc5B7Y,YACE,2BACArB,EACA8D,EAHG,OAIHF,QAJG,IAIHA,GAJG,UAIHA,EAAQtD,iBAJL,aAIH,EAAmBxF,WACnByb,EAAYne,QACX8P,GAAc,IAAI9P,QAErB,CAAEyD,gBAviByB,MAsqBxB,SAASse,KACd,IAAMC,EAAuBb,KACvBc,EAAwBhB,KACxB/S,EAAayS,IAA6B,GAHR,EAIQjC,KAAxCb,EAJgC,EAIhCA,aAAcE,EAJkB,EAIlBA,cAAe9P,EAJG,EAIHA,OAC/BiU,EACJhU,GAAcA,EAAWoP,gBAAkBpP,EAAWsC,cAClD2R,EACJjU,GAAcA,EAAWqP,iBAAmBrP,EAAWuC,eACzD,MACmB,YAAjBoN,GACkB,YAAlBE,GACCF,GACAE,EAII,CACL,CACE9P,SACA3P,IAAI,GAAD,OAAKuf,GAAL,OAAoBE,GAApB,OAAoCF,GACvCuE,KAAMvE,EACNrS,OAAQwW,EACRrQ,OACEuQ,GAAcjU,GAAUC,EACpBD,EAAOmT,oBACLlT,EAAWoP,eAAe+E,IAAInU,EAAWsC,gBAE3C,KACNtC,aACAoU,UACEJ,GAAcjU,GAAUC,EACpBD,EAAOmT,oBAAoBlT,EAAWsC,eACtC,MAER,CACEvC,SACA3P,IAAI,GAAD,OAAKyf,GAAL,OAAqBF,GAArB,OAAoCE,GACvCqE,KAAMrE,EACNvS,OAAQyW,EACR/T,aACAyD,OACEwQ,GAAelU,GAAUC,EACrBD,EAAOiT,qBACLhT,EAAWqP,gBAAgB8E,IAAInU,EAAWuC,iBAE5C,KACN6R,UACEH,GAAelU,GAAUC,EACrBD,EAAOiT,qBAAqBhT,EAAWuC,gBACvC,OAnCD,GAkFJ,SAAS8R,KACd,IAAM3a,EAAaW,IACXoI,EAAaqM,KAAbrM,SACF6R,EACJ7R,GACAwM,MAAM1E,KAAK,IAAItT,IAAIwL,EAASnL,KAAI,SAAC0I,GAAD,OAAgBA,EAAWD,YACvDwU,EAAOD,GAAeA,EAAYhd,KAAI,SAACyK,GAAD,OAAOA,EAAEvN,cANN,EA6C7B0D,EArCuB,uCAAG,4BAAA1H,EAAA,yDACrC8jB,EADqC,yCAEjC,MAFiC,cAIpCE,EAJoC,+BAAAhkB,EAAA,MAIxB,WAAO6D,GAAP,eAAA7D,EAAA,yDACVid,EAAae,GAAY5T,MAAK,SAACmF,GAAD,OAClCA,EAAO1L,QAAQgH,OAAOhH,MAFR,uBAKdgC,QAAQC,IAAI,yBACZpD,GAAO,CACLoJ,QAAS,uBACTG,KAAM,UARM,kBAUP,MAVO,uBAadpG,QAAQC,IAAI,iBAAkBmX,EAAW7U,MAb3B,SAeD+N,UAAOgI,KAClBjV,EACA+T,EAAWpZ,QACX,GACAoZ,EAAWnO,WAnBC,iFAsBdjJ,QAAQC,IAAI,wBAAyBmX,EAAW7U,KAAhD,MACA1F,GAAO,CACLoJ,QAAS,uBACTC,YAAa,KAAED,QACfG,KAAM,UA1BM,kBA4BP,MA5BO,0DAJwB,+DAmC5BhM,QAAQuH,IAAIsc,EAAYhd,IAAIkd,IAnCA,uCAmCanhB,QAAO,SAACmE,GAAD,OAAOA,MAnC3B,2CAAH,qDAuCvCuD,YACE,sCACArB,EACA6a,GAAQA,EAAK3iB,YAEf,CAAE2D,gBAAiBsZ,KAPdnN,EA7CwC,oBAsD/C,OAAKA,EAGEA,EAAQpK,KAAI,SAACyI,GAAD,MAAa,CAC9BA,SACA0U,eAAc,OAAEhS,QAAF,IAAEA,OAAF,EAAEA,EAAUpP,QACxB,SAAC2M,GAAD,OAAgBD,GAAUC,EAAWD,OAAO1E,OAAO0E,EAAO1L,gBALrD,KAmJJ,SAASqa,GACd7B,GAEA,IAAM6H,EAAoB7H,EAAcvV,KAAI,SAACyK,GAAD,oBAAC,gBACxCA,GADuC,IAE1C1N,QAAS,IAAIhE,YAAU0R,EAAE1N,SACzBiL,UAAW,IAAIjP,YAAU0R,EAAEzC,WAC3B4P,YAAY,OAGd,MAAM,GAAN,mBAAWwF,GAAX,YAAiClG,KAG5B,SAASkF,KAEd,OAAOhF,GADmB5B,KAAlBD,eAcH,SAAS8H,GACd9D,EACA+D,EACAC,GAEA,GAAIhE,EAAUiE,OACZ,OAAOjE,EAAU9Q,OAAOuE,SAE1B,IACIP,EAAoBgR,EALxB,EAIIC,EAAY,EAEV7O,EAAO0K,EAAUuB,MAAM,KAN7B,cAO6BjM,GAP7B,IAOA,2BAAmC,CAAC,IAAD,yBAEjC,GAAI6O,GADJD,GADIhR,EAA6B,YAEH6Q,EAC5B,MAEFI,GAAaD,GAZf,8BAcA,IAAME,EAAY3jB,KAAKqF,IAAY,KAARoN,EAA2B,KAAboC,EAAK,GAAG,IAOjD,OALI0O,EACe1jB,EAAe8jB,EAAWJ,GAE1BI,EAKd,SAASC,GACdrE,EACA+D,EACAC,GAEA,IAEI9Q,EAAOoR,EAAaJ,EAHxB,EACIC,EAAY,EACZI,EAAW,EAFf,cAI6BvE,EAAUuB,MAAM,MAJ7C,IAIA,2BAAoD,CAAC,IAAD,yBAElD,GAFIrO,EAA8C,KAAvCoR,EAAuC,KAE9CH,GADJD,GAAelE,EAAUiE,OAAS,EAAI/Q,GAASoR,GACjBP,EAAM,CAClCQ,IAAaR,EAAOI,GAAajR,EACjCiR,EAAYJ,EACZ,MAEFQ,GAAYL,EAAchR,EAC1BiR,GAAaD,GAZf,8BAcA,IAAMM,EAAgBD,EAAW9jB,KAAKqF,IAAIie,EAAMI,GAOhD,OALIH,EACe1jB,EAAekkB,EAAeR,GAE9BQ,EC3sCd,SAASC,GAAY7f,EAAU8f,GACpC,IAAMC,EAAgB7Z,mBAGtBxI,qBAAU,WACRqiB,EAAc5Z,QAAUnG,IACvB,CAACA,IAGJtC,qBAAU,WAIR,GAAc,OAAVoiB,EAAgB,CAClB,IAAI1b,EAAK4b,aAJX,WACED,EAAc5Z,SAAW4Z,EAAc5Z,YAGZ2Z,GAC3B,OAAO,WACLG,cAAc7b,OAGjB,CAAC0b,I,0IClBN,IAAMI,GAAUC,KAAOzjB,IAAV,MAME,SAAS0jB,GAAT,GAIX,IAAD,IAHD7kB,aAGC,WAHOD,EAGP,EAFDqI,EAEC,EAFDA,SAEC,IADD0c,uBACC,SACD,OACE,kBAACH,GAAD,CACE3kB,MAAK,cACH+kB,OAAQD,EAAkB,yBAAsB/kB,GAC7CC,IAGJoI,G,g1BCXP,IAAM+E,GAAQyX,KAAOzjB,IAAV,MAIL6jB,GAAYJ,aAAOK,KAAPL,CAAH,MAKTM,GAAiBN,aAAOK,KAAPL,CAAH,MAKdO,GAAOP,KAAOzjB,IAAV,MAIN,SAAC6J,GAAD,OACAA,EAAM,eACNoa,aADA,KAEWpa,EAAM,kBAEjB,SAACA,GAAD,OACAA,EAAM,iBACNoa,aADA,KAEsBpa,EAAM,oBAI1Bqa,GAAQT,KAAOzjB,IAAV,MAMI,SAAS8f,GAAT,GAAiE,IAA5CqE,EAA2C,EAA3CA,YAA2C,IAA9BnE,aAA8B,MAAtB,EAAsB,EAAnBoE,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC7D9F,EAAYD,KAD2D,EAEzDG,KAAbC,EAFsE,sBAGrCL,KAAhCb,EAHqE,EAGrEA,aAAcE,EAHuD,EAGvDA,cAEhB4G,EAAuB9a,iBAAO,MAC9B+a,EAAoB/a,iBAAO,MAN4C,EAQnC1I,mBAAS,MAR0B,mBAQtE0jB,EARsE,KAQvDC,EARuD,KA0C7E,SAASC,EAA2BpT,EAAQqT,GAA+B,IAApBC,EAAmB,wDACpEjV,EAAa2B,EACdhP,MAAM,EAAG0d,GACTtQ,QAAO,SAACC,EAAD,EAA4BzJ,GAAO,IAAD,qBAApB0L,EAAoB,KAAbzP,EAAa,KAClC0iB,IAAkB,UAAAlV,EAAWzJ,EAAI,UAAf,eAAmB2e,iBAAkB,GAAK1iB,EAOlE,OANAwN,EAAW1O,KAAK,CACd2Q,QACAzP,OACA0iB,iBACAC,YAAa3lB,KAAKG,MAAOulB,GAAkBF,GAAa,GAAM,OAEzDhV,IACN,IAIL,OAHIiV,IACFjV,EAAaA,EAAWoV,WAEnBpV,EAGT,OAnDAwT,IAAY,WACV,IACGmB,EAAqB7a,SACtB9H,KAAKC,UAAU0iB,EAAqB7a,WAClC9H,KAAKC,UAAU2iB,EAAkB9a,SACnC,CACA,IAAIsK,GAAgB,OAAT2K,QAAS,IAATA,OAAA,EAAAA,EAAW3K,OAAQ,GAC1BC,GAAgB,OAAT0K,QAAS,IAATA,OAAA,EAAAA,EAAW1K,OAAQ,GAE1BgR,EAAM,SAACC,EAAD,EAAkBC,GAAlB,IAAW/iB,EAAX,2BACR+iB,EAAQlF,EAAQiF,EAAQ9iB,EAAO8iB,GAC7BN,EAAY5Q,EAAKrE,OAAOsV,EAAK,GAAKhR,EAAKtE,OAAOsV,EAAK,GAEnDG,EAAgBT,EAA2B3Q,EAAM4Q,GAAW,GAC5DS,EAAgBV,EAA2B1Q,EAAM2Q,GAAW,GAEhEL,EAAqB7a,QAAU,CAC7BsK,KAAI,OAAE2K,QAAF,IAAEA,OAAF,EAAEA,EAAW3K,KACjBC,KAAI,OAAE0K,QAAF,IAAEA,OAAF,EAAEA,EAAW1K,MAGnByQ,EAAiB,CAAE1Q,KAAMoR,EAAenR,KAAMoR,OAE/C,KAEHpkB,qBAAU,WACRujB,EAAkB9a,QAAU,CAC1BsK,KAAI,OAAE2K,QAAF,IAAEA,OAAF,EAAEA,EAAW3K,KACjBC,KAAI,OAAE0K,QAAF,IAAEA,OAAF,EAAEA,EAAW1K,QAElB,CAAC0K,IAsBF,kBAACgF,GAAD,CACE7kB,MACEslB,EAAc,CAAEkB,KAAM,GAAM,CAAEzB,OAAQ,QAAS0B,SAAU,WAG3D,kBAAC,GAAD,kBACA,kBAACzB,GAAD,KACE,kBAAC,KAAD,CAAKnP,KAAM,GAAI7V,MAAO,CAAE0mB,UAAW,SAAnC,SACS/H,EADT,KAGA,kBAAC,KAAD,CAAK9I,KAAM,GAAI7V,MAAO,CAAE0mB,UAAW,UAAnC,UACU7H,EADV,MAVJ,OAcG8G,QAdH,IAcGA,OAdH,EAcGA,EAAexQ,KAAK7O,KAAI,gBAAGyM,EAAH,EAAGA,MAAOzP,EAAV,EAAUA,KAAM2iB,EAAhB,EAAgBA,YAAhB,OACvB,kBAACU,GAAD,CACEvnB,IAAK2T,EAAQ,GACbA,MAAOA,EACPzP,KAAMA,EACNwP,KAAM,OACNmT,YAAaA,EACbW,aAAc,kBAAMrB,EAAQxS,IAC5B8T,YAAa,kBAAMrB,EAAOliB,SAG9B,kBAACwjB,GAAD,CAAoBpH,UAAWA,IAzBjC,OA0BGiG,QA1BH,IA0BGA,OA1BH,EA0BGA,EAAezQ,KAAK5O,KAAI,gBAAGyM,EAAH,EAAGA,MAAOzP,EAAV,EAAUA,KAAM2iB,EAAhB,EAAgBA,YAAhB,OACvB,kBAACU,GAAD,CACEvnB,IAAK2T,EAAQ,GACbA,MAAOA,EACPzP,KAAMA,EACNwP,KAAM,MACNmT,YAAaA,EACbW,aAAc,kBAAMrB,EAAQxS,IAC5B8T,YAAa,kBAAMrB,EAAOliB,UAOpC,IAAMqjB,GAAe1e,IAAM8e,MACzB,YAAoE,IAAjEjU,EAAgE,EAAhEA,KAAMC,EAA0D,EAA1DA,MAAOzP,EAAmD,EAAnDA,KAAM2iB,EAA6C,EAA7CA,YAAaY,EAAgC,EAAhCA,YAAaD,EAAmB,EAAnBA,aACxCI,EAAUrc,mBAERoE,EAAWyQ,KAAXzQ,OAER5M,qBAAU,WAAO,IAAD,MAEd,UAAC6kB,EAAQpc,eAAT,aAAC,EAAiBqc,UAAUC,SAAS,YAArC,UACEF,EAAQpc,eADV,OACE,EAAiBqc,UAAU9gB,IAAI,UACjC,IAAM0C,EAAKlJ,YACT,0BACE,UAAAqnB,EAAQpc,eAAR,eAAiBqc,UAAUC,SAAS,YAApC,UACAF,EAAQpc,eADR,aACA,EAAiBqc,UAAUE,OAAO,YACpC,KAEF,OAAO,kBAAMliB,aAAa4D,MACzB,CAACkK,EAAOzP,IAEX,IAAI8jB,GACI,OAANrY,QAAM,IAANA,OAAA,EAAAA,EAAQoE,gBAAiBxS,MAAM2C,GAC3Bgd,OAAOhd,GAAM8P,QAAQ1S,EAAgBqO,EAAOoE,cAAgB,GAC5D7P,EAEF+jB,GACI,OAANtY,QAAM,IAANA,OAAA,EAAAA,EAAQuE,YAAa3S,MAAMoS,GACvBuN,OAAOvN,GAAOK,QAAQ1S,EAAgBqO,EAAOuE,UAAY,GACzDP,EAEN,OACE,kBAAC,KAAD,CAAKuU,IAAKN,EAAShnB,MAAO,CAAEunB,aAAc,GAAKC,QAASX,GACtD,kBAAC,KAAD,CAAKhR,KAAM,GAAI7V,MAAO,CAAE0mB,UAAW,SAChCU,GAEH,kBAAC,KAAD,CAAKvR,KAAM,GAAI7V,MAAO,CAAE0mB,UAAW,UACjC,kBAACvB,GAAD,CACEsC,aAAYxB,EAAc,IAC1ByB,eACW,QAAT5U,EACI,0BACA,4BAGR,kBAACuS,GAAD,CAAOmC,QAASZ,GAAeS,QAKvC,SAACM,EAAWC,GAAZ,OACElkB,EAAQikB,EAAWC,EAAW,CAAC,QAAS,OAAQ,mBAG9Cd,GAAqB7e,IAAM8e,MAC/B,YAAoB,IAAjBrH,EAAgB,EAAhBA,UACO3Q,EAAWyQ,KAAXzQ,OACF8Y,EC1MK,SAAqBznB,GAGlC,IAAMknB,EAAM3c,mBAQZ,OALAxI,qBAAU,WACRmlB,EAAI1c,QAAUxK,IACb,CAACA,IAGGknB,EAAI1c,QD+LiBkd,CAAYpI,GAElCqI,EACFrI,EAAYmI,EACR,UACAnI,EAAYmI,EACZ,UACA,QAEFG,EACFtI,IAAS,OACT3Q,QADS,IACTA,OADS,EACTA,EAAQuE,WACRoM,EAAUtM,QAAQ1S,EAAgBqO,EAAOuE,WAE3C,OACE,kBAAC4R,GAAD,CAAgB+C,QAAQ,UACtB,kBAAC,KAAD,CAAKjoB,MAAO,CAAE2L,MAAOoc,IAClBrI,EAAYmI,GACX,kBAACK,GAAA,EAAD,CAAiBloB,MAAO,CAAEmoB,YAAa,KAExCzI,EAAYmI,GACX,kBAACO,GAAA,EAAD,CAAmBpoB,MAAO,CAAEmoB,YAAa,KAE1CH,GAAsB,YAK/B,SAACL,EAAWC,GAAZ,OAA0BlkB,EAAQikB,EAAWC,EAAW,CAAC,iB,mBErO5C,SAASS,GAAT,GAOX,IANFC,EAMC,EANDA,WACAC,EAKC,EALDA,QAKC,IAJDC,kBAIC,MAJY,UAIZ,MAHDC,kBAGC,aAFDC,eAEC,aADDC,gBACC,MADU,GACV,EAcD,OACE,kBAAC,KAAD,CAAgBC,YAdW,kBAC3B,yBACE5oB,MAAO,CACL6oB,QAAS,OACTC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGbR,KAMD,kBAAC,KAAD,CACEF,WAAYA,EACZC,QAASA,EACTE,aAAYA,GAAa,CAAEA,YAAY,EAAME,YAC7CD,QAASA,KClBF,SAASO,GAAT,GAKX,IAJFC,EAIC,EAJDA,SACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,kBACAC,EACC,EADDA,gBACC,EACkB/M,KAAZ7K,EADN,oBAEK/I,EAAae,IACX6C,EAAWS,KAAXT,OAHP,4CAKD,WAA6ByC,EAAQC,GAArC,SAAAxP,EAAA,+EAEUsP,GAAY,CAChBC,SACAC,aACAtG,aACA4D,SACA2C,oBAAqB+C,GACnBP,EADiD,OAEjD1C,QAFiD,IAEjDA,OAFiD,EAEjDA,EAAQO,iBAEVJ,qBAAsB8C,GACpBP,EADkD,OAElD1C,QAFkD,IAElDA,OAFkD,EAElDA,EAAQW,oBAbhB,6DAiBIxN,GAAO,CACLoJ,QAAS,uBACTC,YAAa,KAAED,QACfG,KAAM,UApBZ,0BAwBE4d,GAAmBA,IAxBrB,0DALC,sBAgCD,IAAMd,EAAU,CACdY,EACI,CACEG,MAAO,SACPC,UAAW,aACXnqB,IAAK,cAEP,KACJ,CACEkqB,MAAO,OACPC,UAAW,OACXnqB,IAAK,QAEPgqB,EACI,KACA,CACEE,MAAO,iBACPC,UAAW,SACXnqB,IAAK,UAEX,CACEkqB,MAAO,SACPC,UAAW,SACXnqB,IAAK,UAEP,CACEkqB,MAAO,YACPC,UAAW,YACXnqB,IAAK,aAEP,CACEA,IAAK,SACLoqB,OAAQ,gBAAGza,EAAH,EAAGA,OAAQC,EAAX,EAAWA,WAAY4O,EAAvB,EAAuBA,WAAvB,OACN,yBAAK5d,MAAO,CAAE0mB,UAAW,UACvB,kBAAC,KAAD,CACE+C,OAAK,EACLzpB,MAAO,CAAEmoB,YAAa,IACtBX,QAAS,kBArElB,6CAqEwBkC,CAAc3a,EAAQC,KAHvC,UAKU4O,OAKhBvb,QAAO,SAACmE,GAAD,OAAOA,KAChB,OACE,kBAAC6hB,GAAD,CACEG,WAAW,cACXF,WAAYY,EACZX,QAASA,EACTE,YAAY,I,mJCvFlB,IAAMkB,GAAe/E,aAAOgF,KAAPhF,CAAH,MAKH,SAASiF,GAAT,GAYX,IAXF7a,EAWC,EAXDA,WACA8a,EAUC,EAVDA,gBACAnB,EASC,EATDA,SACAD,EAQC,EARDA,QACAqB,EAOC,EAPDA,aAQMzd,EAAWS,KAAXT,OACF5D,EAAae,IAFhB,EAI+BxH,mBAAS,MAJxC,mBAIM+nB,EAJN,KAIgBC,EAJhB,iDAMD,WAAsBvX,GAAtB,SAAAlT,EAAA,6DACEyqB,EAAW,OAACvX,QAAD,IAACA,OAAD,EAACA,EAAOwX,SADrB,kBAGU5X,GAAY,CAChBI,QACA3D,OAAQ2D,EAAM3D,OACdrG,aACA4D,WAPN,8DAUIpK,GAAO,CACLoJ,QAAS,yBACTC,YAAa,KAAED,QACfG,KAAM,UAbZ,4CAiBIwe,EAAY,MAjBhB,qBAmBEH,GAAmBA,IAnBrB,gEANC,sBA4BD,IAAMK,EAAgB,YACjB,IAAIlkB,KAAK+I,GAAc,IAAI1I,KAAI,SAAC8jB,GAAD,OAAgBA,EAAWxM,gBAC7DtX,KAAI,SAACsX,GACL,MAAO,CAAEyM,KAAMzM,EAAYxd,MAAOwd,MAG9B2K,EAAU,CACd,CACEe,MAAO,SACPC,UAAW,aACXnqB,IAAK,aACL6b,QAAS8O,EAAeI,OAAgBpqB,EACxCuqB,SAAU,SAAClqB,EAAOmqB,GAAR,OAAwD,IAArCA,EAAO3M,WAAW4M,QAAQpqB,KAEzD,CACEkpB,MAAO,OACPC,UAAW,OACXnqB,IAAK,OACLoqB,OAAQ,SAAC1W,GAAD,OACN,kBAAC,KAAD,CACEnH,MAAgB,QAATmH,EAAiB,UAAY,UACpC9S,MAAO,CAAEyqB,WAAY,MAEpB3X,EAAK4X,OAAO,GAAGC,cAAgB7X,EAAKrP,MAAM,KAG/CmnB,OAAQ,SAACprB,EAAGkhB,GACV,OAAIlhB,EAAEsT,OAAS4N,EAAE5N,KACR,EACa,QAAXtT,EAAEsT,KACJ,GAEC,GAGZ+X,mBAAmB,GAErB,CACEvB,MAAO,OACPC,UAAW,OACXnqB,IAAK,OACLwrB,OAAQ,SAACprB,EAAGkhB,GAAJ,OAAUA,EAAEpd,KAAO9D,EAAE8D,MAC7BunB,mBAAmB,GAErB,CACEvB,MAAO,QACPC,UAAW,QACXnqB,IAAK,QACLwrB,OAAQ,SAACprB,EAAGkhB,GAAJ,OAAUA,EAAE3N,MAAQvT,EAAEuT,OAC9B8X,mBAAmB,GAErB,CACEzrB,IAAK,UACLoqB,OAAQ,SAAC9W,GAAD,OACN,yBAAK1S,MAAO,CAAE0mB,UAAW,UACvB,kBAACiD,GAAD,CACEmB,KAAM,kBAACC,GAAA,EAAD,MACNvD,QAAS,kBArFlB,2CAqFwBwD,CAAOtY,IACtBgW,QAASsB,EAAW,MAAY,OAALtX,QAAK,IAALA,OAAA,EAAAA,EAAOwX,SAAU,IAH9C,cAWF5B,GAActZ,GAAc,IAAI1I,KAAI,SAACoM,GAAD,oBAAC,gBACtCA,GADqC,IAExCtT,IAAKsT,EAAMwX,aAGb,OACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAKrU,KAAM,IACT,kBAACwS,GAAD,CACEG,WAAW,iBACXF,WAAYA,EACZC,QAASA,EACTE,YAAY,EACZE,SAAUA,GAAsB,EAChCD,aAAqB3oB,IAAZ2oB,GAAyBA,M,cCpI7B,SAASuC,KACtB,IAAMC,ERomBD,WAAgC,IAAdnL,EAAa,uDAAL,IAAK,EACbP,KAAf5B,EAD4B,EAC5BA,WACFsN,EAAQlL,GAAqBD,GAFC,EAGPsB,KAHO,mBAG7BhQ,EAH6B,KAIpC,OAAKA,GAAoD,IAA9BA,EAAmBvQ,QAGzCoqB,EAGEA,EACJ7oB,QAAO,SAAC8oB,GAAD,OACN9Z,EAAmBiN,MAAK,SAAC5M,GAAD,OACtByZ,EAAKnc,WAAW3E,OAAOqH,EAAkB1I,iBAG5C1C,KAAI,SAAC6kB,GAAD,oBAAC,gBAAeA,GAAhB,IAAsBvN,kBAXpB,KQzmBKwN,GAENvM,EAAkBW,KAAlBX,cAEF0J,EAAU,CACd,CACEe,MAAO,SACPC,UAAW,aACXnqB,IAAK,cAEP,CACEkqB,MAAO,OACPC,UAAW,OACXnqB,IAAK,OACLoqB,OAAQ,SAAC1W,GAAD,OACN,kBAAC,KAAD,CACEnH,MAAgB,QAATmH,EAAiB,UAAY,UACpC9S,MAAO,CAAEyqB,WAAY,MAEpB3X,EAAK4X,OAAO,GAAGC,cAAgB7X,EAAKrP,MAAM,MAIjD,CACE6lB,MAAM,OACNC,UAAW,OACXnqB,IAAK,QAEP,CACEkqB,MAAM,QACNC,UAAW,QACXnqB,IAAK,SAEP,CACEkqB,MAAM,YACNC,UAAW,YACXnqB,IAAK,aAEP,CACEkqB,MAAOzK,EAAa,gBAAYA,EAAZ,KAA+B,OACnD0K,UAAW,UACXnqB,IAAK,YAIHkpB,GAAc4C,GAAS,IAAI5kB,KAAI,SAAC6kB,GAAD,oBAAC,gBACjCA,GADgC,IAEnC/rB,IAAI,GAAD,OAAK+rB,EAAKjB,SAAV,OAAoBiB,EAAKrY,MAC5BuY,UAAWF,EAAKlL,WAAWC,MAAQ,QAAU,aAG/C,OACE,oCACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAKrK,KAAM,IACT,kBAACwS,GAAD,CACEC,WAAYA,EACZC,QAASA,EACTE,YAAY,EACZE,SAAU,EACVH,WAAW,gBC3DR,SAAS8C,KAAa,IAAD,EACZhJ,KAEhBiG,EAAU,CACd,CACEe,MAAO,WACPC,UAAW,UACXnqB,IAAK,UACLoqB,OAAQ,SAAC+B,EAASC,GAAV,OACN,yBAAKxrB,MAAO,CAAE8oB,QAAS,SACrB,kBAAC,KAAD,KAAayC,GACE,IAAdC,EAAInF,MACH,yBAAKrmB,MAAO,CAAEyrB,WAAY,KACxB,kBAAC,KAAD,CAAK9f,MAAO,UAAW3L,MAAO,CAAEyqB,WAAY,MAA5C,aAIA,QAIV,CACEnB,MAAO,QACPC,UAAW,QACXnqB,IAAK,QACLoqB,OAAQ,SAAC+B,EAASC,GAAV,OACN5rB,EAAc8rB,OAAOC,uBAAYH,EAAID,SAASK,SAElD,CACEtC,MAAO,QACPC,UAAW,QACXnqB,IAAK,QACLoqB,OAAQ,SAAC+B,EAASC,GAAV,OACN5rB,EAAc8rB,OAAOC,uBAAYH,EAAID,SAASrL,SAElD,CACEoJ,MAAM,aACNC,UAAW,SACXnqB,IAAK,SACLoqB,OAAQ,SAACpa,GAAD,OAAYA,EAAO5L,aAE7B,CACE8lB,MAAM,UACNC,UAAW,UACXnqB,IAAK,WAEP,CACEkqB,MAAM,OACNC,UAAW,OACXnqB,IAAK,OACLoqB,OAAQ,SAACqC,EAAGL,GAAJ,OACNA,EAAI7c,KAAKtE,OAAO4D,qBAAkB6d,UAC9B,MACAN,EAAI7c,KAAKtE,OAAO4D,qBAAkB8d,WAClC,OACA,aAIJzD,GA3D4B,qBA2DC,IAAIhiB,KAAI,SAACoI,EAAS2X,GAAV,oBAAC,gBACvC3X,GADsC,IAEzC2X,QACAjnB,IAAKsP,EAAQU,OAAO5L,gBAGtB,OACE,oCACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAKqS,KAAM,IACT,kBAACwS,GAAD,CACEC,WAAYA,EACZC,QAASA,EACTE,YAAY,EACZE,SAAU,EACVH,WAAW,yBAIjB,kBAAC,KAAD,CAAKxoB,MAAO,CAAEgsB,UAAW,IACvB,kBAAC,KAAD,KACE,kBAAC,KAAD,kEAGA,kBAACC,GAAD,SAOV,SAASA,KAEP,IAqBM1D,EAAU,CACd,CACEe,MAAO,WACPC,UAAW,UACXnqB,IAAK,WAEP,CACEkqB,MAAO,QACPC,UAAW,QACXnqB,IAAK,QACLoqB,OAAQ,SAAC+B,EAASC,GAAV,OACN5rB,EAAc8rB,OAAOC,uBAAYH,EAAID,SAASK,SAElD,CACEtC,MAAO,QACPC,UAAW,QACXnqB,IAAK,QACLoqB,OAAQ,SAAC+B,EAASC,GAAV,OACN5rB,EAAc8rB,OAAOC,uBAAYH,EAAID,SAASrL,SAElD,CACEoJ,MAAO,eACPC,UAAW,eACXnqB,IAAK,eACLoqB,OAAQ,SAACqC,EAAGL,GAAJ,OACN,kBAAC,KAAD,KACIA,EAAIU,QAAL,iBAA6BV,EAAIU,QAAjC,YAA4CV,EAAI5M,OAAjC,WAKxB,OACE,kBAACyJ,GAAD,CACEC,WAtDe,CACjB,CAAEiD,QAAS,EAAGK,MAAO,MAAQ1L,OAAQ,KAAQtB,MAAO,GAAIsN,QAAS,IACjE,CAAEX,QAAS,EAAGK,MAAO,KAAO1L,OAAQ,KAAQtB,MAAO,MAAOsN,QAAS,KACnE,CAAEX,QAAS,EAAGK,MAAO,MAAQ1L,OAAQ,KAAQtB,MAAO,MAAOsN,QAAS,KACpE,CAAEX,QAAS,EAAGK,MAAO,MAAQ1L,OAAQ,KAAQtB,MAAO,MAAOsN,QAAS,KACpE,CACEX,QAAS,EACTK,MAAO,MACP1L,OAAQ,KACRtB,MAAO,MACPsN,QAAS,KAEX,CACEX,QAAS,EACTK,MAAO,MACP1L,OAAQ,KACRtB,MAAO,MACPsN,QAAS,KAEX,CAAEX,QAAS,EAAGK,MAAO,KAAO1L,OAAQ,KAAQtB,MAAO,OAAQsN,QAAS,IAmC3C5lB,KAAI,SAACuD,GAAD,oBAAC,gBAAeA,GAAhB,IAAsBzK,IAAKyK,EAAK0hB,aAC3DhD,QAASA,I,ICjJP4D,GAAc/e,KAAd+e,UACAC,GAAYC,KAAZD,QAEO,SAASE,KAAS,IACvBvd,EAAWyQ,KAAXzQ,OACR,OACE,kBAAC8V,GAAD,CAAiB7kB,MAAO,CAAEwmB,KAAM,EAAG+F,WAAY,KAC7C,kBAAC,KAAD,KACE,kBAACJ,GAAD,CAAWnsB,MAAO,CAAE2L,MAAO,0BAA3B,wEAGA,kBAACwgB,GAAD,CAAWnsB,MAAO,CAAE2L,MAAO,0BAA3B,wBACuB,uBAAGR,KAAK,yBAAR,aADvB,8FAGyB,MAG3B,kBAAC,KAAD,CAAMqhB,iBAAiB,UACrB,kBAACJ,GAAD,CAASK,IAAI,cAAcrtB,IAAI,UAC7B,kBAAC,GAAD,OAEF,kBAACgtB,GAAD,CAASK,IAAI,uBAAuBrtB,IAAI,SACtC,kBAAC6rB,GAAD,OAEF,kBAACmB,GAAD,CAASK,IAAI,WAAWrtB,IAAI,YAC1B,kBAAC,GAAD,OAED2P,GAAUA,EAAO2d,wBAChB,kBAACN,GAAD,CAASK,IAAI,gBAAgBrtB,IAAI,QAC/B,kBAACksB,GAAD,OAEA,OAMZ,IAAMqB,GAAgB,WACpB,IAAM3d,EVifD,WAA0B,IAAD,EACCwQ,KAAvBzQ,EADsB,EACtBA,OAAQ6O,EADc,EACdA,WACVlM,EAAoB+P,KAFI,EAGSZ,KAA/BG,EAHsB,EAGtBA,aAAcE,EAHQ,EAGRA,aACtB,OAAKnS,GAAW2C,GAAsBsP,GAAiBE,EAGhDnS,EACJ6d,oBAAoB5L,EAAcE,EAAc,CAACxP,IACjDpL,KAAI,SAACoM,GAAD,oBAAC,gBAAgBA,GAAjB,IAAwBkL,aAAY7O,cAJlC,KUtfU8d,GAEnB,OAAO,kBAAChD,GAAD,CAAgB7a,WAAYA,KAG/B8d,GAAc,WAClB,IAAM5D,EAAWrG,KAEjB,OAAO,kBAACoG,GAAD,CAAeC,SAAUA,K,oBC7CnB,SAAS6D,GAAT,GAAkD,IAM3DC,EACAte,EACAue,EARkCC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,YAAe,EACd3N,KAAxCzQ,EADsD,EACtDA,OAAQ4P,EAD8C,EAC9CA,aAAcE,EADgC,EAChCA,cADgC,EAGxB9R,KAA9BD,EAHsD,EAGtDA,aAAcX,EAHwC,EAGxCA,YAChB8C,EAAsB6S,KACtB5S,EAAuB0S,KAe7B,MAXoB,SAAhBuL,GACFH,EAAQ,OAAGje,QAAH,IAAGA,OAAH,EAAGA,EAAQO,gBACnBZ,EAAUO,EACVge,EAActO,GACW,UAAhBwO,GACTH,EAAQ,OAAGje,QAAH,IAAGA,OAAH,EAAGA,EAAQW,iBACnBhB,EAAUQ,EACV+d,EAAcpO,GAEdnQ,EAAU,KAEPse,EAIH,kBAAC,KAAD,CACE1D,MAAO2D,EACPG,UAAWJ,EACXK,KAAMH,EACNI,SAAUJ,GAEV,yBAAKltB,MAAO,CAAEusB,WAAY,SACxB,uBAAGvsB,MAAO,CAAE2L,MAAO,UAAnB,iBACA,uBAAG3L,MAAO,CAAE2L,MAAO,0BAA4BqhB,EAASxpB,YACxD,6BACE,uBAAGxD,MAAO,CAAE2L,MAAO,UAAnB,wBACA,uBAAG3L,MAAO,CAAE2L,MAAO,0BAChB+C,EACCA,EAAQU,OAAO5L,WAEf,4CACQ,IACN,kBAACsH,GAAD,CAAMC,UAAQ,EAACE,GAAIkB,GAChBW,GACK,IAJV,0CAlBH,K,cCvBI,SAASygB,GAAT,GAQX,IAMEC,EAbJ/b,EAOC,EAPDA,SACA9C,EAMC,EANDA,KACA8e,EAKC,EALDA,MAKC,EAIGlO,KAJH,mBAEC5O,EAFD,KAGC+c,EAHD,KAQCF,EADE7e,GAAQA,KAAQgC,EACFA,EAAsBhC,GAC7B8C,IAAoB,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAU3Q,QAAS,EACxB2Q,EAAS,GAAGrC,OAAO5L,gBAEnBzD,EAiBlB,OACE,kBAAC,IAAM4tB,SAAP,KACGF,GAAS,kBAAC,KAAD,CAAK5X,KAAM,GAAX,kBACV,kBAAC,KAAD,CAAKA,KAAM4X,EAAQ,GAAK,IACtB,kBAAC,KAAD,CACEztB,MAAO,CAAE4tB,MAAO,QAChBxtB,MAAOotB,EACPK,SArBuB,SAACztB,GAC9B,GAAKuO,EAAL,CAQA,IAAMmf,EAAwB,gBAAQnd,GACtCmd,EAAyBnf,GAAQvO,EACjCstB,EAAyBI,QATvB5rB,GAAO,CACLoJ,QAAS,gCACTC,YAAa,oBACbE,KAAM,YAaN,OAKGgG,QALH,IAKGA,OALH,EAKGA,EAAUnL,KAAI,SAACoI,GAAD,OACb,kBAAC,KAAOqf,OAAR,CACE3uB,IAAKsP,EAAQU,OAAO5L,WACpBpD,MAAOsO,EAAQU,OAAO5L,YAEtB,kBAAC,KAAWwqB,KAAZ,CAAiBC,MAAI,GAClBR,EACGrqB,EAAkBsL,EAAQU,OAAQ,GAClCV,EAAQU,OAAO5L,kBAM7B,kBAAC,KAAD,CAAKqS,KAAM,EAAG+E,OAAQ,GACpB,kBAAC,KAAD,CACEsT,MAAM,QACNpD,KAAM,kBAACqD,GAAA,EAAD,MACN7qB,KAAM,QACNkkB,QAAS,kBACPgG,GAAiBY,UAAUC,UAAUC,UAAUd,Q,cCtE5C,SAASe,GAAT,GAMX,IALFjF,EAKC,EALDA,MACAjmB,EAIC,EAJDA,QAKA,OACE,6BACGimB,GAAS,uBAAGtpB,MAAO,CAAE2L,MAAO,UAAY2d,GACzC,kBAAC,KAAD,CACE7d,KAAK,OACLqf,KAAM,kBAAC0D,GAAA,EAAD,MACNrjB,KAAM,uCAAyC9H,EAC/C+H,OAAO,SACPC,IAAI,uBAEHhI,I,qXCET,IAAMorB,GAAS7J,aAAOK,KAAPL,CAAH,MAIN8J,GAAM9J,KAAO3T,EAAV,MAKH0d,GAAe/J,aAAOgF,KAAPhF,CAAH,MAMH,SAASgK,KAA6B,IAAD,EACFpP,KAAxCb,EAD0C,EAC1CA,aAAcE,EAD4B,EAC5BA,cAAe9P,EADa,EACbA,OAC/Bma,EAAWrG,KACXnR,EAAoB+P,IAA6B,GACjD/Y,EAAae,IAJ+B,EAKOsD,KAAjDZ,EAL0C,EAK1CA,YAAaW,EAL6B,EAK7BA,aAAcR,EALe,EAKfA,OAAQE,EALO,EAKPA,UALO,EAMZvK,mBAAS,IANG,mBAM3CkrB,EAN2C,KAM9B0B,EAN8B,KAO5C5f,EAAsB6S,KACtB5S,EAAuB0S,KARqB,EAS1BtF,KAAjB7L,EAT2C,oBAU5CqS,EACJoG,GAAYA,EAAStf,MAAK,SAAC8W,GAAD,OAAOA,EAAEwC,OAASvE,KACxCoE,EACJmG,GAAYA,EAAStf,MAAK,SAAC8W,GAAD,OAAOA,EAAEwC,OAASrE,KAbI,SAenC6K,IAfmC,2EAelD,sBAAAlqB,EAAA,yDACOuP,EADP,uBAEI7M,GAAO,CACLoJ,QAAS,uBACTC,YAAa,sBACbE,KAAM,UALZ,6BASOiG,EATP,uBAUIxP,GAAO,CACLoJ,QAAS,uBACTC,YAAa,mCACbE,KAAM,UAbZ,6BAiBOwD,EAjBP,uBAkBI/M,GAAO,CACLoJ,QAAS,uBACTC,YAAa,mCACbE,KAAM,UArBZ,6BAyBOyD,EAzBP,wBA0BIhN,GAAO,CACLoJ,QAAS,uBACTC,YAAa,mCACbE,KAAM,UA7BZ,sDAmCUqD,GAAY,CAChBC,SACAC,WAAY0C,EACZhJ,aACA4D,SACA2C,sBACAC,yBAzCN,2DA4CIhN,GAAO,CACLoJ,QAAS,uBACTC,YAAa,KAAED,QACfG,KAAM,UA/CZ,4DAfkD,sBAmElD,IAAMqjB,EAKA,CACJ,CACEnQ,EACAmE,EACA,OAHF,OAIE/T,QAJF,IAIEA,OAJF,EAIEA,EAAQO,gBAAgB9L,YAE1B,CACEqb,EACAkE,EACA,QAHF,OAIEhU,QAJF,IAIEA,OAJF,EAIEA,EAAQW,iBAAiBlM,aAI7B,OACE,kBAACqhB,GAAD,CAAiB7kB,MAAO,CAAEwmB,KAAM,EAAG+F,WAAY,KAC5CuC,EAAkBxoB,KACjB,WAA0C+f,GAA1C,uBAAE0I,EAAF,KAAY7F,EAAZ,KAAsBiE,EAAtB,KAAmCxe,EAAnC,YACE,kBAAC,IAAMgf,SAAP,CAAgBvuB,IAAKinB,GACnB,kBAAC,KAAD,CAASrmB,MAAO,CAAEgvB,YAAa,UAC5BD,EAAU,IACVpgB,GACC,kBAAC,KAAD,CACEsgB,QAAS,kBAACV,GAAD,CAAalrB,QAASsL,IAC/BjD,UAAU,cACV4d,MAAM,aACN4F,QAAQ,SAER,kBAACC,GAAA,EAAD,CAAoBnvB,MAAO,CAAE2L,MAAO,eAIzCa,GACC,kBAACiiB,GAAD,CAAQW,MAAM,SAASpvB,MAAO,CAAEqvB,cAAe,KAC7C,kBAAC9B,GAAD,CACE9b,SAAQ,OAAEhB,QAAF,IAAEA,OAAF,EAAEA,EAAepO,QACvB,SAACqM,GAAD,OAAaA,EAAQgN,cAAclY,aAAemL,KAEpDA,KAAMA,EACN8e,OAAK,KAIX,kBAACgB,GAAD,CACEW,MAAM,SACNnH,QAAQ,gBACRjoB,MAAO,CAAEqvB,cAAe,KAExB,kBAAC,KAAD,wBACA,kBAAC,KAAD,KAAMnG,GAAYA,EAAS5c,SAE7B,kBAACmiB,GAAD,CACEW,MAAM,SACNnH,QAAQ,gBACRjoB,MAAO,CAAEqvB,cAAe,KAExB,kBAAC,KAAD,2BACA,kBAAC,KAAD,KAAMnG,GAAYA,EAAS9F,YAE7B,kBAACqL,GAAD,CAAQW,MAAM,SAASnH,QAAQ,gBAC7B,kBAAC,KAAD,CAAKjoB,MAAO,CAAE4tB,MAAO,MACnB,kBAACe,GAAD,CACEW,OAAK,EACLhsB,KAAK,QACLkkB,QAAS,kBAAMqH,EAAe1B,KAHhC,YAQF,kBAAC,KAAD,CAAKntB,MAAO,CAAE4tB,MAAO,MACnB,kBAACe,GAAD,CAAcW,OAAK,EAAChsB,KAAK,QAAQkkB,QAASkC,GAA1C,YAKJ,kBAACgF,GAAD,+BAC0B,IACxB,kBAAC5jB,GAAD,CAAMC,UAAQ,EAACE,GAAIkB,GAChBW,GACK,IAJV,cAUN,kBAACigB,GAAD,CACEI,YAAaA,EACbD,QAAS,kBAAM2B,EAAe,Q,8VC5KtC,IAAMU,GAAa3K,aAAOgF,KAAPhF,CAAH,MAMV4K,GAAY5K,aAAOgF,KAAPhF,CAAH,MAMT6K,GAAc,CAClBC,EAAG,KACHC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,IAAK,QAGQ,SAASC,GAAT,GAQX,IAPF/vB,EAOC,EAPDA,MACAgwB,EAMC,EANDA,kBAMC,EACuB/tB,mBAAyB,OADhD,mBACM6Q,EADN,KACYmd,EADZ,OAE+CzQ,KAAxCb,EAFP,EAEOA,aAAcE,EAFrB,EAEqBA,cAAe9P,EAFpC,EAEoCA,OAC/B+T,EAAuBb,KACvBc,EAAwBhB,KACxB9S,EAAsB6S,KACtB5S,EAAuB0S,KACvBlQ,EAAoB+P,IAA6B,GAPtD,EAQ6B1U,KAAtBT,EARP,EAQOA,OAAQE,EARf,EAQeA,UACV5D,EAAiBa,IACjBiW,EAAYD,KAClB6C,KAXC,IAY6BE,EAAmBL,KAAzCC,qBAZP,EAc+BngB,oBAAS,GAdxC,mBAcMiuB,EAdN,KAcgBC,EAdhB,OAeqBluB,oBAAS,GAf9B,mBAeMmuB,EAfN,KAeWC,EAfX,OAgB+BpuB,wBAA6BlC,GAhB5D,mBAgBMuwB,EAhBN,KAgBgBC,EAhBhB,OAiBiCtuB,wBAA6BlC,GAjB9D,mBAiBMywB,EAjBN,KAiBiBC,EAjBjB,OAkByBxuB,wBAA6BlC,GAlBtD,mBAkBMgT,EAlBN,KAkBa2d,EAlBb,OAmBmCzuB,oBAAS,GAnB5C,oBAmBM0uB,GAnBN,MAmBkBC,GAnBlB,SAoBuC3uB,mBAAS,GApBhD,qBAoBM4uB,GApBN,MAoBoBC,GApBpB,MA2BGC,IAAgBhO,GAAyB,KAJ3CrR,GAAqB3C,EACjBA,EAAOiT,qBAAqBtQ,EAAkBH,gBAC9C,IAE+D,GACjEyf,GAAclO,GAAwB,EACtCmO,IACI,OAANliB,QAAM,IAANA,OAAA,EAAAA,EAAQoE,eAAgBzS,EAAgBqO,EAAOoE,cAC7C+d,IAA0B,OAANniB,QAAM,IAANA,OAAA,EAAAA,EAAQuE,WAAY5S,EAAgBqO,EAAOuE,UAEnEnR,qBAAU,WACR6tB,GAAqBA,EAAkBmB,MAEtC,CAACnB,IAEJ7tB,qBAAU,WACRmuB,GAAYvd,GAASqe,GAAeP,MAEnC,CAAC/d,IAEJ3Q,qBAAU,WACRkvB,OAEC,CAACte,EAAOud,IAEXnuB,qBAAU,WACR,IAAMmvB,EAAW,uCAAG,8BAAA9xB,EAAA,kEAEX8M,GAAWA,EAAOtD,WAAc+F,EAFrB,uBAGd1J,QAAQC,IAAR,gCAHc,iCAMVwO,EAAYC,KAClB1O,QAAQC,IAAR,kCAAuCyJ,EAAO1L,UAP9B,gBAQV0L,QARU,IAQVA,OARU,EAQVA,EAAQyS,+BACZ5Y,EACA0D,EAAOtD,WAVO,+BAYV+F,QAZU,IAYVA,OAZU,EAYVA,EAAQwiB,uBAAuB3oB,EAAgB0D,EAAOtD,WAZ5C,QAaVmL,EAAUJ,KAChB1O,QAAQC,IAAR,2CACsCyJ,EAAO1L,QAD7C,kBAEI8Q,EAAUL,IAhBE,kDAoBhBzO,QAAQC,IAAR,qEApBgB,0DAAH,qDAuBjBgsB,IACA,IAAMzoB,EAAK4b,YAAY6M,EAAa,KACpC,OAAO,kBAAM5M,cAAc7b,MAC1B,CAACkG,EAAQnG,EAAgB0D,EAAQA,EAAOtD,YAE3C,IAAMwoB,GAAgB,SAAClB,GAErB,GADAC,EAAYD,GACPA,EAAL,CAIA,IAAImB,EAAW1e,GAAS2M,EACxB,GAAK+R,EAAL,CAIA,IACMjB,EACJF,GAAY9vB,EAFO8vB,EAAWmB,EAEWR,IAC3CR,EAAaD,QANXC,OAAa1wB,QALb0wB,OAAa1wB,IA8BXoxB,GAAgB,SAAC,GAMhB,IALL7tB,EAKI,EALJA,KACAyP,EAII,EAJJA,MAKMqU,EAAgB9jB,GAAQ9C,EAAe8C,EAAM2tB,IAC7C5J,EAAiBtU,GAASvS,EAAeuS,EAAOme,IACtD9J,GAAiBoK,GAAcpK,GAC/BC,GAAkBqJ,EAASrJ,IAGvBgK,GAAqB,WACzB,IAEMK,EAAUvxB,EADL,QAAT2S,EAAiBie,IAAgBhe,GAAS2M,GAAa,GAAKsR,GACnBC,IACrCJ,EAAevwB,KAAKqF,KAAM2qB,GAAY,GAAKoB,EAAW,IAAK,KACjEZ,GAAgBD,IAGZO,GAAiB,SAAChxB,GACtB,IAAK2S,GAAS2M,EAAW,CACvB,IAAIsI,EAAsCkJ,GACtCxR,EAAUtM,QAAQ8d,IAClBxR,EACJgR,EACgC,kBAAvB1I,EACHA,EACA2J,WAAW3J,IAInB,IAAI4J,EACS,QAAT9e,GACEC,GAAS2M,KACXkS,EAAYb,IAAgBhe,GAAS2M,GAAa,GAAMtf,EAAS,KAGnEwxB,EAAWZ,GAAc5wB,EAAS,IAIpC,IAAIyxB,EAAY1xB,EAAeyxB,EAASX,IAExCO,GAAcK,IA3Jf,SA2KcC,KA3Kd,8EA2KD,sBAAAtyB,EAAA,yDACOuT,EADP,uBAEI1N,QAAQI,KAAK,iBACbvD,GAAO,CACLoJ,QAAS,gBACTG,KAAM,UALZ,6BAQc6kB,EARd,wBASIjrB,QAAQI,KAAK,gBACbvD,GAAO,CACLoJ,QAAS,eACTG,KAAM,UAZZ,kCAiBEmlB,IAAc,GAjBhB,oBAmBU/d,GAAW,CACfC,OACAC,QACAzP,KAAMgtB,EACNtd,UAAWod,EAAM,MAAQF,EAAW,WAAa,QACjDnhB,SACArG,WAAYE,EACZ0D,SACA2C,oBAAmB,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAqBG,OAC1CF,qBAAoB,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAsBE,OAC5C6D,kBAAmBuP,IA7BzB,QA+BIhb,EAAauC,YAAM,mBAAoBuC,EAAQE,IAC/CkkB,OAAS3wB,GACTyxB,QAAczxB,GAjClB,mDAmCIsF,QAAQI,KAAR,MACAvD,GAAO,CACLoJ,QAAS,sBACTC,YAAa,KAAED,QACfG,KAAM,UAvCZ,yBA0CImlB,IAAc,GA1ClB,+EA3KC,sBAyND,OACE,kBAAC/L,GAAD,CACE7kB,MAAK,cAAI8oB,QAAS,OAAQiJ,cAAe,UAAa/xB,IAEtD,yBAAKA,MAAO,CAAEwmB,KAAM,IAClB,kBAAC,KAAMwL,MAAP,CACEC,SAAU,SAACna,GAAD,OAAOmY,EAAQnY,EAAE1M,OAAOhL,QAClCA,MAAO0S,EACPof,YAAY,QACZlyB,MAAO,CACLunB,aAAc,EACdqG,MAAO,SAGT,kBAAC,KAAMhE,OAAP,CACExpB,MAAM,MACNJ,MAAO,CACL4tB,MAAO,MACPlH,UAAW,SACXyL,WAAqB,QAATrf,EAAiB,UAAY,GACzCkc,YAAsB,QAATlc,EAAiB,UAAY,KAN9C,OAWA,kBAAC,KAAM8W,OAAP,CACExpB,MAAM,OACNJ,MAAO,CACL4tB,MAAO,MACPlH,UAAW,SACXyL,WAAqB,SAATrf,EAAkB,UAAY,GAC1Ckc,YAAsB,SAATlc,EAAkB,UAAY,KAN/C,SAYF,kBAAC,KAAD,CACE9S,MAAO,CAAE0mB,UAAW,QAAS2I,cAAe,GAC5C+C,YAAa,yBAAKpyB,MAAO,CAAE4tB,MAAO,SAArB,SACbyE,OACE,0BAAMryB,MAAO,CAAEsyB,SAAU,GAAIzmB,QAAS,KAAQgT,GAEhDze,MAAO2S,EACPtH,KAAK,SACLgI,MAAY,OAAN1E,QAAM,IAANA,OAAA,EAAAA,EAAQuE,WAAY,EAC1B2e,SAAU,SAACna,GAAD,OAAO4Y,EAASiB,WAAW7Z,EAAE1M,OAAOhL,WAEhD,kBAAC,KAAM4xB,MAAP,CAAaO,SAAO,EAACvyB,MAAO,CAAEqvB,cAAe,IAC3C,kBAAC,KAAD,CACErvB,MAAO,CAAE4tB,MAAO,mBAAoBlH,UAAW,SAC/C0L,YAAa,yBAAKpyB,MAAO,CAAE4tB,MAAO,SAArB,QACbyE,OACE,0BAAMryB,MAAO,CAAEsyB,SAAU,GAAIzmB,QAAS,KAAQ8S,GAEhDve,MAAOkwB,EACP7kB,KAAK,SACLgI,MAAY,OAAN1E,QAAM,IAANA,OAAA,EAAAA,EAAQoE,eAAgB,EAC9B8e,SAAU,SAACna,GAAD,OAAO0Z,GAAcG,WAAW7Z,EAAE1M,OAAOhL,WAErD,kBAAC,KAAD,CACEJ,MAAO,CAAE4tB,MAAO,mBAAoBlH,UAAW,SAC/C2L,OACE,0BAAMryB,MAAO,CAAEsyB,SAAU,GAAIzmB,QAAS,KACnCgT,GAGLze,MAAOowB,EACP/kB,KAAK,SACLgI,MAAY,OAAN1E,QAAM,IAANA,OAAA,EAAAA,EAAQoE,eAAgB,EAC9B8e,SAAU,SAACna,GAAD,OAjMG,SAAC0Y,GAEtB,GADAC,EAAaD,GACRA,EAAL,CAIA,IAAIiB,EAAW1e,GAAS2M,EACxB,GAAK+R,EAAL,CAIA,IACMnB,EAAWE,GAAahwB,EADVgwB,EAAYiB,EAC0BR,IAC1DV,EAAYD,QALVC,OAAYxwB,QALZwwB,OAAYxwB,GA8LWyyB,CAAeb,WAAW7Z,EAAE1M,OAAOhL,YAGxD,kBAAC,KAAD,CACEA,MAAOywB,GACP4B,aAAc,SAACryB,GAAD,gBAAcA,EAAd,MACdsyB,MAAOjD,GACPwC,SAAUb,KAEZ,yBAAKpxB,MAAO,CAAEusB,WAAY,KACvB,QACD,kBAAC,KAAD,CACEoG,QAASzC,EACT+B,SA9IqC,SAACU,GAC1CA,GACFtC,GAAO,GAETF,EAAYwC,IA2IJ3yB,MAAO,CAAEmoB,YAAa,MAEvB,OACD,kBAAC,KAAD,CAAQwK,QAASvC,EAAK6B,SA5IgB,SAACU,GACzCA,GACFxC,GAAY,GAEdE,EAAOsC,QA2IK,QAAT7f,EACC,kBAAC0c,GAAD,CACEoD,UAAW7f,IAAUud,EACrB9I,QAASsK,GACTxC,OAAK,EACL7jB,KAAK,UACLnI,KAAK,QACLolB,QAASiI,IANX,OAQOhS,GAGP,kBAAC4Q,GAAD,CACEqD,UAAW7f,IAAUud,EACrB9I,QAASsK,GACTxC,OAAK,EACL7jB,KAAK,UACLnI,KAAK,QACLolB,QAASiI,IANX,QAQQhS,I,kOCrXhB,IAAMxR,GAAQyX,KAAOzjB,IAAV,MAGL6jB,GAAYJ,aAAOK,KAAPL,CAAH,MAKA,SAASiO,GAAT,GAAwC,IAAhBvN,EAAe,EAAfA,YAAe,EACJ9F,KAAxCb,EAD4C,EAC5CA,aAAcE,EAD8B,EAC9BA,cAAe9P,EADe,EACfA,OADe,EhBkW/C,WAA6B,IAC1BA,EAAWyQ,KAAXzQ,OACFwO,EAAa,OAAGxO,QAAH,IAAGA,OAAH,EAAGA,EAAQ1L,QAAQG,WAFL,4CAIjC,sBAAAhE,EAAA,yDACO+d,EADP,yCAEW,MAFX,uBAIeT,GAAWgW,gBAAgBvV,GAJ1C,oFAJiC,sBAWjC,OAAOrW,GAX0B,4CAa/B6C,YAAM,mBAAoBwT,GAC1B,CAAEhZ,gBAnNyB,MAoN3B,GgB/WuBwuB,GAF2B,mBAE7CjT,EAF6C,KAErCvY,EAFqC,KAIpD,OACE,kBAACsd,GAAD,CACE7kB,MACEslB,EACI,CAAEkB,KAAM,GACR,CACEwF,UAAW,OACXgH,UAAW,QACXC,UAAW,wBAInB,kBAAC,GAAD,6BACA,kBAAC,GAAD,KACE,kBAAC,KAAD,CAAKpd,KAAM,GAAX,UAAsBgJ,EAAtB,MACA,kBAAC,KAAD,CAAKhJ,KAAM,EAAG7V,MAAO,CAAE0mB,UAAW,UAAlC,SACS/H,EADT,KAGA,kBAAC,KAAD,CAAK9I,KAAM,EAAG7V,MAAO,CAAE0mB,UAAW,UAAlC,WAIC5G,GAAUvY,GACX,yBACEvH,MAAO,CACLmoB,YAAa,QACb+K,aAAc,MACdC,UAAW,SACXF,UAAW3N,EACP,oBACA,wBAGLxF,EAAOxZ,KAAI,SAAC6Z,EAAqB9Y,GAAtB,OACV,kBAAC,KAAD,CAAKjI,IAAKiI,EAAGrH,MAAO,CAAEunB,aAAc,IAClC,kBAAC,KAAD,CACE1R,KAAM,EACN7V,MAAO,CACL2L,MAAsB,QAAfwU,EAAMrN,KAAiB,UAAY,aAGrC,OAAN/D,QAAM,IAANA,OAAA,EAAAA,EAAQuE,YAAa3S,MAAMwf,EAAMpN,OAC9BuN,OAAOH,EAAMpN,OAAOK,QAClB1S,EAAgBqO,EAAOuE,WAEzB6M,EAAMpN,OAEZ,kBAAC,KAAD,CAAK8C,KAAM,EAAG7V,MAAO,CAAE0mB,UAAW,WACzB,OAAN3X,QAAM,IAANA,OAAA,EAAAA,EAAQoE,gBAAiBxS,MAAMwf,EAAM7c,MAClCgd,OAAOH,EAAM7c,MAAM8P,QACjB1S,EAAgBqO,EAAOoE,eAEzBgN,EAAM7c,MAEZ,kBAAC,KAAD,CAAKuS,KAAM,EAAG7V,MAAO,CAAE0mB,UAAW,QAAS/a,MAAO,YAC/CwU,EAAMiT,MAAQ,IAAInvB,KAAKkc,EAAMiT,MAAMC,4B,8CC7D5ClmB,GAAUC,KAAVD,MAEO,SAASmmB,GAAT,GAAiE,IAAxBC,EAAuB,EAAvBA,oBAChDrK,EjB+iCD,WACL,IAAMxY,EAAU2S,KADgC,EAExBxgB,EACtB,gBACA,IAFKgZ,EAFyC,oBAMhD,IAAKnL,EACH,OAAO,KAGT,IAAM8iB,EAA2D,GAiDjE,OAhDA9iB,EAAQ9N,SAAQ,YAAiC,IAA9BmM,EAA6B,EAA7BA,OAAQ0U,EAAqB,EAArBA,eAAqB,EACMhF,GAClD1P,EACA8M,GAFM8C,EADsC,EACtCA,aAAcE,EADwB,EACxBA,cAAejB,EADS,EACTA,WAIhCe,GAAiBE,GAAkB9P,IAGvC0U,GAAkB,IAAI7gB,SAAQ,SAACoM,GAC9B,IAAMykB,GACM,OAAVzkB,QAAU,IAAVA,OAAA,EAAAA,EAAYoP,kBAAZ,OACApP,QADA,IACAA,OADA,EACAA,EAAYsC,gBACZvC,EAAOmT,oBACLlT,EAAWoP,eAAe+E,IAAInU,EAAWsC,gBAEvCoiB,GACM,OAAV1kB,QAAU,IAAVA,OAAA,EAAAA,EAAYqP,mBAAZ,OACArP,QADA,IACAA,OADA,EACAA,EAAYuC,iBACZxC,EAAOmT,oBACLlT,EAAWqP,gBAAgB8E,IAAInU,EAAWuC,iBAExCoiB,GACM,OAAV3kB,QAAU,IAAVA,OAAA,EAAAA,EAAYsC,gBACZvC,EAAOmT,oBAAoBlT,EAAWsC,eAClCsiB,GACM,OAAV5kB,QAAU,IAAVA,OAAA,EAAAA,EAAYuC,iBACZxC,EAAOmT,oBAAoBlT,EAAWuC,gBAExCiiB,EAAyBpxB,KAAK,CAC5Bwb,aACA7O,SACAmU,KAAMvE,EACNvf,IAAI,GAAD,OAAKwe,GAAL,OAAkBe,GACrBlM,OAAQghB,EACRrQ,UAAWuQ,EACX3kB,eAEFwkB,EAAyBpxB,KAAK,CAC5Bwb,aACA7O,SACAmU,KAAMrE,EACNzf,IAAI,GAAD,OAAKwe,GAAL,OAAkBiB,GACrBpM,OAAQihB,EACRtQ,UAAWwQ,EACX5kB,qBAICwkB,EiB1mCUK,GAD4D,EjBq+BxE,WAIJ,IAAD,EAC8B9mB,KAAtBP,EADR,EACQA,UAAWF,EADnB,EACmBA,OACXuP,EAAkBC,KAAlBD,cACFnT,EAAaW,IACbyqB,EAAmBzQ,KACnBC,EACJwQ,GAAoBA,EAAiBxtB,KAAI,qBAAGyI,UAGxCwU,EACJD,GACAA,EACGjhB,QAAO,SAAC0M,GAAD,QAAgCA,KACvCzI,KAAI,SAACyI,GAAD,OAAYA,EAAO1L,QAAQG,cAbpC,4CAeA,4BAAAhE,EAAA,yDACOgN,EADP,yCAEW,MAFX,UAIO8W,EAJP,yCAKW,MALX,cAOEje,QAAQC,IAAI,gDACNyuB,EARR,+BAAAv0B,EAAA,MAQoB,WAAOuP,GAAP,iBAAAvP,EAAA,yDACXuP,EADW,yCAEP,MAFO,gBAIO0P,GAAiB1P,EAAQ8M,GAAxC+B,EAJQ,EAIRA,WAJQ,SAMdvY,QAAQC,IAAI,2BAA4BsY,GAN1B,SASN7O,EAAOilB,mBAAmBtrB,EAAY4D,EAAOtD,WATvC,uCAUZ1C,KAAI,SAACoM,GAAD,qBAAckL,aAAY7O,UAAW2D,OAV7B,yCAYdrN,QAAQC,IAAI,6BAA8ByJ,EAAO1L,QAAQG,WAAzD,MACAtB,GAAO,CACLoJ,QAAQ,4CAAD,OAA8CsS,GACrDrS,YAAa,KAAED,QACfG,KAAM,UAhBM,kBAkBP,MAlBO,0DARpB,+DA6BgBhM,QAAQuH,IAAIsc,EAAYhd,IAAIytB,IA7B5C,uCA8BK1xB,QAAO,SAACmE,GAAD,QAA8CA,KACrDoc,QA/BL,4CAfA,sBAiDA,IAAMve,EAAW0F,YACf,oCACAyC,EACA9D,EACA4D,EACAiX,GAAQA,EAAK3iB,YAtDf,EAwD6BsG,GAxD7B,4CA0DE7C,EACA,CACEE,gBAAiBsZ,KA5DrB,mBAwDO7O,EAxDP,KAwDmBzH,EAxDnB,KAgEA,OADAlC,QAAQC,IAAI,aAAc0J,GACnB,CACLA,aACAzH,SACA0sB,kBAAmB,kBAAMzsB,EAAanD,KiBtiCpC6vB,GAHFllB,EAH2E,EAG3EA,WACAzH,EAJ2E,EAI3EA,OACA0sB,EAL2E,EAK3EA,kBAGMjvB,EAAY8Y,KAAZ9Y,QACFmvB,GAAsBnlB,GAAcA,EAAWlO,OAAS,EACxDszB,EACJlL,GACAA,EAAS7mB,QAAO,gBAAGoQ,EAAH,EAAGA,OAAQ2Q,EAAX,EAAWA,UAAX,OAA2B3Q,EAAS,GAAK2Q,EAAY,KACjEiR,EAAoBD,GAAoBA,EAAiBtzB,OAAS,EACxE,OACE,kBAAC+jB,GAAD,KACE,kBAAC,GAAD,CAAOtX,MAAO,EAAGvN,MAAO,CAAE2L,MAAO,2BAAjC,+BAGA,kBAAC,KAAD,KACE,kBAACb,GAAD,CACEC,UAAQ,EACRE,GACE,oFAHJ,eAOQ,IARV,6BAS6B,IAC3B,kBAACH,GAAD,CACEC,UAAQ,EACRE,GACE,+HAHJ,yBAOQ,IAjBV,yBAoBA,6BACA,kBAAC,KAAD,gDAC2C,IACzC,kBAACH,GAAD,CACEC,UAAQ,EACRE,GACE,oFAHJ,gBAFF,qFAWc,IACZ,kBAACH,GAAD,CAAMC,UAAQ,EAACE,GAAI,qBAAnB,aAZF,gEAegE,IAC9D,kBAACH,GAAD,CAAMC,UAAQ,EAACE,GAAI,mBAAnB,OAhBF,KAqBA,6BACA,kBAAC,KAAD,6KAKA,yBAAKjL,MAAO,CAAEgsB,UAAW,GAAIlD,QAAS,OAAQC,eAAgB,WAC5D,kBAAC,KAAD,CAAQvB,QAAS,kBAAMxiB,GAAQ,KAC7B,kBAAC,KAAD,MADF,kBAIAkkB,EAGA,oCACE,kBAAC,KAAD,MACIiL,GAAsB,kBAAC,KAAD,MAD1B,uBAGCA,EACC5sB,EACE,kBAACsiB,GAAD,CACE7a,WAAYA,EACZ8a,gBAAiB,WACfnqB,YAAW,WACTqF,IACAivB,MACC,QAIP,kBAAC,KAAD,CAAM3wB,KAAK,UAEX,KACJ,kBAAC,KAAD,MACI+wB,GAAqB,kBAAC,KAAD,MADzB,sBAGCA,GACC,kBAACpL,GAAD,CACEC,SAAUkL,EACVhL,mBAAiB,EACjBD,YAAU,EACVE,gBAAiB,WACf1pB,WAAWqF,EAAS,QAI1B,kBAAC,KAAD,mCACA,yBAAKhF,MAAO,CAAE8oB,QAAS,OAAQC,eAAgB,WAC7C,kBAAC,KAAD,CACEvB,QAAS+L,EACTX,SAAUyB,GAAqBF,GAFjC,2BApCJ,kBAAC,KAAD,CAAM7wB,KAAK,W,wBChFX0qB,GAAS5gB,KAAT4gB,KAEO,SAASsG,GAAT,GAIX,IAAD,IAHDlH,EAGC,EAHDA,QACAmH,EAEC,EAFDA,kBACArH,EACC,EADDA,QAEMxkB,EAAaW,IADlB,EAG+BpH,mBAAS,IAHxC,mBAGMuyB,EAHN,KAGgBC,EAHhB,OAKqCxyB,mBAAS,IAL9C,mBAKMyyB,EALN,KAKmBC,EALnB,OAMiC1yB,mBAAS,IAN1C,mBAMMka,EANN,KAMiByY,EANjB,OAOmC3yB,mBAAS,IAP5C,mBAOMma,EAPN,KAOkByY,EAPlB,OAS2B5yB,mBAAS,MATpC,mBASM8M,EATN,KAScmQ,EATd,OAUyCjd,oBAAS,GAVlD,mBAUM6yB,EAVN,KAUqBC,EAVrB,KAYKC,EAAqB71B,EAAiBq1B,GAZ3C,EAc2B1qB,EAC1BkrB,EAAqB,IAAI31B,YAAUm1B,GAAY,MAD1CS,EAdN,oBAiBK3mB,EAAY2mB,EACdA,EAAkBrmB,MAAMpL,WACxBia,WAAQ7T,MAAK,qBAAGsU,cAA8B5P,UAAU9K,WAE5DrB,qBAAU,WACH6yB,GAAuB1mB,GAI5BymB,GAAiB,GACjBpf,UAAOgI,KACLjV,EACA,IAAIrJ,YAAUm1B,GACd,GACA,IAAIn1B,YAAUiP,IAEb6Q,MAAK,SAACpQ,GACLmQ,EAAUnQ,MAEXqQ,OAAM,WACL8V,IACAhW,EAAU,SAEXiW,SAAQ,kBAAMJ,GAAiB,OAjBhCG,MAmBD,CAACxsB,EAAY8rB,EAAUlmB,IAE1B,IAAM4mB,EAAc,WAClBP,EAAe,MACfC,EAAa,MACbC,EAAc,OAGVO,EAAc3X,WAAQ7T,MAC1B,SAACmH,GAAD,OACEA,EAAE1N,QAAQG,aAAegxB,GAAYzjB,EAAEzC,UAAU9K,aAAe8K,KAE9D+mB,EAAe5X,WAAQ7T,MAC3B,SAACmH,GAAD,OAAOA,EAAEzC,UAAU9K,aAAe8K,KAE9BgnB,GACE,OAANvmB,QAAM,IAANA,OAAA,EAAAA,EAAQO,mBAAR,UACAQ,eAAYlG,MAAK,SAACgV,GAAD,OAAWA,EAAMvb,QAAQgH,OAAO0E,EAAOO,2BADxD,aACA,EACI1H,MAEA2tB,GACE,OAANxmB,QAAM,IAANA,OAAA,EAAAA,EAAQW,oBAAR,UACAI,eAAYlG,MAAK,SAACgV,GAAD,OAAWA,EAAMvb,QAAQgH,OAAO0E,EAAOW,4BADxD,aACA,EACI9H,MAEA4tB,GACHV,KACC/lB,GACFA,EAAO/F,UAAUxF,aAAegxB,GAChCA,GACAlmB,GACAomB,IACCY,GAAqBnZ,KACrBoZ,GAAsBnZ,IACvB4Y,EA0BIS,EAAY,WAChBP,IACAhW,EAAU,MACVuV,EAAY,MACZvH,KAGF,OACE,kBAAC,KAAD,CACE5D,MAAO,oBACP8D,QAASA,EACTC,KAnCa,WACf,GAAKmI,EAAL,CAQA,IAAIjjB,EAAS,CACXlP,QAASmxB,EACTlmB,YACA1G,KAAM8sB,GAEHY,IACH/iB,EAAO4J,UAAYA,GAEhBoZ,IACHhjB,EAAO6J,WAAaA,GAEtBmY,EAAkBhiB,GAClBkjB,SAnBEvzB,GAAO,CACLoJ,QAAS,8CACTG,KAAM,WAgCRiqB,OAAQ,MACRpI,SAAUmI,EACVE,cAAe,CAAE/C,UAAW4C,IAE5B,6BACGR,EACC,qCACIjmB,IAAW+lB,GACX,kBAAC,KAAD,CAAK90B,MAAO,CAAEunB,aAAc,IAC1B,kBAACyG,GAAD,CAAMviB,KAAK,UAAX,uBAGHsD,GAAUqmB,GACT,kBAAC,KAAD,CAAKp1B,MAAO,CAAEunB,aAAc,IAC1B,kBAACyG,GAAD,CAAMviB,KAAK,WAAX,iBAAoC2pB,EAAYxtB,OAGnDmH,IAAWsmB,GACV,kBAAC,KAAD,CAAKr1B,MAAO,CAAEunB,aAAc,IAC1B,kBAACyG,GAAD,CAAMviB,KAAK,UAAX,iCAGHsD,GAAUsmB,GAAgBA,EAAanX,YACtC,kBAAC,KAAD,CAAKle,MAAO,CAAEunB,aAAc,IAC1B,kBAACyG,GAAD,CAAMviB,KAAK,WAAX,qCAKN,oCACG+oB,IAAaQ,GACZ,kBAAC,KAAD,CAAKh1B,MAAO,CAAEunB,aAAc,IAC1B,kBAACyG,GAAD,CAAMviB,KAAK,UAAX,uBAKR,kBAAC,KAAD,CAAKzL,MAAO,CAAEunB,aAAc,IAC1B,kBAAC,KAAD,CAAK1R,KAAM,IACT,kBAAC,KAAD,CACE+f,YAAY,YACZx1B,MAAOo0B,EACPvC,SAAU,SAACna,GAAD,OAAO2c,EAAY3c,EAAE1M,OAAOhL,QACtCiyB,OAAQyC,EAAgB,kBAACe,GAAA,EAAD,MAAsB,SAKpD,kBAAC,KAAD,CAAK71B,MAAO,CAAEunB,aAAc,EAAGyE,UAAW,IACxC,kBAAC,KAAD,CAAKnW,KAAM,IACT,kBAAC,KAAD,CACE+f,YAAY,eACZhD,UAAW7jB,EACX3O,MAAOs0B,EACPzC,SAAU,SAACna,GAAD,OAAO6c,EAAe7c,EAAE1M,OAAOhL,YAI/C,kBAAC,KAAD,CAAK01B,OAAQ,CAAC,GAAI91B,MAAO,CAAEunB,aAAc,IACvC,kBAAC,KAAD,CAAK1R,KAAM,IACT,kBAAC,KAAD,CACE+f,YAAY,aACZhD,UAAW7jB,GAAUumB,EACrBl1B,MAAOk1B,GAAqBnZ,EAC5B8V,SAAU,SAACna,GAAD,OAAO8c,EAAa9c,EAAE1M,OAAOhL,UAExC2O,IAAWumB,GACV,yBAAKt1B,MAAO,CAAEgsB,UAAW,IACvB,kBAACgC,GAAD,CAAMviB,KAAK,WAAX,4BAIN,kBAAC,KAAD,CAAKoK,KAAM,IACT,kBAAC,KAAD,CACE+f,YAAY,cACZhD,UAAW7jB,GAAUwmB,EACrBn1B,MAAOm1B,GAAsBnZ,EAC7B6V,SAAU,SAACna,GAAD,OAAO+c,EAAc/c,EAAE1M,OAAOhL,UAEzC2O,IAAWwmB,GACV,yBAAKv1B,MAAO,CAAEgsB,UAAW,IACvB,kBAACgC,GAAD,CAAMviB,KAAK,WAAX,+B,4OCvLRsiB,GAAqBgI,KAArBhI,OAAQiI,GAAaD,KAAbC,SAEVrR,GAAUC,KAAOzjB,IAAV,MAUE,SAAS80B,KAAa,IAC3B1Y,EAAkB2Y,eAAlB3Y,cACRpb,qBAAU,WACJob,GACFxb,aAAaY,QAAQ,gBAAiBG,KAAKC,UAAUwa,MAEtD,CAACA,IACJ,IAAM4Y,EAAUC,eAKhB,OACE,kBAACrX,GAAD,CACExB,cAAeA,EACfyB,iBAPJ,SAA0B3b,GACxB8yB,EAAQ/zB,KAAKid,GAAgBhc,MAQ3B,kBAACgzB,GAAD,OAKN,SAASA,KAAkB,IAAD,EAOpB7W,KALFzQ,EAFsB,EAEtBA,OACA6O,EAHsB,EAGtBA,WACA/B,EAJsB,EAItBA,cACAiD,EALsB,EAKtBA,iBACAE,EANsB,EAMtBA,iBAEItO,EnBjBC8M,GAAYnb,QAAO,qBAAG6b,cmBSL,EASwBjc,oBAAS,GATjC,mBASjBq0B,EATiB,KASCC,EATD,OAUwBt0B,oBAAS,GAVjC,mBAUjBu0B,EAViB,KAUCC,EAVD,KAWlBC,EAAoBrT,KAXF,EAYYphB,mBAAS,CAC3C8iB,OAAQ4R,OAAOC,YACfhJ,MAAO+I,OAAOE,aAdQ,mBAYjBC,EAZiB,KAYLC,EAZK,KAiBxB50B,qBAAU,WACR0D,SAASyjB,MAAQ1L,EAAU,UAAMA,EAAN,iBAA6B,UACvD,CAACA,IAEJ,IAAMoZ,EAAiBrsB,mBAIvBxI,qBAAU,WACR,IAAM80B,EAAe,WACnBF,EAAc,CACZhS,OAAQ4R,OAAOC,YACfhJ,MAAO+I,OAAOE,cAKlB,OADAF,OAAOO,iBAAiB,SAAUD,GAC3B,kBAAMN,OAAOQ,oBAAoB,SAAUF,MACjD,IAEH,IAAMrJ,EAAK,OAAGkJ,QAAH,IAAGA,OAAH,EAAGA,EAAYlJ,MACpBwJ,EAAiB,CACrBC,iBAAkB,SAAC/P,GAAD,OAAU0P,EAAepsB,QAAU0c,GACrD/B,QAAS/iB,uBACP,SAACuQ,GAAD,OAAWikB,EAAepsB,SAAWosB,EAAepsB,QAAQ,CAAEmI,YAC9D,IAEFyS,OAAQhjB,uBACN,SAACc,GAAD,OAAU0zB,EAAepsB,SAAWosB,EAAepsB,QAAQ,CAAEtH,WAC7D,KAGEg0B,EACAhB,EAEA,kBAAC,GAAD,CACE/C,oBAAqB,kBAAMgD,GAAoB,MAG1C3I,EAAQ,IACV,kBAAC,GAAkBwJ,GACjBxJ,EAAQ,KACV,kBAAC,GAAgBwJ,GAEjB,kBAAC,GAAiBA,GAyB7B,OACE,oCACE,kBAAC9C,GAAD,CACElH,QAASoJ,EACTtJ,QAAS,kBAAMuJ,GAAoB,IACnClC,kBA1BoB,SAACrY,GAIzB,GAHmBwB,GAAe7B,GAAeyC,MAC/C,SAACvN,GAAD,OAAOA,EAAE1N,QAAQG,aAAe0Y,EAAa7Y,WAG7CnB,GAAO,CACLoJ,QAAQ,4CACRG,KAAM,cAHV,CAOA,IAAM8rB,EAAgB,sBAAO1b,GAAP,CAAsBK,IAC5C4C,EAAiByY,GACjBvY,EAAiB9C,EAAa7Y,aAe5B,kBAAC,GAAD,KACE,kBAAC,KAAD,CACE+rB,MAAM,SACNpvB,MAAO,CAAEw3B,YAAa,EAAGtE,aAAc,GACvC4C,OAAQ,IAER,kBAAC,KAAD,KACE,kBAAC2B,GAAD,CACE/mB,QAASA,EACT6lB,oBAAqBA,EACrBX,YAAa,gBACb/Z,cAAeA,EACf6b,qBAxBiB,SAACr0B,GAC5B,IAAMk0B,EAAmB1b,EAAcxZ,QAAO,SAAC0O,GAAD,OAAOA,EAAE1N,UAAYA,KACnEyb,EAAiByY,OAyBVxoB,EACC,kBAAC,KAAD,KACE,kBAAC,KAAD,CACEkgB,QAAS,kBAACV,GAAD,CAAalrB,QAAS0L,EAAO/F,UAAUxF,aAChDkI,UAAU,cACV4d,MAAM,iBACN4F,QAAQ,SAER,kBAACC,GAAA,EAAD,CAAoBnvB,MAAO,CAAE2L,MAAO,eAGtC,KACJ,kBAAC,KAAD,KACE,kBAACgsB,GAAA,EAAD,CACE33B,MAAO,CAAE2L,MAAO,WAChB6b,QAAS,kBAAMiP,GAAoB,OAGtCC,GAAqBA,EAAkB51B,OAAS,GAC/C,kBAAC,IAAM6sB,SAAP,KACE,kBAAC,KAAD,KACE,kBAAC,KAAD,8FAKF,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAQnG,QAAS,kBAAM+O,GAAqBD,KACzCA,EAAmB,mBAAqB,yBAMlDgB,IAMT,SAASG,GAAT,GAMI,IAAD,IALD/mB,EAKC,EALDA,QACAklB,EAIC,EAJDA,YACAW,EAGC,EAHDA,oBACA1a,EAEC,EAFDA,cACA6b,EACC,EADDA,qBACC,EACoClY,KAA7BzQ,EADP,EACOA,OAAQiQ,EADf,EACeA,iBAOV4Y,EAAc,SAACp4B,GAAD,OAAOA,EAAEqB,MAAM,KAAK,IAClCg3B,EAAe,SAACr4B,GAAD,OAAOA,EAAEqB,MAAM,KAAK,IAEnCi3B,EAAc,UAAGpa,GAAe7B,GACnCjS,MACC,SAACmuB,GAAD,OACQ,OAANhpB,QAAM,IAANA,OAAA,EAAAA,EAAQ1L,UAAW00B,EAAe10B,QAAQgH,OAAO0E,EAAO1L,mBAH1C,iBAAG,EAKnBA,eALgB,aAAG,EAKVG,WAEb,OACE,kBAAC,KAAD,CACEw0B,YAAU,EACV10B,KAAM,QACNtD,MAAO,CAAE4tB,MAAO,KAChBgI,YAAaA,GAAe,kBAC5BqC,iBAAiB,OACjBpK,SAtBuB,SAACtQ,GAC1BgZ,GAAoB,GACpBvX,EAAiBzB,IAqBf2a,WAAY,IACZ93B,MAAO03B,EACPK,aAAc,SAACC,EAAOC,GAAR,aACN,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQzwB,YAAR,eAAc0wB,cAAc9N,QAAQ4N,EAAME,iBAAkB,IAG7Dzc,GAAiBA,EAAc/a,OAAS,GACvC,kBAACk1B,GAAD,CAAUvI,MAAM,UACb5R,EAAcvV,KAAI,WAAoBe,GAApB,IAAGhE,EAAH,EAAGA,QAASuE,EAAZ,EAAYA,KAAZ,OACjB,kBAACmmB,GAAD,CACE3tB,MAAOiD,EACPjE,IAAKiE,EACLuE,KAAMA,EACN5H,MAAO,CACL6oB,QAAS,OAET/c,gBAAiBzE,EAAI,IAAM,EAAI,kBAAoB,OAGrD,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAKmf,KAAK,QAAQ5e,GACjBkwB,IAAmBz0B,GAClB,kBAAC,KAAD,KACE,kBAAC0nB,GAAA,EAAD,CACEvD,QAAS,SAAC1P,GACRA,EAAEygB,kBACFzgB,EAAE0gB,YAAYC,2BACdf,GAAwBA,EAAqBr0B,aAU/D,kBAAC2yB,GAAD,CAAUvI,MAAM,WACb/c,EACE+P,MAAK,SAACjhB,EAAGkhB,GAAJ,MACqB,SAAzBmX,EAAar4B,EAAEoI,OAA6C,SAAzBiwB,EAAanX,EAAE9Y,OAC7C,EACwB,SAAzBiwB,EAAar4B,EAAEoI,OACU,SAAzBiwB,EAAanX,EAAE9Y,MACf,EACA,KAEL6Y,MAAK,SAACjhB,EAAGkhB,GAAJ,OACJkX,EAAYp4B,EAAEoI,MAAQgwB,EAAYlX,EAAE9Y,OAC/B,EACDgwB,EAAYp4B,EAAEoI,MAAQgwB,EAAYlX,EAAE9Y,MACpC,EACA,KAELtB,KAAI,WAAgCe,GAAhC,IAAGhE,EAAH,EAAGA,QAASuE,EAAZ,EAAYA,KAAMsW,EAAlB,EAAkBA,WAAlB,OACH,kBAAC6P,GAAD,CACE3tB,MAAOiD,EAAQG,WACfpE,IAAKiE,EACLuE,KAAMA,EACN5H,MAAO,CACL6oB,QAAS,OAET/c,gBAAiBzE,EAAI,IAAM,EAAI,kBAAoB,OAGpDO,EAVH,IAUUsW,EAAa,gBAAkB,WAQrD,IAAMwa,GAAwB,SAAC,GAA6B,IAA3BnF,EAA0B,EAA1BA,oBAC/B,OACE,oCACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAK/M,KAAK,QACR,kBAAC8M,GAAD,CACEC,oBAAqBA,QAQ3BoF,GAAe,SAAC,GAA2C,IAAzCtB,EAAwC,EAAxCA,iBAAkB9R,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACjD,OACE,kBAAC,KAAD,CACExlB,MAAO,CACLgzB,UAAW,QACX4F,SAAU,WAGZ,kBAAC,KAAD,CAAKpS,KAAK,OAAOxmB,MAAO,CAAE+kB,OAAQ,OAAQ+D,QAAS,SACjD,kBAAC,GAAD,OAEF,kBAAC,KAAD,CAAKtC,KAAM,QAASxmB,MAAO,CAAE+kB,OAAQ,SACnC,kBAAC9D,GAAD,CAAWqE,aAAa,EAAOC,QAASA,EAASC,OAAQA,IACzD,kBAAC,GAAD,CAAaF,aAAa,KAE5B,kBAAC,KAAD,CACEkB,KAAK,QACLxmB,MAAO,CAAE+kB,OAAQ,OAAQ+D,QAAS,OAAQiJ,cAAe,WAEzD,kBAAChC,GAAD,CAAWC,kBAAmBqH,IAC9B,kBAACzI,GAAD,SAMFiK,GAAc,SAAC,GAA2C,IAAzCxB,EAAwC,EAAxCA,iBAAkB9R,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAChD,OACE,oCACE,kBAAC,KAAD,CACExlB,MAAO,CACL+kB,OAAQ,UAGV,kBAAC,KAAD,CAAKyB,KAAK,OAAOxmB,MAAO,CAAE+kB,OAAQ,OAAQ+D,QAAS,SACjD,kBAAC7H,GAAD,CACEqE,aAAa,EACbnE,MAAO,GACPoE,QAASA,EACTC,OAAQA,KAGZ,kBAAC,KAAD,CAAKgB,KAAK,OAAOxmB,MAAO,CAAE+kB,OAAQ,OAAQ+D,QAAS,SACjD,kBAAC,GAAD,CAAaxD,aAAa,KAE5B,kBAAC,KAAD,CACEkB,KAAK,QACLxmB,MAAO,CAAE+kB,OAAQ,OAAQ+D,QAAS,OAAQiJ,cAAe,WAEzD,kBAAChC,GAAD,CAAWC,kBAAmBqH,IAC9B,kBAACzI,GAAD,QAGJ,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAKpI,KAAK,QACR,kBAAC,GAAD,UAOJsS,GAAgB,SAAC,GAA2C,IAAzCzB,EAAwC,EAAxCA,iBAAkB9R,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAClD,OACE,oCACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAKuT,GAAI,GAAIC,GAAI,GAAIh5B,MAAO,CAAE+kB,OAAQ,OAAQ+D,QAAS,SACrD,kBAACiH,GAAD,CAAW/vB,MAAO,CAAEwmB,KAAM,GAAKwJ,kBAAmBqH,KAEpD,kBAAC,KAAD,CAAK0B,GAAI,GAAIC,GAAI,IACf,kBAACpK,GAAD,QAGJ,kBAAC,KAAD,CACE5uB,MAAO,CACL+kB,OAAQ,UAGV,kBAAC,KAAD,CAAKgU,GAAI,GAAIC,GAAI,GAAIh5B,MAAO,CAAE+kB,OAAQ,OAAQ+D,QAAS,SACrD,kBAAC7H,GAAD,CAAWqE,aAAa,EAAMC,QAASA,EAASC,OAAQA,KAE1D,kBAAC,KAAD,CAAKuT,GAAI,GAAIC,GAAI,GAAIh5B,MAAO,CAAE+kB,OAAQ,OAAQ+D,QAAS,SACrD,kBAAC,GAAD,CAAaxD,aAAa,MAG9B,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAKkB,KAAK,QACR,kBAAC,GAAD,UCpZK,SAASyS,KAAkB,IAAD,EpB0wBlC,WAKL,IADA,EACMvwB,EAAaW,IACXmD,EAAcO,KAAdP,UAFR,EAMIiW,KANJ,mBAIEpR,EAJF,KAKE6nB,EALF,OAO4Cnd,KAP5C,mBAOOkD,EAPP,KAOoBka,EAPpB,KAQMC,EAEF,GAVJ,cAWoB/nB,GAAsB,IAX1C,IAWA,2BAA8C,CAAC,IAAtC3C,EAAqC,QACtC2qB,EAAc3qB,EAAQK,OAAOvL,WAC7B61B,KAAeD,IACnBA,EAA4BC,GAAe,IAE7CD,EAA4BC,GAAaj3B,KAAKsM,IAhBhD,8BAkBA,IAAM4qB,EAAmBx1B,OAAO0V,aAC7ByF,GAAe,IAAI3Y,KAAI,SAACuD,GAAD,MAAU,CAACA,EAAKkF,OAAO/F,UAAUxF,WAAYqG,OAEjE0vB,EAAgB,uCAAG,sBAAA/5B,EAAA,sEACVC,QAAQuH,IACnBlD,OAAOD,KAAKu1B,GAA6B9yB,IAAzC,iBAAAxC,OAAA,IAAAA,CAAA,UAA6C,WAAO01B,GAAP,uBAAAh6B,EAAA,6DACrCuP,EAASuqB,EAAiBE,GAAYzqB,OADD,SAEhBtP,QAAQuH,IAAI,CACrC+H,EAAO0qB,SAAS/wB,GAChBqG,EAAO2qB,SAAShxB,KAJyB,0CAEpCwM,EAFoC,KAE9BC,EAF8B,uBAMpC,CACL1C,OAAQ1D,EAAO6d,oBACb1X,EACAC,EACAikB,EAA4BI,IAE9Bjc,cAAeic,IAZ0B,2CAA7C,wDAFqB,mFAAH,qDAmBhBn1B,EAAW0F,YACf,mBACAmvB,GACC7nB,GAAsB,IAAIvQ,OAC3B4H,EACA8D,EACA2sB,GA9CF,EAgD6BjyB,EAAaqyB,EAAkBl1B,EAAU,CACpEE,gBAAiBsZ,KAjDnB,mBAmDA,MAAO,CACL7O,WApDF,KAqDEzH,OArDF,KAsDE0sB,kBAAmB,kBAAMzsB,EAAanD,KoBn0BUs1B,GAA1C3qB,EAD+B,EAC/BA,WAAYzH,EADmB,EACnBA,OAAQ0sB,EADW,EACXA,kBACxBhV,EAAcyD,KACdkX,EAAyB91B,OAAO0V,YAClCyF,EAAY3Y,KAAI,SAACuD,GAAD,MAAU,CAACA,EAAKxG,QAAQG,WAAYqG,EAAKjC,UAJpB,EAMpBmU,KAAdQ,EANkC,oBAOjC+c,EAAmBx1B,OAAO0V,aAC7B+C,GAAc,IAAIjW,KAAI,SAACmW,GAAD,MAAgB,CACrCA,EAAW1N,OAAO1L,QAAQG,WAC1BiZ,EAAW1N,YAITuZ,GAA8CtZ,GAAc,IAC/D1I,KAAI,SAAC8jB,GAAD,OACHA,EAAW3X,OAAOnM,KAAI,SAACoM,GACrB,OAAO,cACLkL,WAAYgc,EAAuBxP,EAAW7M,eAC9CxO,OAAQuqB,EAAiBlP,EAAW7M,gBACjC7K,SAIRkQ,OAEH,OACE,kBAACiC,GAAD,CAAiB7kB,MAAO,CAAEwmB,KAAM,EAAG+F,WAAY,KAC7C,kBAAC,KAAD,CAAQ/E,QAASyM,EAAmBvL,SAAUnhB,GAA9C,WAGA,kBAACsiB,GAAD,CACE7a,WAAYsZ,EACZK,SAAU,GACVD,SAAUnhB,EACVuiB,gBAAiBmK,EACjBlK,cAAY,KC/BL,SAAS8P,GAAT,GAWX,IAVFC,EAUC,EAVDA,eAWMpxB,EAAaW,IADlB,EAE6B0D,KAAtBT,EAFP,EAEOA,OAAQE,EAFf,EAEeA,UAFf,EAG+B+S,KAAzB5O,EAHN,sBAI+C2L,KAJ/C,mBAIM7L,EAJN,KAIqBspB,EAJrB,OAKyChe,KALzC,mBAKMQ,EALN,KAKkByd,EALlB,OAMyC/3B,oBAAS,GANlD,mBAMMg4B,EANN,KAMqBC,EANrB,iDAQD,sBAAA16B,EAAA,yDACE06B,GAAiB,GADnB,SAGSzpB,GAAkBspB,EAH3B,uBAIM73B,GAAO,CACLoJ,QAAS,uBACTC,YAAa,8BACbE,KAAM,UAPd,6BAWS8Q,GAAeyd,EAXxB,uBAYM93B,GAAO,CACLoJ,QAAS,uBACTC,YAAa,wBACbE,KAAM,UAfd,2CAmBU+E,GAAe,CACnB9H,aACA+H,gBACAE,wBACArE,SACAoE,QAAS6L,EAAWjW,KAAI,SAACmW,GAAD,OAAgBA,EAAW1N,YAxBzD,0DA2BI7M,GAAO,CACLoJ,QAAS,uBACTC,YAAa,KAAED,QACfG,KAAM,UA9BZ,yBAiCIyuB,GAAiB,GAjCrB,8EARC,sBA6CD,IAAM3R,EAAU,CACd,CACEe,MAAO,OACPlqB,IAAK,OACLwuB,MAAO,MACPpE,OAAQ,SAAC2Q,GAAD,OACN,kBAAC,KAAD,CAAK/K,MAAM,UACT,uBACEjkB,KAAI,8CAAyCgvB,EAAcxrB,MAC3DvD,OAAQ,SACRC,IAAI,uBAEH8uB,EAAcjX,MACb9f,EAAkB,IAAI/D,YAAU86B,EAAcxrB,WAKxD,CACE2a,MAAO,gBACPC,UAAW,eACXnqB,IAAK,eACLwuB,MAAO,OAET,CACEtE,MAAO,iBACPC,UAAW,gBACXnqB,IAAK,gBACLwuB,MAAO,OAET,CACEtE,MAAO,6BACPC,UAAW,kBACXnqB,IAAK,kBACLwuB,MAAO,OAET,CACEtE,MAAO,qBACPC,UAAW,iBACXnqB,IAAK,iBACLwuB,MAAO,OAET,CACEtE,MAAO,yBACPlqB,IAAK,qBACLwuB,MAAO,MACPpE,OAAQ,SAAC2Q,GAAD,OACN,kBAAC,KAAD,CAAK/K,MAAM,SAASpvB,MAAO,CAAE4tB,MAAO,UAClC,kBAACL,GAAD,CACE9b,SAAQ,OAAEhB,QAAF,IAAEA,OAAF,EAAEA,EAAepO,QACvB,SAAC+P,GAAD,OAAOA,EAAEsJ,cAAclY,aAAe22B,EAAcxrB,QAEtDA,KAAMwrB,EAAcxrB,WAM9B,OACE,kBAAC,IAAMgf,SAAP,KACE,kBAACtF,GAAD,CACEG,WAAW,cACXF,WAAYwR,EACZvR,QAASA,EACTE,YAAY,IAEbjc,GACC,kBAAC,KAAD,CAAQgb,QAhHb,2CAgHqCkB,QAASuR,GAAzC,qB,ICjIA7N,GAAYC,KAAZD,QAEO,SAASgO,KACtB,IAAMN,EtB63BD,WAGF,IAAD,EACsBxd,KAAjB7L,EADL,oBAEMjE,EAAcO,KAAdP,UAFN,EAGsC6P,KAHtC,mBAGKO,EAHL,KAGgByd,EAHhB,KAKF,IAAK7tB,IAAc6tB,EACjB,MAAO,GAGT,IATE,EASEnR,EAAuC,GATzC,cAUkBzY,GAAiB,IAVnC,IAUF,2BAAyC,CAAC,IAAjC/B,EAAgC,QACvC,GAAKA,EAAQA,QAAb,CAGA,IAAI4rB,OAAa,GAEfA,EADE5rB,EAAQgN,cAAcrR,OAAOsR,qBACf,CACdhN,KAAMgN,oBACN/M,MAAOF,EAAQU,OACfkL,OAAQ5L,EAAQA,QAAQpE,UAGV8P,GAAsB1L,EAAQA,QAAQtJ,OAEpCuJ,KAAKnL,aAAc0lB,IACrCA,EAASoR,EAAc3rB,KAAKnL,YAAc,GAE5C,IAAM+2B,EAAW3d,GAAaA,EAAU0d,EAAc3rB,KAAKnL,YACrDg3B,EAAmBz5B,EACvB,IAAIU,IAAG64B,EAAchgB,QACrB9Y,GAAuC,OAAR+4B,QAAQ,IAARA,OAAA,EAAAA,EAAUl6B,WAAY,IAEvD6oB,EAASoR,EAAc3rB,KAAKnL,aAAeg3B,IAhC3C,8BAkCF,OAAO12B,OAAO+Y,QAAQqM,GAAU5iB,KAAI,YAAsB,IAAD,mBACvD,MAAO,CAAEqI,KAD8C,KACxCud,QADwC,SsBl6BlCuO,GACjBC,EAAgB9e,KAChB+e,EtBysBD,WAAqC,IAAD,EAIrClY,KAJqC,mBAEvCpR,EAFuC,KAGvCupB,EAHuC,OAKDve,KALC,mBAKlCO,EALkC,KAKvByd,EALuB,OAMpBte,KAAdQ,EANkC,oBAOzC,IAAKqe,IAA6BP,EAChC,MAAO,GAGT,IAXyC,EAWnCf,EAAmBx1B,OAAO0V,aAC7B+C,GAAc,IAAIjW,KAAI,SAACyK,GAAD,MAAO,CAACA,EAAEhC,OAAO1L,QAAQG,WAAYuN,OAExD4pB,EAEF,GAhBqC,cAiBrBtpB,GAAsB,IAjBD,IAiBzC,2BAA8C,CAAC,IAAtC3C,EAAqC,QACtC+N,EAAa6c,EAAiB5qB,EAAQK,OAAOvL,YAC7CqO,EAAQ,OAAG4K,QAAH,IAAGA,OAAH,EAAGA,EAAY1N,OAAOO,gBAAgB9L,WAC9CsO,EAAS,OAAG2K,QAAH,IAAGA,OAAH,EAAGA,EAAY1N,OAAOW,iBAAiBlM,WAChDqO,KAAY8oB,IAChBA,EAAmB9oB,GAAY,IAE3BC,KAAa6oB,IACjBA,EAAmB7oB,GAAa,IAGlC,IAAM+oB,EAAeje,GAAaA,EAAU/K,GACtCipB,EAAW/5B,EACf,IAAIU,IAAGiN,EAAQ4C,eACf9P,GAA2C,OAAZq5B,QAAY,IAAZA,OAAA,EAAAA,EAAcx6B,WAAY,IAErD06B,EAAYh6B,EAChB,IAAIU,IAAGiN,EAAQ0P,gBACf5c,GAA2C,OAAZq5B,QAAY,IAAZA,OAAA,EAAAA,EAAcx6B,WAAY,IAErD26B,EAAgBpe,GAAaA,EAAU9K,GACvCmpB,EAAYl6B,EAChB,IAAIU,IAAGiN,EAAQ6C,gBACf/P,GAA4C,OAAbw5B,QAAa,IAAbA,OAAA,EAAAA,EAAe36B,WAAY,IAEtD66B,EAAan6B,EACjB,IAAIU,IAAGiN,EAAQ2P,iBACf7c,GAA4C,OAAbw5B,QAAa,IAAbA,OAAA,EAAAA,EAAe36B,WAAY,IAG5Ds6B,EAAmB9oB,GAAUzP,KAAK,CAChC2M,OAAQL,EAAQK,OAChBosB,KAAML,EACN1U,MAAO2U,IAETJ,EAAmB7oB,GAAW1P,KAAK,CACjC2M,OAAQL,EAAQK,OAChBosB,KAAMF,EACN7U,MAAO8U,KAvD8B,8BA0DzC,OAAOP,EsBnwBoBS,GAErBh2B,GAAQ00B,GAAkB,IAC/BxzB,KAAI,SAAC4lB,GACJ,IADgB,EACVhD,EAAW,CACfhG,KAAMwX,EAAcxO,EAAQvd,MAC5BA,KAAMud,EAAQvd,KACd0sB,aAAc,EACdlB,cAAejO,EAAQA,QACvBoP,eAAgB,EAChBC,gBAAiB,GAPH,cAScZ,EAAmBzO,EAAQvd,OAAS,IATlD,IAShB,2BAAsE,CAAC,IAA9D+C,EAA6D,QACpEwX,EAAQ,gBAAsBxX,EAAkBypB,KAChDjS,EAAQ,iBAAuBxX,EAAkB0U,OAXnC,8BAchB,OADA8C,EAASmS,aAAenS,EAASiR,cAAgBjR,EAASoS,eAAiBpS,EAASqS,gBAC7ErS,KAERzI,MAAK,SAACjhB,EAAEkhB,GAEP,OADArb,QAAQC,IAAI9F,EAAEkhB,GACXlhB,EAAE67B,eAAiB3a,EAAE2a,aACf3a,EAAE2a,aAAe77B,EAAE67B,aAEpBX,EAAcl7B,EAAEmP,MAAQ+rB,EAAcha,EAAE/R,OACtC,EAEF+rB,EAAcl7B,EAAEmP,MAAQ+rB,EAAcha,EAAE/R,MACvC,EAGA,KAIX,OACE,kBAACkW,GAAD,CAAiB7kB,MAAO,CAAEwmB,KAAM,EAAG+F,WAAY,KAC7C,kBAAC,KAAD,CAAMC,iBAAiB,kBACrB,kBAAC,GAAD,CAASC,IAAI,kBAAkBrtB,IAAI,kBACjC,kBAACy6B,GAAD,CAAqBC,eAAgB10B,O,cChDhC,SAASo2B,KAAiB,IAAD,IACRzuB,KAAtBP,EAD8B,EAC9BA,UAAWF,EADmB,EACnBA,OACbtD,EAAS,OAAGsD,QAAH,IAAGA,GAAH,UAAGA,EAAQtD,iBAAX,aAAG,EAAmBxF,WAErC,OACE,kBAAC,IAAMmqB,SAAP,KACE,kBAAC,KAAD,CACEliB,KAAK,OACLnI,KAAK,QACLkkB,QAAShb,EAAYF,EAAOO,WAAaP,EAAOmvB,QAChDz7B,MAAO,CAAE2L,MAAO,YAEhB,kBAAC+vB,GAAA,EAAD,MACElvB,EAA+B,aAAnB,kBAEfA,GACC,kBAAC,KAAD,CACEyiB,QAAS,kBAACV,GAAD,CAAalrB,QAAS2F,IAC/B0C,UAAU,cACV4d,MAAM,oBACN4F,QAAQ,SAER,kBAACC,GAAA,EAAD,CAAoBnvB,MAAO,CAAE2L,MAAO,e,+RCDtCoiB,GAAWgI,KAAXhI,OACA5gB,GAAUC,KAAVD,MAEFwhB,GAAe/J,aAAOgF,KAAPhF,CAAH,MAMZ+W,GAAgB/W,aAAOgF,KAAPhF,CAAH,MAKJ,SAASgX,KAAe,IAAD,EACN7uB,KAAtBP,EAD4B,EAC5BA,UAAWF,EADiB,EACjBA,OACXuP,EAAkBC,KAAlBD,cACFoD,EAAcvB,GAAe7B,GAHC,EAIM5Z,mBAAwB,MAJ9B,mBAI7Bsb,EAJ6B,KAIdyB,EAJc,OAMF/c,wBAA6BlC,GAN3B,mBAM7B87B,EAN6B,KAMlBC,EANkB,OAON75B,wBAA6BlC,GAPvB,mBAO7Bg8B,EAP6B,KAOpBC,EAPoB,OAQZ/5B,wBAA6BlC,GARjB,mBAQ7BuD,EAR6B,KAQvB24B,EARuB,KAU9BC,EAAoBp4B,OAAO0V,YAC/ByF,EAAY3Y,KAAI,SAACyI,GAAD,MAAY,CAACA,EAAOnH,KAAMmH,OAGtCotB,EAA4C,IAAIh4B,IACtDL,OAAOD,KAAKq4B,GAAmBt5B,SAAQ,SAACmM,GAAY,IAAD,EAC7BA,EAAOlO,MAAM,KADgB,mBAC5Cu7B,EAD4C,KACtCC,EADsC,KAEhDF,EAAgBx1B,IAAIy1B,GAEjBD,EAAgB52B,IACd62B,EACA,IAAIn2B,IAAJ,sBAAak2B,EAAgBv1B,IAAIw1B,IAAS,IAA1C,CAA+CC,MAHjDF,EAAgB52B,IAAI62B,EAAM,IAAIn2B,IAAI,CAACo2B,KAKtCF,EAAgBx1B,IAAI01B,GAEjBF,EAAgB52B,IACd82B,EACA,IAAIp2B,IAAJ,sBAAak2B,EAAgBv1B,IAAIy1B,IAAU,IAA3C,CAAgDD,MAHlDD,EAAgB52B,IAAI82B,EAAO,IAAIp2B,IAAI,CAACm2B,QA6B1C,OACE,kBAACvX,GAAD,CAAiB7kB,MAAO,CAAEs8B,SAAU,MAClC,kBAAC,GAAD,CAAO/uB,MAAO,GAAd,YACEf,GACA,kBAAC,KAAD,CAAKyb,QAAQ,UACX,kBAAC,KAAD,KACE,kBAACuT,GAAD,QAILW,GAAmB3vB,GAClB,oCACE,kBAAC,KAAD,CAAKxM,MAAO,CAAEunB,aAAc,IAC1B,kBAAC,KAAD,KACE,kBAAC,KAAD,CACEvnB,MAAO,CAAEu8B,SAAU,KACnB3G,YAAY,iBACZx1B,MAAOy7B,EACP5J,SAAU,SAACrT,GACTkd,EAAald,GACbod,OAAWj8B,KAGZke,MAAM1E,KAAK4iB,EAAgBt4B,QAAQyC,KAAI,SAACsY,GAAD,OACtC,kBAAC,GAAD,CAAQxe,MAAOwe,EAAOxf,IAAKwf,GACxBA,SAMVid,GACC,kBAAC,KAAD,CAAK77B,MAAO,CAAEunB,aAAc,IAC1B,kBAAC,KAAD,KACE,kBAAC,KAAD,CACEvnB,MAAO,CAAEu8B,SAAU,KACnBn8B,MAAO27B,EACP9J,SA3DE,SAAC8J,GACjB,IAAMtf,EAAawC,EAChB5c,QAAO,SAACoa,GAAD,OAAiBA,EAAWyB,cACnCtU,MACC,SAAC6S,GAAD,OACEA,EAAW7U,OAAX,UAAuBi0B,EAAvB,YAAoCE,IACpCtf,EAAW7U,OAAX,UAAuBm0B,EAAvB,YAAkCF,MAExC,IAAKpf,EAQH,OAPApX,QAAQI,KAAR,sDACiDo2B,EADjD,YAC8DE,EAD9D,eAC4EA,EAD5E,YACuFF,SAEvF35B,GAAO,CACLoJ,QAAS,iBACTG,KAAM,UAIVuT,EAAiBvC,EAAWpZ,QAAQG,YACpCw4B,EAAWD,KA0CI,YAAKI,EAAgBv1B,IAAIi1B,IAAc,IAAKv1B,KAAI,SAACsY,GAAD,OAC/C,kBAAC,GAAD,CAAQxe,MAAOwe,EAAOxf,IAAKwf,GACxBA,SAOZid,GAAaE,GACZ,kBAAChd,GAAD,CACExB,cAAeA,EACfyB,iBAAkBA,GAElB,kBAACwd,GAAD,CACEl5B,KAAMA,EACN24B,QAASA,EACTJ,UAAWA,EACXE,QAASA,EACTzvB,OAAQA,EACRuP,cAAeA,OAU/B,SAAS2gB,GAAT,GAcI,IAbFl5B,EAaC,EAbDA,KACA24B,EAYC,EAZDA,QACAJ,EAWC,EAXDA,UACAE,EAUC,EAVDA,QACAzvB,EASC,EATDA,OACAuP,EAQC,EARDA,cASQ9M,EAAWyQ,KAAXzQ,OADP,EAEkBuN,KAAZ7K,EAFN,oBAGKyX,EAAWrG,KAHhB,EAImC5gB,qBAJnC,mBAIMw6B,EAJN,KAIkBC,EAJlB,OAK+Bz6B,qBAL/B,mBAKM06B,EALN,KAKgBC,EALhB,KAM6Bpa,EAAmBL,KAAzCC,qBAEF1Z,EAAaW,IACbT,EAAiBa,IATtB,EAWuCxH,oBAAS,GAXhD,mBAWM46B,EAXN,KAWoBC,EAXpB,KAaKC,EAA0B,SAAChuB,GAAY,IACnC6O,EAAea,GAAiB1P,EAAQ8M,GAAxC+B,WACR,IAAKA,EACH,MAAMpU,MACJ,2EAJsC,MAO3BoU,EAAW/c,MAAM,KAAzBu7B,EAPmC,oBAQ1C,OAAOP,IAAcO,GAGjBY,EAAS,uCAAG,kDAAAx9B,EAAA,yDACXuP,EADW,uBAEd1J,QAAQI,KAAK,2CACbvD,GAAO,CACLoJ,QAAS,iBACTG,KAAM,UALM,0BAUVwD,EAAsB+C,GAC1BP,EADwD,OAExD1C,QAFwD,IAExDA,OAFwD,EAExDA,EAAQO,iBAEJJ,EAAuB8C,GAC3BP,EADyD,OAEzD1C,QAFyD,IAEzDA,OAFyD,EAEzDA,EAAQW,kBAhBM,SAsBdoD,EAAOiqB,EAAwBhuB,GAAU,OAAS,MAtBpC,yDAwBd1J,QAAQI,KAAR,MACAvD,GAAO,CACLoJ,QAAS,sBACTC,YAAa,KAAED,QACfG,KAAM,UA5BM,kCAiCVwxB,EAEK,QAATnqB,EAAiB/D,EAAO4C,SAASwD,KAAOpG,EAAO4C,SAASuD,KAnC1C,UAoCYxM,EAAWsB,eACrCizB,GArCc,mBAoCVtX,EApCU,kBAuCXA,OAvCW,EAuCXA,EAAevgB,KAvCJ,wBAwCdlD,GAAO,CAAEoJ,QAAS,yBAA0BG,KAAM,UAxCpC,8BA2CVyxB,EAAuBjc,aAAU5G,OAAOtL,EAAQ4W,EAAcvgB,MA3CpD,EA6Cd83B,GACAA,EAAqB9b,MAAM,GAAG9a,KAAI,0CA9CpB,gDAgDdpE,GAAO,CAAEoJ,QAAS,sBAAuBG,KAAM,UAhDjC,8BAmDXnI,EAnDW,wBAoDdpB,GAAO,CAAEoJ,QAAS,qBAAsBG,KAAM,UApDhC,kCAwDVoY,EAAmBnjB,EAAgBqO,EAAOuE,UAC1C6pB,EAAcxZ,GAClBuZ,EACA55B,EACAugB,GAIIoN,EAAmBvwB,EAAgBqO,EAAOoE,cAE1CiqB,EAAaj9B,EADS,SAAT2S,EAAkBxP,EAAOA,EAAO65B,EACLlM,GAE9C6L,GAAgB,GApEA,oBAsERjqB,GAAW,CACfC,OACAC,MAAOoqB,EACP75B,KAAM85B,EACNpqB,UAAW,MACXjE,SACArG,WAAYE,EACZ0D,SACA2C,oBAAmB,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAqBG,OAC1CF,qBAAoB,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAsBE,OAC5C6D,kBAAmBuP,IAhFP,2DAmFdnd,QAAQI,KAAR,MACAvD,GAAO,CACLoJ,QAAS,sBACTC,YAAa,KAAED,QACfG,KAAM,UAvFM,yBA0FdqxB,GAAgB,GA1FF,qFAAH,qDA8FTO,EAAQ,uCAAG,0CAAA79B,EAAA,sEAEPsT,EAAOiqB,EAAwBhuB,GAAU,OAAS,MAClDkuB,EAEK,QAATnqB,EAAiB/D,EAAO4C,SAASwD,KAAOpG,EAAO4C,SAASuD,KAL7C,SAMexM,EAAWsB,eACrCizB,GAPW,WAST,QAHEtX,EANO,cAST,IAACA,OAAD,EAACA,EAAevgB,OAAS2J,EAThB,yCAUJ,CAAC,KAAM,OAVH,UAYPmuB,EAAuBjc,aAAU5G,OAAOtL,EAAQ4W,EAAcvgB,MAZvD,EAcX83B,GACAA,EAAqB9b,MAAM,GAAG9a,KAAI,0CAfvB,yBAgBAhD,EAhBA,0CAiBJ,CAAC,KAAM,OAjBH,WAmBPugB,EAAmBnjB,EAAgBqO,EAAOuE,UAC1CgqB,EAAgBpZ,GACpBgZ,EACA55B,EACAugB,GAEW,QAAT/Q,EAzBS,0CA0BJ,CAACwqB,EAAclqB,QAAQ,GAAI,IA1BvB,iCA4BJ,CAAC,EAAGkqB,EAAclqB,QAAQ,KA5BtB,iEA+Bb/N,QAAQC,IAAR,2BA/Ba,kBAgCN,CAAC,KAAM,OAhCD,0DAAH,qDAoCdnD,qBACE,WACEk7B,IAAWle,MAAK,YAA6B,IAAD,mBAA1Bsd,EAA0B,KAAdE,EAAc,KAC1CD,EAAcD,QAAc18B,GAC5B68B,EAAYD,QAAY58B,QAI5B,QAACgP,QAAD,IAACA,OAAD,EAACA,EAAQ1L,QAAQG,WAAYF,IAG/B,IAAMi6B,EAAaxuB,GAAUzL,GAAQA,EAAO,EACtC4oB,EAAUhD,EAAStf,MACvB,SAAC4zB,GAAD,OAAiBA,EAAYta,OAAS2Y,KAElC4B,EACmD,OAA9C,OAAPvR,QAAO,IAAPA,OAAA,EAAAA,EAAS9I,YAAa,KAAa,OAAP8I,QAAO,IAAPA,OAAA,EAAAA,EAAS5f,SAAU,IAEnD,OACE,kBAAC,IAAMqhB,SAAP,KACE,kBAAC,KAAD,CAAK3tB,MAAO,CAAEunB,aAAc,IAC1B,kBAAC,KAAD,KACE,kBAAC,KAAD,CACEvnB,MAAO,CAAEu8B,SAAU,KACnBnK,YAAW,gBAAWyJ,EAAX,KACXjG,YAAY,OACZx1B,MAAgB,OAATkD,OAAgBvD,EAAYuD,EACnCmI,KAAK,SACLwmB,SAAU,SAACna,GAAD,OAAOmkB,EAAQtK,WAAW7Z,EAAE1M,OAAOhL,aAAUL,QAI7D,kBAAC,KAAD,CAAK+1B,OAAQ,GAAI91B,MAAO,CAAEunB,aAAc,IACtC,kBAAC,KAAD,CAAK1R,KAAM,IACT,kBAAC,GAAD,CACEyZ,OAAK,EACLhsB,KAAK,QACLkkB,QAAS,kBAAMyU,EAAQ97B,EAAes9B,EAAkB,MAH1D,QAKQA,EAAiBrqB,QAAQ,KAGnC,kBAAC,KAAD,CAAKyC,KAAM,IACT,kBAAC8lB,GAAD,CACErM,OAAK,EACL7jB,KAAK,UACLnI,KAAK,QACLolB,QAASmU,EACTrV,QAASwV,EACTpK,UAAW2K,GANb,aAYHA,GACC,kBAAC,KAAD,CAAKnO,MAAM,SAASnH,QAAQ,UAC1B,kBAAC,KAAD,KACGwU,EADH,IACgBZ,GAEhB,kBAAC,KAAD,CAAKjhB,OAAQ,GACX,kBAAC8iB,GAAA,EAAD,OAEF,kBAAC,KAAD,CAAK9iB,OAAQ,GACV+hB,EADH,IACcZ,K,wOCpYxB,IAAMpX,GAAUC,KAAOzjB,IAAV,MAUE,SAASw8B,KAAe,IAAD,EACM96B,EACxC,gBAD4D,OAE5D2b,SAF4D,IAE5DA,QAF4D,EAE5DA,GAAgBnb,QAAQG,YAHU,mBAC7B+Z,EAD6B,KACdyB,EADc,KAKpC,OACE,kBAAC,GAAD,CAAShf,MAAO,CAAEwmB,KAAM,EAAG+F,WAAY,KACrC,kBAAC,KAAD,CAAKtE,QAAQ,UACX,kBAAC,KAAD,KACE,kBAAClJ,GAAD,CACExB,cAAeA,EACfyB,iBAAkBA,GAElB,kBAAC4c,GAAD,U,sDCjBNgC,GAAqB31B,IAAMC,cAC/B,MAGK,SAAS21B,GAAT,GAA4C,IAAbz1B,EAAY,EAAZA,SAAY,EACEvF,EAChD,qBACA,GAH8C,mBACzCi7B,EADyC,KACtBC,EADsB,OAMxBzhB,KAAjB7L,EANyC,sBAOlB1D,KAAtBP,EAPwC,EAOxCA,UAAWF,EAP6B,EAO7BA,OAP6B,EAQ3ByP,KAAdiiB,EARyC,oBAS1Ct1B,EAAaW,IAT6B,EAUhBkW,KAAzB5O,EAVyC,oBAgChD,OApBA2T,IAAY,WACV,IAAM2Z,EAAU,uCAAG,4BAAAz+B,EAAA,6DACXkR,GAAWstB,GAAc,IAAI13B,KAAI,SAACyK,GAAD,OAAOA,EAAEhC,UAD/B,SAGf1J,QAAQC,IAAI,iBAHG,SAITkL,GAAe,CACnB9H,aACA4D,SACAmE,cAAeA,GAAiB,GAChCC,UACAC,0BATa,uDAYftL,QAAQC,IAAI,8BAAgC,KAAEgG,SAZ/B,yDAAH,qDAgBhBkB,IAAS,OAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAQ4xB,cAAeJ,GAAqBG,MACxD,KAGD,kBAACL,GAAmBx0B,SAApB,CACEhJ,MAAO,CACL09B,oBACAC,yBAGD31B,G,ICpDC+jB,GAAc/e,KAAd+e,UAEO,SAASgS,GAAT,GAAoC,IAAhBD,EAAe,EAAfA,YAAe,EDuD3C,WACL,IAAM50B,EAAUC,qBAAWq0B,IAC3B,IAAKt0B,EACH,MAAM,IAAIE,MAAM,+BAElB,MAAO,CACLs0B,kBAAmBx0B,EAAQw0B,kBAC3BC,qBAAsBz0B,EAAQy0B,sBC7DoBK,GAA5CN,EADwC,EACxCA,kBAAmBC,EADqB,EACrBA,qBAE3B,OACE,6BACE,kBAAC,KAAD,CACE/9B,MAAO,CAAEmoB,YAAa,IACtByK,UAAWsL,EACXvL,QAASuL,GAAeJ,EACxB7L,SAAU8L,IACT,IANL,eAQIG,GACA,kBAAC,GAAD,CAAWl+B,MAAO,CAAE2L,MAAO,wBAAyBqgB,UAAW,KAA/D,kECfO,SAASqS,GAAT,GAUX,IATFjR,EASC,EATDA,QACAkR,EAQC,EARDA,kBACAC,EAOC,EAPDA,oBACArR,EAMC,EANDA,QAMC,EAC2CjrB,mBAAS,IADpD,mBACMu8B,EADN,KACsBC,EADtB,OAEmDx8B,mBAAS,IAF5D,mBAEMy8B,EAFN,KAE0BC,EAF1B,KAcKlJ,EAAY,WAChBgJ,EAAkB,IAClBE,EAAsB,IACtBzR,GAAWA,KAEPsI,EAA+B,KAAnBgJ,GAAgD,KAAvBE,EAE3C,OACE,kBAAC,KAAD,CACEpV,MAAO,sBACP8D,QAASA,EACTC,KArBa,WAOfkR,EALe,CACb32B,KAAM82B,EACN72B,SAHmB,WAAa22B,EAIhC12B,QAAQ,IAGV2tB,KAcEC,OAAQ,MACRpI,SAAUmI,EACVE,cAAe,CAAE/C,UAAW4C,EAAW9M,QAAS4V,IAEhD,kBAAC,KAAD,CAAKt+B,MAAO,CAAEunB,aAAc,IAC1B,kBAAC,KAAD,CAAK1R,KAAM,IACT,kBAAC,KAAD,CACE+f,YAAY,eACZx1B,MAAOs+B,EACPzM,SAAU,SAACna,GAAD,OAAO6mB,EAAsB7mB,EAAE1M,OAAOhL,YAItD,kBAAC,KAAD,CAAKJ,MAAO,CAAEunB,aAAc,IAC1B,kBAAC,KAAD,CAAK1R,KAAM,IACT,kBAAC,KAAD,CACE+f,YAAY,mBACZx1B,MAAOo+B,EACPpM,YAAa,WACbH,SAAU,SAACna,GAAD,OAAO2mB,EAAkB3mB,EAAE1M,OAAOhL,a,mCCrDhD2tB,GAAWgI,KAAXhI,OAEF6Q,GAAgBC,KAAKp2B,OACzBqH,eAAYxJ,KAAI,SAACqI,GACf,MAAO,CACL/G,KAAK,GAAD,OAAK+G,EAAK/G,KAAV,QACJoE,IAAI,uCAAD,OAAyC2C,EAAKtL,QAAQG,YACzD+H,YAAY,GAAD,OAAKoD,EAAK/G,KAAV,cACXkjB,KAAM,GACNgU,KAAM,CACJ,QACA,aACA,SACA,MACA,SACAnwB,EAAKtL,QAAQG,iBAaN,SAASu7B,GAAU/zB,GAAQ,IAAD,EACG/I,mBAAgB,IADnB,mBAChC+8B,EADgC,KACjBC,EADiB,OAEDh9B,wBAA6BlC,GAF5B,mBAEhCm/B,EAFgC,KAEnBC,EAFmB,KA2BjCC,EAAc,WAClBH,EAAiB,IACjBE,OAAep/B,IAGXs/B,EAAUL,EAAc14B,KAAI,SAACg5B,GAAD,OAChC,kBAAC,GAAD,CAAQlgC,IAAKkgC,EAAE13B,KAAMxH,MAAOk/B,EAAE13B,KAAMuD,KAAMm0B,EAAEtzB,KAC1C,4BAAKszB,EAAE13B,MACP,kBAAC,KAAWomB,KAAZ,CAAiBviB,KAAK,aACnB6zB,EAAEtzB,IAAIuzB,QAAQ,WAAY,SAK3BjY,EAAM3c,mBACZ,OACE,kBAAC,KAAD,CACE2c,IAAKA,EACL0Q,YAAU,EACVwH,YAAU,EACVp/B,MAAO8+B,EACPtJ,YACE5qB,EAAMy0B,eAA+B1/B,IAAnBiL,EAAMy0B,SACpB,yCACA,GAENC,SArCiB,SAACt/B,GACpB++B,EAAyB,KAAV/+B,OAAeL,EAAYK,GAC1C,IAAMu/B,EAAef,GAAcv8B,QAAO,SAACu9B,GAAD,OAd3B,SAACC,EAAsBD,GACtC,IAAME,EAAiBD,EAAavH,cACpC,OACEsH,EAAIh4B,KAAK0wB,cAAcyH,SAASD,IAChCF,EAAId,KAAKxgB,MACP,SAAC0hB,GAAD,OACEA,EAAI1H,cAAcyH,SAASD,IAC3BA,EAAeC,SAASC,EAAI1H,kBAOiB2H,CAAS7/B,EAAOw/B,MACnEX,EAAiBU,IAmCfO,QAASd,EACTvR,SAjCiB,SAACztB,EAAOi4B,GAC3B1B,OAAOwJ,KAAK9H,EAAOltB,KAAM,UACzBi0B,KAgCEgB,QAASp1B,EAAMo1B,QACfC,OAAQ,WACNr1B,EAAMq1B,SACNjB,KAEFkB,gBAAiB,KACjBtgC,MAAO,CACL4tB,MAAO5iB,EAAM4iB,OAAS,QACtB2S,WAAYv1B,EAAMy0B,SAAW,uBAAyB,IAExDe,cAAe,CACb5S,MAAO5iB,EAAM4iB,OAAS,SAExB6S,0BAA0B,EAC1BC,WACE,kBAACC,GAAA,EAAD,CAAgBnZ,QAAS,kBAAMF,EAAI1c,SAAW0c,EAAI1c,QAAQg2B,WAE5DzI,cAAc,GAEbkH,G,ocCxFP,IAAM1a,GAAUC,KAAOzjB,IAAV,MAQP0/B,GAAcjc,KAAOzjB,IAAV,MAYX2/B,GAAiB,CACrB,SAAU,0CACV,cAAe,2CACf,kBAAmB,8CACnB,YAAa,yCACb,uBAAwB,oDACxB,YAAa,8BACb,WAAY,mCACZ,QAAS,iCAGI,SAASC,KAAU,IAAD,EACyBh0B,KAAhDP,EADuB,EACvBA,UAAWF,EADY,EACZA,OAAQH,EADI,EACJA,YAAaa,EADT,EACSA,YADT,EAQ3BtD,IALF7B,EAH6B,EAG7BA,SACA8B,EAJ6B,EAI7BA,aACAtB,EAL6B,EAK7BA,YACAG,EAN6B,EAM7BA,mBACAD,EAP6B,EAO7BA,mBAP6B,EASqBtG,oBAAS,GAT9B,mBASxB++B,EATwB,KASJC,EATI,OAUmBh/B,oBAAS,GAV5B,mBAUxBq8B,EAVwB,KAUL4C,EAVK,KAWzBC,EAAWC,eACXjL,EAAUC,eAZe,EAaan0B,oBAAS,GAbtB,mBAaxBo/B,EAbwB,KAaRC,EAbQ,KAezBC,EAAc/+B,uBAClB,SAACsV,GACOA,EAAE1Y,OAAO0hC,IACb3K,EAAQ/zB,KAAK0V,EAAE1Y,OAGnB,CAAC+2B,IA6CGqL,EAAqB73B,GAAgBA,EAAa7B,OACxD3F,qBAAU,WACR,IAAMs/B,EAAU,WACVD,GACFn5B,EAAYV,EAAU,GAAGE,WAI7B,OADA8uB,OAAOO,iBAAiB,eAAgBuK,GACjC,kBAAM9K,OAAOQ,oBAAoB,eAAgBsK,MACvD,CAACD,EAAoBn5B,IAExB,IAAMq5B,EAAeP,EAASQ,SAAShqB,WAAW,YAC9CwpB,EAASQ,SACTtiB,KAEJ,OACE,oCACE,kBAACgf,GAAD,CACEjR,QAAS4T,EACT1C,kBAAmBA,EACnBC,oBA9DsB,SAAC10B,GAI3B,GAHyBrB,EAAmB8V,MAC1C,SAACxG,GAAD,OAAOA,EAAEjQ,WAAagC,EAAKhC,YAG3B3F,GAAO,CACLoJ,QAAQ,gDACRG,KAAM,cAHV,CAQA,IAAMm2B,EAAc,SAAC9pB,GACnBzS,QAAQC,IAAR,wBAA6BuE,EAAKhC,SAAlC,oBAAsDiQ,IACtD5V,GAAO,CACLoJ,QAAQ,wBAAD,OAA0BzB,EAAKhC,UACtC4D,KAAM,WAIV,IACqB,IAAI9C,aAAWkB,EAAKhC,SAAU,UAE9Cg6B,eACA1iB,MAAK,SAAC5P,GACL2xB,GAAqB,GACrB77B,QAAQC,IAAR,gCAAqCuE,EAAKhC,WAC1C,IAAMi6B,EAAkB,sBACnBt5B,EAAmBnG,QAAO,SAACyV,GAAD,OAAOA,EAAEhQ,WADhB,CAEtB+B,IAEFxB,EAAYwB,EAAKhC,UACjBU,EAAmBu5B,MAEpB1iB,MAAMwiB,GACT,MAAO9pB,GACP8pB,EAAY9pB,GAhBd,QAkBEopB,GAAqB,MAyBnBhU,QAAS,kBAAM+T,GAAsB,MAEvC,kBAAC,GAAD,KACE,kBAACJ,GAAD,CAAarZ,QAAS,kBAAM2O,EAAQ/zB,KAAKs/B,KACvC,yBAAKK,IAAKC,KAAMC,IAAI,KACnB,SAEH,kBAAC,KAAD,CACEC,KAAK,aACL1a,QAAS+Z,EACTY,aAAc,CAAChB,EAASQ,UACxB3hC,MAAO,CACLoiC,aAAc,OACdt2B,gBAAiB,cACjBgd,QAAS,OACTE,WAAY,WACZxC,KAAM,IAGR,kBAAC,KAAK6b,KAAN,CAAWjjC,IAAKsiC,EAAc1hC,MAAO,CAAEsiC,OAAQ,kBAA/C,UAGEjB,GACA,kBAAC,KAAKgB,KAAN,CAAWjjC,IAAI,QAAQY,MAAO,CAAEsiC,OAAQ,WACtC,uBACEn3B,KAAM21B,GAAe,SACrB11B,OAAO,SACPC,IAAI,uBAHN,SASHmB,KAAe60B,GAAwC,cAAtBF,EAASQ,WACzC,kBAAC,KAAKU,KAAN,CAAWjjC,IAAI,YAAYY,MAAO,CAAEsiC,OAAQ,WAA5C,YAID91B,KAAe60B,GAAwC,YAAtBF,EAASQ,WACzC,kBAAC,KAAKU,KAAN,CAAWjjC,IAAI,UAAUY,MAAO,CAAEsiC,OAAQ,WAA1C,UAID91B,KAAe60B,GAAwC,aAAtBF,EAASQ,WACzC,kBAAC,KAAKU,KAAN,CAAWjjC,IAAI,WAAWY,MAAO,CAAEsiC,OAAQ,WAA3C,aAICjB,GAAwC,qBAAtBF,EAASQ,WAC5B,kBAAC,KAAKU,KAAN,CAAWjjC,IAAI,mBAAmBY,MAAO,CAAEsiC,OAAQ,WAAnD,eAIAjB,GACA,kBAAC,KAAKkB,QAAN,CACEjZ,MAAM,QACNkZ,aAAc,kBACZ7L,OAAOwJ,KAAKW,GAAe,UAAW,WAExC9gC,MAAO,CAAEsiC,OAAQ,iBAEjB,kBAAC,KAAKD,KAAN,CAAWjjC,IAAI,eACb,uBACE+L,KAAM21B,GAAe,eACrB11B,OAAO,SACPC,IAAI,uBAHN,oBAQF,kBAAC,KAAKg3B,KAAN,CAAWjjC,IAAI,mBACb,uBACE+L,KAAM21B,GAAe,mBACrB11B,OAAO,SACPC,IAAI,uBAHN,sBAQF,kBAAC,KAAKg3B,KAAN,CAAWjjC,IAAI,aACb,uBACE+L,KAAM21B,GAAe,aACrB11B,OAAO,SACPC,IAAI,uBAHN,aAQF,kBAAC,KAAKg3B,KAAN,CAAWjjC,IAAI,wBACb,uBACE+L,KAAM21B,GAAe,wBACrB11B,OAAO,SACPC,IAAI,uBAHN,wBAQF,kBAAC,KAAKg3B,KAAN,CAAWjjC,IAAI,aACb,uBACE+L,KAAM21B,GAAe,aACrB11B,OAAO,SACPC,IAAI,uBAHN,0BAQF,kBAAC,KAAKg3B,KAAN,CAAWjjC,IAAI,YACb,uBACE+L,KAAM21B,GAAe,YACrB11B,OAAO,SACPC,IAAI,uBAHN,cAWR,yBACErL,MAAO,CACL8oB,QAAS,OACTE,WAAY,SACZkK,aAAc,IAGhB,kBAAC6L,GAAD,CACEqB,QAAS,kBAAMkB,GAAkB,IACjCjB,OAAQ,kBAAMiB,GAAkB,IAChC7B,SAAU4B,EACVzT,MAAOyT,EAAiB,QAAU,UAGtC,6BACE,kBAAC,KAAD,CACEjS,MAAM,SACNpvB,MAAO,CAAEw3B,YAAa,EAAGtE,aAAc,GACvC4C,OAAQ,IAER,kBAAC,KAAD,KACE,kBAAC6B,GAAA,EAAD,CACE33B,MAAO,CAAE2L,MAAO,WAChB6b,QAAS,kBAAMyZ,GAAsB,OAGzC,kBAAC,KAAD,KACE,kBAAC,KAAD,CACEhS,QAASpnB,EACT6D,UAAU,cACV4d,MAAM,MACN4F,QAAQ,SAER,kBAACC,GAAA,EAAD,CAAoBnvB,MAAO,CAAE2L,MAAO,eAGxC,kBAAC,KAAD,KACE,kBAAC,KAAD,CACEkiB,SAAUxlB,EACVjI,MAAOyH,EACP7H,MAAO,CAAEmoB,YAAa,EAAGyF,MAAO,UAE/BplB,EAAmBlC,KAAI,gBAAGsB,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAT,OACtB,kBAAC,KAAOkmB,OAAR,CAAe3tB,MAAOyH,EAAUzI,IAAKyI,GAClCD,UAOZ4E,GACC,6BACE,kBAAC,KAAD,CACEyiB,QAAS,kBAACkP,GAAD,CAAUD,YAAW,OAAE5xB,QAAF,IAAEA,OAAF,EAAEA,EAAQ4xB,cACxCxyB,UAAU,cACV4d,MAAM,WACN4F,QAAQ,SAER,kBAAC,KAAD,CAAQlvB,MAAO,CAAEmoB,YAAa,IAC5B,kBAACsa,GAAA,EAAD,MADF,cAON,6BACE,kBAAC,KAAD,CAAQ5U,SAAU7gB,EAAa5M,MAAO+L,GACnCJ,GAAiBzF,KAAI,gBAAGsB,EAAH,EAAGA,KAAMoE,EAAT,EAASA,IAAT,OACpB,kBAAC,KAAO+hB,OAAR,CAAe3tB,MAAO4L,EAAK5M,IAAK4M,GAC7BpE,QAKT,6BACE,kBAAC4zB,GAAD,S,cC7UGkH,GAIF,6BAJEA,GAKD,4BALCA,GAMH,mCANGA,GAOG,4BAPHA,GAQS,+CARTA,GASE,yBCLPC,GAAWC,KAAXD,OACAE,GAAkBC,KAAlBD,cAEFE,GAAiB,CACrB,CACEx3B,YAAa,4BACby3B,KAAMN,IAER,CAAEn3B,YAAa,UAAWy3B,KAAMN,IAChC,CAAEn3B,YAAa,WAAYy3B,KAAMN,IACjC,CAAEn3B,YAAa,SAAUy3B,KAAMN,IAC/B,CAAEn3B,YAAa,gBAAiBy3B,KAAMN,IACtC,CAAEn3B,YAAa,iBAAkBy3B,KAAMN,KAG5BO,GAAe,WAC1B,IAAM3d,GAAeud,KAAgBK,GAErC,OACE,kBAACP,GAAD,CACE3iC,MAAO,CACL+kB,OAAQ,OACRsK,cAAe,GACf9C,WAAY,KAGd,kBAAC,KAAD,CAAK6C,MAAM,SAAS0G,OAAQ,CAAC,GAAI,KAC7BxQ,GACA,oCACE,kBAAC,KAAD,CAAKkB,KAAK,SACTuc,GAAez8B,KAAI,SAAC68B,EAAM9c,GACzB,OACE,kBAAC,KAAD,CAAKjnB,IAAKinB,EAAQ,IAChB,kBAACvb,GAAD,CAAMC,UAAQ,EAACE,GAAIk4B,EAAKH,MACrBG,EAAK53B,kBAOlB,kBAAC,KAAD,CAAKib,KAAK,YCzCV4c,GAAoBR,KAApBQ,OAAQC,GAAYT,KAAZS,QAED,SAASC,GAAT,GAAoC,IAAbl7B,EAAY,EAAZA,SACpC,OACE,kBAAC,IAAMulB,SAAP,KACE,kBAAC,KAAD,CACE3tB,MAAO,CAAE8oB,QAAS,OAAQkK,UAAW,QAASjB,cAAe,WAE7D,kBAACqR,GAAD,CAAQpjC,MAAO,CAAE6oB,QAAS,EAAGmK,UAAW,GAAIjO,OAAQ,UAClD,kBAACgc,GAAD,OAEF,kBAACsC,GAAD,CAASrjC,MAAO,CAAEwmB,KAAM,IAAMpe,GAC9B,kBAAC,GAAD,Q,iCCDD,SAASm7B,GACd37B,EACA6lB,EACA+V,GACkC,IAAD,EACHvhC,mBAAS,IADN,mBAC1BoB,EAD0B,KACjBogC,EADiB,OAEH35B,EAC5B3K,EAAiBkE,GAAW,IAAIhE,YAAUgE,GAAW,MAHtB,mBAE1B4G,EAF0B,KAEb1C,EAFa,KAM3BmzB,EAAgB9e,KAChByjB,EAAUn8B,mBAAQ,WACtB,OAAOY,OAAO+Y,QAAQ6d,GACnBr4B,QACC,mCAAEwf,EAAF,KAAe6hB,EAAf,YACE7hB,EAAYke,SAAS18B,IACrBqgC,EAAOpL,cAAcyH,SAAS18B,EAAQi1B,kBAEzChyB,KAAI,mCAAEub,EAAF,KAAe6hB,EAAf,WAA4B,CAC/BtjC,MAAOyhB,EACP4L,MACE,oCACGiW,EADH,KACa7hB,EADb,WAKL,CAAC6Y,EAAer3B,IAtBc,EAwBuBH,mBAAQ,WAC9D,IAAIygC,EAAiC,GACjCC,GAAc,EACdC,EAAsB,KACtBtJ,EAA4B,KAChC,GAAIl3B,EAEF,GADAugC,GAAc,EACV35B,EACF,GACEA,EAAY2E,MAAMvE,OAAO4D,qBAAkBC,mBACf,KAA5BjE,EAAY7E,KAAKtE,OACjB,CACA,IAAIgjC,EAASvpB,GAAmBtQ,EAAY7E,MACxC0+B,EAAOtpB,aACTmpB,EAAiB,UACjBpJ,EAAW,CACTl3B,QAAS,IAAIhE,YAAUgE,GACvBhD,SAAUyjC,EAAOzjC,YAGnBsjC,EAAiB,QACjBE,EAAO,yBAGTF,EAAiB,QACjBE,EAAO,gCAEA1kC,EAAiBkE,KAAakE,EACvCo8B,EAAiB,cAEjBA,EAAiB,QACjBE,EAAO,0BAGX,MAAO,CAAEF,iBAAgBC,cAAaC,OAAMtJ,cAC3C,CAACl3B,EAAS4G,EAAa1C,IAnClBo8B,EAxByB,EAwBzBA,eAAgBC,EAxBS,EAwBTA,YAAaC,EAxBJ,EAwBIA,KAAMtJ,EAxBV,EAwBUA,SAmE3C,MAAO,CA7BL,kBAAC,KAAK8H,KAAN,CACE5U,MACE,kBAAC,KAAD,CACEnE,MACE,oCACGka,EADH,2CACoD,IAClD,kBAAC14B,GAAD,CAAMC,UAAQ,EAACE,GAAG,qBAAlB,aAFF,MASDwiB,GAGL7lB,KAAMA,EACN+7B,eAAgBA,EAChBC,YAAaA,EACbC,KAAMA,GAEN,kBAAC,KAAD,CACExE,QAASA,EACTj/B,MAAOiD,EACP4uB,SAAU,SAAC7xB,GAAD,OAAWqjC,EAAWrjC,OAKvBm6B,G,6LCnGTvM,GAAgB5gB,KAAhB4gB,KAAM7gB,GAAUC,KAAVD,MAERwX,GAAUC,KAAOzjB,IAAV,MAQE,SAAS4iC,KACtB,IAyCIjvB,EACAC,EA1CErM,EAAaW,IADuB,EAEZ0D,KAAtBT,EAFkC,EAElCA,OAAQE,EAF0B,EAE1BA,UAF0B,EAGJ+2B,GACpC,WACA,kBAAC,GAAD,+BAC0B,IACxB,kBAAC,GAAD,CAAM93B,KAAK,aAAX,4BAC4B,IAExB,kBAAC,GAAD,CAAMA,KAAK,YAAYwiB,MAAI,GAA3B,gDAHJ,MAUF,sGAjBwC,mBAGnC+V,EAHmC,KAGpBnJ,EAHoB,OAmBF0I,GACtC,YACA,kBAAC,GAAD,gCAC2B,IACzB,kBAAC,GAAD,CAAM93B,KAAK,aAAX,6BAC6B,IAEzB,kBAAC,GAAD,CAAMA,KAAK,YAAYwiB,MAAI,GAA3B,gDAHJ,MAUF,iHAjCwC,mBAmBnCgW,EAnBmC,KAmBnBjJ,EAnBmB,OAmCZ/4B,mBAAS,KAnCG,mBAmCnCiiC,EAnCmC,KAmC1BC,EAnC0B,OAoCVliC,mBAAS,QApCC,mBAoCnCqR,EApCmC,KAoCzB8wB,EApCyB,KAqCpCzvB,EAAe8I,WAAQ7T,MAAK,qBAAGsU,cAA8B5P,UArCzB,EAsCNrM,oBAAS,GAtCH,mBAsCnC0uB,EAtCmC,KAsCvBC,EAtCuB,OAwCF3uB,mBAAS,MAxCP,mBAwCnCoiC,EAxCmC,KAwCrBC,EAxCqB,KA4CtCzJ,GAAgBlJ,WAAWuS,GAAW,IACxCpvB,EAAcxU,KAAKG,MAAM,YAAMo6B,EAAax6B,UAAWsxB,WAAWuS,IAC9DlJ,GAAiBrJ,WAAWre,GAAY,IAC1CyB,EAAezU,KAAKG,MAClBkxB,WAAWuS,GAAX,SACE,GAAMlJ,EAAc36B,UACpBsxB,WAAWre,MAKnB,IAAMkiB,EACJhpB,KACEquB,KACAG,KACAlmB,KACAC,EA5DsC,4CA8D1C,4BAAAvV,EAAA,yDACOg2B,EADP,wDAIE5E,GAAc,GAJhB,kBAMgCxc,GAAW,CACrC1L,aACA4D,SACAuF,SAAUgpB,EAAax3B,QACvByO,UAAWkpB,EAAc33B,QACzByR,cACAC,eACAJ,iBAbN,OAMU4I,EANV,OAeI+mB,EAAgB/mB,GAfpB,kDAiBIlY,QAAQI,KAAR,MACAvD,GAAO,CACLoJ,QAAS,2BACTC,YAAa,KAAED,QACfG,KAAM,UArBZ,yBAwBImlB,GAAc,GAxBlB,8EA9D0C,sBA0F1C,OACE,kBAAC,GAAD,KACE,kBAAC/L,GAAD,KACE,kBAAC,GAAD,CAAOtX,MAAO,GAAd,mBACA,kBAAC,KAAD,CACEg3B,SAAU,CAAE1uB,KAAM,IAClB2uB,WAAY,CAAE3uB,KAAM,IACpB4uB,OAAQ,WACRC,SAlGkC,4CAoGjCV,EACAC,EACD,kBAAC,KAAK5B,KAAN,CACE5U,MACE,kBAAC,KAAD,CAASnE,MAAM,sFAAf,qBACqB,IACnB,kBAAC,GAAD,CAAM7d,KAAK,aAAX,2BAGJ7D,KAAK,UACL+8B,aAAa,IACbhB,eACE9I,GAAgBG,EACZlmB,EACE,UACA,QACF,KAEN8uB,YAAa/I,GAAgBG,GAE7B,kBAAC,KAAD,CACE56B,MAAO8jC,EACPjS,SAAU,SAACna,GAAD,OAAOqsB,EAAWrsB,EAAE1M,OAAOhL,MAAMwkC,SAC3Cn5B,KAAK,SACL9F,IAAI,IACJ8N,KAAK,SAGT,kBAAC,KAAK4uB,KAAN,CACE5U,MACE,kBAAC,KAAD,CAASnE,MAAM,oGAAf,YACY,IACV,kBAAC,GAAD,CAAM7d,KAAK,aAAX,mCAGJ7D,KAAK,WACL+8B,aAAa,OACbhB,eACE9I,GAAgBG,EACZjmB,EACE,UACA,QACF,KAEN6uB,YAAa/I,GAAgBG,GAE7B,kBAAC,KAAD,CACE56B,MAAOkT,EACP2e,SAAU,SAACna,GAAD,OAAOssB,EAAYtsB,EAAE1M,OAAOhL,MAAMwkC,SAC5Cn5B,KAAK,SACL9F,IAAI,IACJ8N,KAAK,SAGT,kBAAC,KAAK4uB,KAAN,CAAW5U,MAAM,IAAIoX,OAAO,GAC1B,kBAAC,KAAD,CACEp5B,KAAK,UACLq5B,SAAS,SACTlS,UAAW4C,EACX9M,QAASiI,GAERnkB,EAAY,SAAW,8BAK/B63B,EACC,kBAACxf,GAAD,KACE,kBAAC,GAAD,4BAA2Bwf,EAAa7gC,aAExC,M,iUCxKFwqB,GAAgB5gB,KAAhB4gB,KAAM7gB,GAAUC,KAAVD,MAERwX,GAAUC,KAAOzjB,IAAV,MAQP4jC,GAAwBngB,KAAOzjB,IAAV,MAKrB6jC,GAAyB,+CAGzBC,GADJ,8CAEIC,GAAqB,CACzB,CACEzX,MAAM,gBAAD,OAAkBuX,GAAlB,KACL5kC,MAAO4kC,IAET,CACEvX,MAAM,0BAAD,OARP,8CAQO,KACLrtB,MATF,gDAaa,SAAS+kC,KACtB,IAAMz8B,EAAaW,IADiB,EAEN0D,KAAtBT,EAF4B,EAE5BA,OAAQE,EAFoB,EAEpBA,UAFoB,EAGJvK,mBAAS,IAHL,mBAG7BmjC,EAH6B,KAGnBC,EAHmB,OAIFpjC,mBAASgjC,IAJP,mBAI7B32B,EAJ6B,KAIlBg3B,EAJkB,OAKMrjC,mBAAS,KALf,mBAK7BsjC,EAL6B,KAKdC,EALc,OAMMvjC,mBAAyB,CACjE,CAAEwjC,OAAO,GACT,CAAEA,OAAO,KARyB,mBAM7BC,EAN6B,KAMdC,EANc,OAUU1jC,oBAAS,GAVnB,mBAU7B2jC,EAV6B,KAUZC,EAVY,OAWI5jC,mBAAS,IAXb,mBAW7B6jC,EAX6B,KAWfC,EAXe,OAYZzpB,KAAjB7L,EAZ6B,sBAaAxO,oBAAS,GAbT,mBAa7B0uB,EAb6B,KAajBC,EAbiB,OAcQ3uB,mBAA2B,MAdnC,mBAc7B+jC,EAd6B,KAcbC,EAda,KAgBpC9jC,qBAAU,WACJmM,IAAc02B,GAChBa,GAAmB,GA/BvB,gDAgCav3B,GACTu3B,GAAmB,KAEpB,CAACv3B,IAEJnM,qBAAU,WACJqK,GACFu5B,EAAgBz5B,EAAOtD,UAAUxF,cAElC,CAAC8I,EAAQE,IAEZ,IAAMgpB,EACJhpB,GACA44B,EAASR,QACTt2B,GACAqjB,WAAW4T,GAAiB,GAC5BG,EAActqB,OAAM,SAAC8qB,GAAD,OAAWA,EAAMT,UACrCh1B,IACCq1B,IAAiBF,GArCgB,4CAuCpC,4CAAApmC,EAAA,yDACOg2B,EADP,wDAIE5E,GAAc,GAJhB,SAMUuV,EAAST,EANnB,SAUcU,oBAAiBC,qBAAqB,CAC9C39B,aACA4F,UAAW,IAAIjP,YAAUiP,GACzB82B,WACAkB,eAAgB,KAChBC,iBAAkB,EAClBC,sBAAuB,IAAI/kC,IACzBnB,KAAKG,MAAM,YAAM,GAAIkxB,WAAW4T,KAElCkB,WAAYN,EAAO7/B,KAAI,SAAC4/B,GAAD,OAAWA,EAAMv3B,QACxC+3B,uBAAwBP,EAAO7/B,KAAI,SAAC4/B,GAAD,OAAW,IAAIzkC,IAAGykC,EAAMS,aAC3DC,QAASt6B,EAAOtD,UAChB69B,cAAeV,EAAO7/B,KAAI,SAAC4/B,GACzB,IAAMY,EAAK,OAAGr2B,QAAH,IAAGA,OAAH,EAAGA,EAAe7G,MAAK,SAACm9B,GAAD,OAChCA,EAAarrB,cAAcrR,OAAO67B,EAAMv3B,SAE1C,IAAKm4B,EACH,MAAM,IAAIt9B,MAAM,wBAA0B08B,EAAMv3B,KAAKnL,YAEvD,OAAOsjC,EAAM13B,UAEf43B,mBAAoBpB,EAChB,CACE,CACEx2B,OAAQ,IAAI/P,YAAUymC,GACtBmB,UAAU,EACVC,YAAY,IAGhB,KAvCV,0CAQMC,EARN,KASMlxB,EATN,eAyCyBD,GAAiB,CACpCC,yBACA3J,SACA5D,eA5CN,QAyCU0+B,EAzCV,qBA8CkCA,GA9ClC,kEA8CajxB,EA9Cb,kBA+CYC,GAAsB,CAAED,oBAAmBzN,eA/CvD,iJAiDIu9B,EAAkBkB,GAjDtB,kDAmDI9hC,QAAQI,KAAR,MACAvD,GAAO,CACLoJ,QAAS,0BACTC,YAAa,KAAED,QACfG,KAAM,UAvDZ,yBA0DImlB,GAAc,GA1DlB,4FAvCoC,sBAqGpC,OACE,kBAAC,GAAD,KACE,kBAAC/L,GAAD,KACE,kBAAC,GAAD,CAAOtX,MAAO,GAAd,mBACA,kBAAC,KAAD,CAAMk3B,OAAO,WAAWC,SAzGM,4CA0G5B,kBAAC,KAAKrC,KAAN,CACE5U,MACE,kBAAC,KAAD,CAASnE,MAAM,4BAAf,aAEF1hB,KAAK,QAEL,kBAAC,KAAD,CACExH,MAAOglC,EACPnT,SAAU,SAACna,GAAD,OAAOutB,EAAYvtB,EAAE1M,OAAOhL,WAG1C,kBAAC,KAAKiiC,KAAN,CACE5U,MACE,kBAAC,KAAD,CAASnE,MAAM,gCAAf,aACa,IACX,kBAAC,GAAD,CAAM7d,KAAK,aAAX,SAA8Bw5B,GAA9B,MAGJr9B,KAAK,YACL+8B,aAAcM,IAEd,kBAAC,KAAD,CACE7kC,MAAOkO,EACP2jB,SAAU,SAAC7xB,GAAD,OAAWklC,EAAallC,IAClCi/B,QAAS6F,MAGb,kBAAC,KAAK7C,KAAN,CACE5U,MACE,kBAAC,KAAD,CAASnE,MAAM,0DAAf,6BAIF1hB,KAAK,gBACL+8B,aAAa,KAEb,kBAAC,KAAD,CACEvkC,MAAOmlC,EACPtT,SAAU,SAACna,GAAD,OAAO0tB,EAAiB1tB,EAAE1M,OAAOhL,MAAMwkC,SACjDn5B,KAAK,SACL9F,IAAI,IACJ8N,KAAK,SAGT,kBAACsxB,GAAD,KACE,kBAAC,KAAD,CACEvd,QAAS,kBACPme,GAAiB,SAACQ,GAAD,OAAYA,EAAO19B,OAAO,CAAEg9B,OAAO,SAFxD,aAMU,IACV,kBAAC,KAAD,CACEje,QAAS,kBACPme,GAAiB,SAACQ,GAAD,OAAYA,EAAO1iC,MAAM,EAAG0iC,EAAOrlC,OAAS,OAE/D8xB,SAAU8S,EAAc5kC,QAAU,GAJpC,iBASD4kC,EAAcp/B,KAAI,SAAC4/B,EAAO7+B,GAAR,OACjB,kBAACggC,GAAD,CAAY1B,iBAAkBA,EAAkBtf,MAAOhf,EAAGjI,IAAKiI,OAEjE,kBAAC,KAAKg7B,KAAN,CACE5U,MACE,kBAAC,KAAD,CAASnE,MAAM,uEAAf,oBAIF1hB,KAAK,mBAEL,kBAAC,KAAD,CACE+qB,QAASiT,EACT3T,SAAU,SAACU,GAAD,OAAakT,EAAmBlT,IAC1CC,SACEtkB,IAAc02B,IAnM5B,gDAoMc12B,KAILs3B,EACC,kBAAC,KAAKvD,KAAN,CACE5U,MACE,kBAAC,KAAD,CAASnE,MAAM,sCAAf,kBAKF,kBAAC,KAAD,CACElpB,MAAO0lC,EACP7T,SAAU,SAACna,GAAD,OAAOiuB,EAAgBjuB,EAAE1M,OAAOhL,MAAMwkC,YAGlD,KACJ,kBAAC,KAAKvC,KAAN,CAAW5U,MAAM,IAAIoX,OAAO,GAC1B,kBAAC,KAAD,CACEp5B,KAAK,UACLq5B,SAAS,SACTlS,UAAW4C,EACX9M,QAASiI,GAERnkB,EAAY,SAAW,8BAK/Bw5B,EACC,kBAACnhB,GAAD,KACE,kBAAC,GAAD,yBACoB,IAClB,kBAAC/Z,GAAD,CAAMG,GAAE,iBAAY+6B,EAAexiC,aAChCwiC,EAAexiC,cAIpB,MAYV,SAAS6jC,GAAT,GAAkD,IAA5B1B,EAA2B,EAA3BA,iBAAkBtf,EAAS,EAATA,MAAS,EACjBkd,GAAa,OAAD,OACjCld,GACP,kBAAC,GAAD,cAAaA,EAAQ,EAArB,iBACA,oEAAgCA,EAAQ,EAAxC,MAJ6C,mBACxCihB,EADwC,KAC7B/M,EAD6B,OAMft4B,mBAAS,IANM,mBAMxC0kC,EANwC,KAM9BY,EAN8B,KA2B/C,OAnBAplC,qBAAU,WACR,IAAIqlC,EACJ,GAAIjN,GAAY5I,WAAWgV,IAAa,EAAG,CACzC,IAAIc,EAAiBnnC,KAAKG,MACxB,YAAM85B,EAASl6B,UAAWsxB,WAAWgV,IAEvCa,EAAS,CACP74B,KAAM4rB,EAASl3B,QACfsjC,SAAUc,EACVhC,OAAO,QAGT+B,EAAS,CAAE/B,OAAO,GAEpBE,GAAiB,SAACQ,GAAD,OACfA,EAAO7/B,KAAI,SAACohC,EAAKrgC,GAAN,OAAaA,IAAMgf,EAAQmhB,EAASE,UAEhD,CAAC/B,EAAkBtf,EAAOkU,EAAUoM,IAGrC,oCACGW,EACD,kBAAC,KAAKjF,KAAN,CACE5U,MACE,kBAAC,KAAD,CACEnE,MACE,iEAC6BjD,EAAQ,EADrC,+BAFJ,SAOSA,EAAQ,EAPjB,qBAUFze,KAAI,kBAAaye,GACjBsd,eAAgB,WAEhB,kBAAC,KAAD,CACEvjC,MAAOumC,EACP1U,SAAU,SAACna,GAAD,OAAOyvB,EAAYzvB,EAAE1M,OAAOhL,MAAMwkC,SAC5Cn5B,KAAK,SACL9F,IAAI,IACJ8N,KAAK,U,cCzUR,SAASk0B,GAAT,GAMH,IAAD,EALDh5B,EAKC,EALDA,KAKC,IAJDi5B,mBAIC,SACKlN,EAAgB9e,KACtB,IAAKjN,EACH,OAAO,KAET,IAAMk5B,EAA0B,kBAATl5B,EAAoB,IAAItP,YAAUsP,GAAQA,EAC3DkT,EAA8B,kBAATlT,EAAoBA,EAAOA,EAAKnL,WACrDkgC,EAAM,UAAGhJ,EAAc7Y,UAAjB,QAAiCze,EAAkBykC,GAE/D,OACE,oCACGnE,EACAkE,EACC,oCACG,IACD,kBAAC,KAAD,CACE3Y,QAAS,kBAACV,GAAD,CAAalrB,QAASwe,IAC/BnW,UAAU,cACV4d,MAAM,aACN4F,QAAQ,SAER,kBAACC,GAAA,EAAD,CAAoBnvB,MAAO,CAAE2L,MAAO,eAGtC,MCxBK,SAASm8B,GAAT,GAGS,IAFtBC,EAEqB,EAFrBA,SACAC,EACqB,EADrBA,OAEA,OACE,4BACGD,EAASjmC,MAAMqkC,OAAO7/B,KAAI,SAAC4/B,EAAO7f,GAAR,OACzB,kBAAC4hB,GAAD,CACE7oC,IAAKinB,EACL1X,KAAMu3B,EAAMv3B,KACZg4B,SAAQ,OAAEqB,QAAF,IAAEA,OAAF,EAAEA,EAAQE,WAAW7hB,SAYvC,SAAS4hB,GAAT,GAA0D,IAApCt5B,EAAmC,EAAnCA,KAAMg4B,EAA6B,EAA7BA,SAA6B,EAC7B78B,EAAe6E,GAAlCw5B,EADgD,oBAEnDC,EAAkB,kBAAC,KAAD,CAAM9kC,KAAK,UACjC,GAAI6kC,GAAmBxB,EAAU,CAC/B,IAAMpM,EAAWhgB,GAAmB4tB,EAAgB/iC,MACpDgjC,EAAkB,oCAAGzB,EAASvlC,WAAT,SAAsB,GAAMm5B,EAASl6B,WAG5D,OACE,4BACG+nC,EADH,IACoB,kBAACT,GAAD,CAAUh5B,KAAMA,EAAMi5B,aAAW,K,ICpCjD5Z,GAAoB5gB,KAApB4gB,KAAM7B,GAAc/e,KAAd+e,UAORkc,GAAY,IAAIxoC,KAAKC,kBAAaC,EAAW,CACjDC,MAAO,UACPC,sBAAuB,EACvBC,sBAAuB,IAGV,SAASooC,GAAT,GAA+D,IAAtCP,EAAqC,EAArCA,SAAUxN,EAA2B,EAA3BA,SAC1C7xB,EAAaW,IADwD,EAGrDnC,GACpB,kBAAMqhC,yBAAc7/B,EAAYq/B,EAAU,CAAES,OAAQjO,EAAS9f,WAC7D1Q,YAAMw+B,iBAAe7/B,EAAYq/B,EAAU,QAASxN,IAF/CkO,EAHoE,oBAQ3E,OACE,kBAAC5jB,GAAD,CAAiBC,iBAAe,GAC9B,kBAAC,GAAD,cAAkBijB,EAASjmC,MAAM8F,MACjC,kBAAC,GAAD,iBACW,kBAAC,GAAD,CAAM8gC,UAAQ,GAAEX,EAAS1kC,QAAQG,aAE5C,kBAAC,GAAD,gCAC2B,IACzB,kBAAC,GAAD,CAAMklC,UAAQ,GAAEX,EAASjmC,MAAM6mC,cAAcnlC,aAE9CukC,EAASjmC,MAAM8mC,SACd,kBAAC,GAAD,oBACc,kBAAC,GAAD,CAAMF,UAAQ,GAAEX,EAASjmC,MAAM8mC,SAASplC,aAEpD,KACJ,kBAAC,GAAD,kBACa6kC,GAAU3c,OAAOqc,EAASjmC,MAAM+mC,QAAU,MAEvD,kBAAC,GAAD,sBACiBtO,EAAS9f,OAAOrZ,WAAhB,SAA6B,GAAMm5B,EAASl6B,WAE7D,kBAAC,GAAD,sBACA,6BACE,kBAACynC,GAAD,CAAmBC,SAAUA,EAAUC,OAAQS,M,ICtC/Cza,GAAS5gB,KAAT4gB,KACA5B,GAAYC,KAAZD,QAOO,SAAS0c,GAAT,GAGY,IAFzBf,EAEwB,EAFxBA,SACAxN,EACwB,EADxBA,SAEA,OACE,kBAAC1V,GAAD,CAAiBC,iBAAe,GAC9B,kBAAC,KAAD,KACE,kBAAC,GAAD,CAAS2H,IAAI,SAASrtB,IAAI,UACxB,kBAAC2pC,GAAD,CACEhB,SAAUA,EACVxN,SAAUA,EACV9N,IAAI,YAGR,kBAAC,GAAD,CAASA,IAAI,SAASrtB,IAAI,UACxB,kBAAC2pC,GAAD,CACEhB,SAAUA,EACVxN,SAAUA,EACV9N,IAAI,cAchB,SAASsc,GAAT,GAA+E,IAApDhB,EAAmD,EAAnDA,SAAUxN,EAAyC,EAAzCA,SAAU9N,EAA+B,EAA/BA,IACvC/jB,EAAaW,IADyD,EAE9C0D,KAAtBT,EAFoE,EAEpEA,OAAQE,EAF4D,EAE5DA,UAF4D,EAG5CvK,mBAAS,IAHmC,mBAGrE0kC,EAHqE,KAG3DY,EAH2D,OAIpDjrB,KAAjB7L,EAJqE,sBAKxCxO,oBAAS,GAL+B,mBAKrE0uB,EALqE,KAKzDC,EALyD,KAOtEoY,EAAS9lC,mBAAQ,WACrB,IAAMukC,EAAiBnnC,KAAKG,MAC1BkxB,WAAWgV,GAAX,SAAuB,GAAMpM,EAASl6B,WAExC,OAAIonC,EAAiB,EACP,WAARhb,EACK,CAAEwc,OAAQ,IAAIxnC,IAAGgmC,IAEjB,CAAEe,OAAQ,IAAI/mC,IAAGgmC,IAGrB,OACN,CAAClN,EAASl6B,SAAUsmC,EAAUla,IAnB2C,EAqB7CvlB,EAAY,sBACzC,sBAAA1H,EAAA,0DACEwpC,EADF,gCACiBT,yBAAc7/B,EAAYq/B,EAAUiB,GADrD,8CAC+D,KAD/D,iFAEAj/B,YAAMw+B,iBAAe7/B,EAAYq/B,EAAS1kC,QAAQG,WAAYwlC,IAxBY,mBAqBrEhB,EArBqE,KAqB7DkB,EArB6D,KA2B5E,SAASC,EAAiBx6B,GACxB,IAAMD,EAAO,OAAG+B,QAAH,IAAGA,OAAH,EAAGA,EAAe7G,MAAK,SAAC8E,GAAD,OAClCA,EAAQgN,cAAcrR,OAAOsE,MAE/B,GAAID,EACF,OAAOA,EAAQU,OAEjB,MAAM,IAAI5F,MAAM,wBAA0BmF,EAAKnL,YAGjD,IAAMgyB,EAAYhpB,GAAaw8B,GAAUhB,EArCmC,4CAuC5E,WAAwBlwB,GAAxB,mBAAAtY,EAAA,yDACEsY,EAAEsxB,iBACGJ,GAAWhB,GAAWx7B,GAAcgpB,EAF3C,wDAKE5E,GAAc,GALhB,WAOqCwV,oBAAiBiD,QAChDtB,EACAiB,EACA,CACEp6B,MAAOtC,EAAOtD,UACdsgC,iBAAkBH,EAAiBpB,EAASjmC,MAAM6mC,eAClDY,cAAexB,EAASjmC,MAAMqkC,OAAO7/B,KAAI,SAAC4/B,GAAD,OACvCiD,EAAiBjD,EAAMv3B,UAG3Bq5B,GAVMn6B,EAPZ,EAOYA,YAAauC,EAPzB,EAOyBA,QAPzB,SAmBUE,GAAgB,CAAE5H,aAAY4D,SAAQuB,cAAauC,YAnB7D,yDAqBI/K,QAAQI,KAAR,MACAvD,GAAO,CACLoJ,QACE,UACS,WAARmhB,EAAmB,WAAa,aACjC,eACFlhB,YAAa,KAAED,QACfG,KAAM,UA5BZ,yBA+BImlB,GAAc,GA/BlB,8EAvC4E,sBA0E5E,OACE,0BAAMkB,SA3EoE,6CA4ExE,kBAAC,KAAD,CACEM,YAAa,gDACbhyB,MAAOumC,EACP1U,SAAU,SAACna,GAAD,OAAOyvB,EAAYzvB,EAAE1M,OAAOhL,MAAMwkC,SAC5C5kC,MAAO,CAAEunB,aAAc,MAEzB,6BACIygB,EAKA,oCACE,kBAAC,GAAD,KAAe,WAARvb,EAAmB,OAAS,WAAnC,MACA,kBAAC,GAAD,CAAMhhB,KAAK,aAAX,qBACA,kBAACq8B,GAAD,CAAmBC,SAAUA,EAAUC,OAAQA,KAPjDkB,EAAe,KACb,kBAAC,KAAD,OAUN,kBAAC,KAAD,CACEpE,SAAS,SACTr5B,KAAK,UACLmnB,UAAW4C,GAAa7E,GAEtBnkB,EAAqC,SAAzB,yB,IC7Id4f,GAAYC,KAAZD,QAEO,SAASod,GAAT,GAIX,IAHFzB,EAGC,EAHDA,SAIA,OACE,kBAACljB,GAAD,KACE,kBAAC,KAAD,KACE,kBAAC,GAAD,CAAS4H,IAAI,kBAAkBrtB,IAAI,UACjC,kBAACqqC,GAAD,CAAmB1B,SAAUA,KAE/B,kBAAC,GAAD,CAAStb,IAAI,gBAAgBrtB,IAAI,QAC/B,kBAACsqC,GAAD,CAAiB3B,SAAUA,OAOrC,SAAS0B,GAAT,GAAkE,IAArC1B,EAAoC,EAApCA,SAAoC,EACvCzrB,KAAjB7L,EADwD,oBAE/D,OACE,4BACG,CACCs3B,EAASjmC,MAAM6mC,eADhB,mBAEIZ,EAASjmC,MAAMqkC,OAAO7/B,KAAI,SAAC4/B,GAAD,OAAWA,EAAMv3B,UAC9CrI,KAAI,SAACqI,EAAM0X,GACX,IAAM0gB,EAAY,OAAGt2B,QAAH,IAAGA,OAAH,EAAGA,EAAe7G,MAAK,SAAC8E,GAAD,OACvCA,EAAQgN,cAAcrR,OAAOsE,MAE/B,OAAKo4B,EAIH,kBAAC4C,GAAD,CACEvqC,IAAKinB,EACL1X,KAAMA,EACN3F,UAAW+9B,EAAa33B,OACxBw6B,YAAaj7B,EAAKtE,OAAO09B,EAASjmC,MAAM6mC,iBAPnC,SAejB,SAASe,GAAT,GAAgE,IAArC3B,EAAoC,EAApCA,SACzB,OACE,4BACGA,EAASjmC,MAAMqkC,OAAO7/B,KAAI,SAAC4/B,EAAO7f,GACjC,OACE,kBAACsjB,GAAD,CACEvqC,IAAKinB,EACL1X,KAAMu3B,EAAMv3B,KACZ3F,UAAWk9B,EAAM2D,mBAc7B,SAASF,GAAT,GAA0E,IAAnDh7B,EAAkD,EAAlDA,KAAM3F,EAA4C,EAA5CA,UAAW4gC,EAAiC,EAAjCA,YAAiC,EAC7C9/B,EAAe6E,GAAlCw5B,EADgE,sBAE1Cr+B,EAAed,GAArC8gC,EAFgE,oBAGnE1B,EAAkB,kBAAC,KAAD,CAAM9kC,KAAK,UACjC,GAAI6kC,GAAmB2B,EAAoB,CACzC,IAAMvP,EAAWhgB,GAAmB4tB,EAAgB/iC,MACpD,GAAIuJ,EAAKtE,OAAOsR,qBACdysB,EACE,oCAAG0B,EAAmBx/B,SAAnB,SAA8B,GAAMiwB,EAASl6B,eAE7C,CACL,IAAM4J,EAAcmQ,GAAsB0vB,EAAmB1kC,MAC7DgjC,EAAkB,oCAAGn+B,EAAYqQ,OAAZ,SAAqB,GAAMigB,EAASl6B,YAI7D,OACE,4BACG+nC,EAAiB,IACjBwB,EACC,mDACc,kBAACjC,GAAD,CAAUh5B,KAAMA,IAD9B,KAIA,kBAACg5B,GAAD,CAAUh5B,KAAMA,IACf,IACH,kBAAC,KAAD,CACElD,KAAK,OACLqf,KAAM,kBAAC0D,GAAA,EAAD,MACNrjB,KAAM,uCAAyCnC,EAAUxF,WACzD4H,OAAO,SACPC,IAAI,yB,cCzFJ+gB,GAAYC,KAAZD,QACA2B,GAAWgI,KAAXhI,OAED,SAASgc,GAAT,GAA+D,IAArChC,EAAoC,EAApCA,SAC/B,OACE,kBAACljB,GAAD,KACE,kBAAC,KAAD,KACE,kBAAC,GAAD,CAAS4H,IAAI,gBAAgBrtB,IAAI,SAC/B,kBAAC4qC,GAAD,CAAiBjC,SAAUA,KAE7B,kBAAC,GAAD,CAAStb,IAAI,YAAYrtB,IAAI,YAC3B,kBAAC6qC,GAAD,CAAalC,SAAUA,KAEzB,kBAAC,GAAD,CAAStb,IAAI,eAAertB,IAAI,eAC9B,kBAAC8qC,GAAD,CAAgBnC,SAAUA,KAE5B,kBAAC,GAAD,CAAStb,IAAI,UAAUrtB,IAAI,WACzB,kBAAC+qC,GAAD,CAAYpC,SAAUA,KAExB,kBAAC,GAAD,CAAStb,IAAI,WAAWrtB,IAAI,YAC1B,kBAACgrC,GAAD,CAAarC,SAAUA,KAEzB,kBAAC,GAAD,CAAStb,IAAI,aAAartB,IAAI,aAC5B,kBAACirC,GAAD,CAActC,SAAUA,OAWlC,SAASiC,GAAT,GAAmD,IAAxBjC,EAAuB,EAAvBA,SACnBr/B,EAAaW,IAD6B,EAElB0D,KAAtBT,EAFwC,EAExCA,OAAQE,EAFgC,EAEhCA,UAFgC,EAGZvK,oBAAS,GAHG,mBAGzC0uB,EAHyC,KAG7BC,EAH6B,iDAKhD,4BAAApxB,EAAA,yDACOgN,EADP,wDAIEokB,GAAc,GAJhB,UAMU/iB,EAAc,IAAIC,eACZ3H,IAAImkC,mCAAgCC,MAAMxC,IAP1D,SAQUz3B,GAAgB,CAAE5H,aAAY4D,SAAQuB,gBARhD,yDAUI3L,GAAO,CACLoJ,QAAS,qBACTC,YAAa,KAAED,QACfG,KAAM,UAbZ,yBAgBImlB,GAAc,GAhBlB,8EALgD,kEAyBhD,4BAAApxB,EAAA,yDACOgN,EADP,wDAIEokB,GAAc,GAJhB,UAMU/iB,EAAc,IAAIC,eACZ3H,IAAImkC,mCAAgCE,QAAQzC,IAP5D,SAQUz3B,GAAgB,CAAE5H,aAAY4D,SAAQuB,gBARhD,yDAUI3L,GAAO,CACLoJ,QAAS,uBACTC,YAAa,KAAED,QACfG,KAAM,UAbZ,yBAgBImlB,GAAc,GAhBlB,8EAzBgD,sBA6ChD,OACE,oCACE,kBAAC,KAAD,CAAQpJ,QA/CoC,2CA+ChBoL,SAAUjC,GAAtC,SAEU,IACV,kBAAC,KAAD,CAAQnJ,QAlDoC,2CAkDdoL,SAAUjC,GAAxC,YAON,SAASsZ,GAAT,GAA+C,IAAxBlC,EAAuB,EAAvBA,SACfr/B,EAAaW,IADyB,EAEdpH,mBAAS,IAFK,mBAErCoB,EAFqC,KAE5BogC,EAF4B,OAGd12B,KAAtBT,EAHoC,EAGpCA,OACFkpB,EAJsC,EAG5BhpB,WACenJ,EAJa,EAKbonC,GAC7B,uBAD+C,sBAE/C,gCAAAjrC,EAAA,6DACQqiB,EAAc,IAAIxiB,YAAUgE,GADpC,SAE6BqnC,qCACzB3C,EAASjmC,MAAM6oC,YACf9oB,GAJJ,cAEQgoB,EAFR,OAMQh8B,EAAc,IAAIC,cAN1B,SAOcpF,EAAWsB,eAAe6/B,GAPxC,8CAQIh8B,EARJ,UASY+8B,wCACJt+B,EAAOtD,UACP++B,EAASjmC,MAAM6oC,YACf9oB,GAZR,yBAQgB1b,IARhB,+BAgBE0H,EAAY1H,IACVmkC,mCAAgCO,SAAS9C,EAAU8B,IAjBvD,kBAmBS,CAACh8B,EAAa,KAnBvB,6CAP0C,mBAKrCikB,EALqC,KAK3BnB,EAL2B,KA8B5C,OACE,0BAAMmB,SAAUA,GACd,kBAACgZ,GAAD,CACErd,MAAM,qBACNrtB,MAAOiD,EACP4uB,SAAU,SAAC7xB,GAAD,OAAWqjC,EAAWrjC,IAChCJ,MAAO,CAAEunB,aAAc,MAEzB,kBAACwjB,GAAD,CAAcvV,UAAWA,EAAW7E,WAAYA,KAKtD,SAASuZ,GAAT,GAAkD,IAAxBnC,EAAuB,EAAvBA,SAAuB,EACjB9lC,mBAAS,IADQ,mBACxCoB,EADwC,KAC/BogC,EAD+B,KAGzCjO,EADgBzoB,KAAdP,WACuBnJ,EAHgB,EAIhBonC,GAC7B,2BAD+C,sBAE/C,kCAAAjrC,EAAA,yDACQqiB,EAAc,IAAIxiB,YAAUgE,GAC5BwmC,EAFR,UAEuB9B,EAASjmC,MAAMqkC,OAAOv8B,MAAK,SAACs8B,GAAD,OAC9CA,EAAMv3B,KAAKtE,OAAOwX,aAHtB,aAEuB,EAElBgoB,aAJL,sBAMU,IAAIrgC,MAAM,qBANpB,cAQQqE,EAAc,IAAIC,eACZ3H,IACVmkC,mCAAgCU,YAAYjD,EAAU8B,IAV1D,kBAYS,CAACh8B,EAAa,KAZvB,4CAN6C,mBAIxCikB,EAJwC,KAI9BnB,EAJ8B,KAsB/C,OACE,0BAAMmB,SAAUA,GACd,kBAACmZ,GAAD,CACElD,SAAUA,EACVta,MAAM,qBACNrtB,MAAOiD,EACP4uB,SAAU,SAAC7xB,GAAD,OAAWqjC,EAAWrjC,IAChCJ,MAAO,CAAEunB,aAAc,MAEzB,kBAACwjB,GAAD,CAAcvV,UAAWA,EAAW7E,WAAYA,KAKtD,SAASwZ,GAAT,GAA8C,IAAxBpC,EAAuB,EAAvBA,SAAuB,EACb9lC,mBAAS,IADI,mBACpCoB,EADoC,KAC3BogC,EAD2B,OAEXxhC,mBAAS,IAFE,mBAEpC0kC,EAFoC,KAE1BY,EAF0B,KAIrC7+B,EAAaW,IAJwB,EAKb0D,KAAtBT,EALmC,EAKnCA,OAAQE,EAL2B,EAK3BA,UAL2B,EAMnB8P,KAAjB7L,EANoC,oBAOrC+kB,EACJhpB,GAAanJ,GAAWoN,GAAiBkhB,WAAWgV,GARX,EAUZ8D,GAC7B,qBAD+C,sBAE/C,8CAAAjrC,EAAA,yDACQqiB,EAAc,IAAIxiB,YAAUgE,GAC5BwmC,EAFR,UAEuB9B,EAASjmC,MAAMqkC,OAAOv8B,MAAK,SAACs8B,GAAD,OAC9CA,EAAMv3B,KAAKtE,OAAOwX,aAHtB,aAEuB,EAElBgoB,aAJL,sBAMU,IAAIrgC,MAAM,qBANpB,UASQ0hC,EAAqBl5B,GACzBvB,EACAoR,GAXJ,sBAcU,IAAIrY,MAAM,uBAdpB,uBAiBgCd,EAAWsB,eAAe6X,GAjB1D,UAiBQsmB,EAjBR,8BAmBU,IAAI3+B,MAAM,kBAnBpB,eAqBQ2hC,EAAe5wB,GAAmB4tB,EAAgB/iC,MAAM/E,SACxDonC,EAAiBnnC,KAAKG,MAC1BkxB,WAAWgV,GAAX,SAAuB,GAAMwE,IAGzBC,EACJvpB,EAAYxX,OAAO4D,qBAAkB0N,mBACrCuvB,EAAmB97B,OAAO/E,OAAOiC,EAAOtD,WACpC,IAAID,UACJ,KAEA8E,EAAc,IAAIC,cAClBsC,EAAqB,GACvBg7B,GACFv9B,EAAY1H,IACV4H,gBAAcS,cAAc,CAC1BL,WAAY7B,EAAOtD,UACnBsB,SAAUm9B,EAAiB,MAC3Br5B,iBAAkBg9B,EAAkBpiC,UACpCsF,UAAWL,qBAAkBC,iBAC7BG,MAAO,MAETJ,qBAAkBQ,kBAAkB,CAClCC,QAAS08B,EAAkBpiC,UAC3B2F,KAAMV,qBAAkB0N,iBACxB/M,MAAOtC,EAAOtD,YAEhBiF,qBAAkBo9B,SAAS,CACzBC,OAAQF,EAAkBpiC,UAC1BuiC,YAAa1B,EACbvvB,OAAQmtB,EACR74B,MAAOtC,EAAOtD,YAEhBiF,qBAAkBu9B,aAAa,CAC7BF,OAAQF,EAAkBpiC,UAC1BuiC,YAAaL,EAAmB97B,OAChCR,MAAOtC,EAAOtD,aAGlBoH,EAAQhO,KAAKgpC,IAEbv9B,EAAY1H,IACV8H,qBAAkBo9B,SAAS,CACzBC,OAAQJ,EAAmB97B,OAC3Bm8B,YAAa1B,EACbvvB,OAAQmtB,EACR74B,MAAOtC,EAAOtD,aAnEtB,kBAuES,CAAC6E,EAAauC,IAvEvB,6CAyEA,GArFyC,mBAUpC0hB,EAVoC,KAU1BnB,EAV0B,KAwF3C,OACE,0BAAMmB,SAAUA,GACd,kBAACmZ,GAAD,CACElD,SAAUA,EACVta,MAAM,qBACNrtB,MAAOiD,EACP4uB,SAAU,SAAC7xB,GAAD,OAAWqjC,EAAWrjC,IAChCJ,MAAO,CAAEunB,aAAc,MAEzB,kBAAC,KAAD,CACE6K,YAAa,gDACbhyB,MAAOumC,EACP1U,SAAU,SAACna,GAAD,OAAOyvB,EAAYzvB,EAAE1M,OAAOhL,MAAMwkC,SAC5C5kC,MAAO,CAAEunB,aAAc,MAEzB,kBAACwjB,GAAD,CAAcvV,UAAWA,EAAW7E,WAAYA,KAKtD,SAASyZ,GAAT,GAA+C,IAAxBrC,EAAuB,EAAvBA,SAAuB,EACd9lC,mBAAS,IADK,mBACrCoB,EADqC,KAC5BogC,EAD4B,OAEZxhC,mBAAS,IAFG,mBAErC0kC,EAFqC,KAE3BY,EAF2B,KAItC7+B,EAAaW,IAJyB,EAKd0D,KAAtBT,EALoC,EAKpCA,OAAQE,EAL4B,EAK5BA,UAL4B,EAMpB8P,KAAjB7L,EANqC,oBAOtC+kB,EACJhpB,GAAanJ,GAAWoN,GAAiBkhB,WAAWgV,GARV,EAUb8D,GAC7B,wBAD+C,sBAE/C,8CAAAjrC,EAAA,yDACQqiB,EAAc,IAAIxiB,YAAUgE,GAC5BwmC,EAFR,UAEuB9B,EAASjmC,MAAMqkC,OAAOv8B,MAAK,SAACs8B,GAAD,OAC9CA,EAAMv3B,KAAKtE,OAAOwX,aAHtB,aAEuB,EAElBgoB,aAJL,sBAMU,IAAIrgC,MAAM,qBANpB,UASQ0hC,EAAqBl5B,GACzBvB,EACAoR,GAXJ,sBAcU,IAAIrY,MAAM,uBAdpB,uBAiBgCd,EAAWsB,eAAe6X,GAjB1D,UAiBQsmB,EAjBR,8BAmBU,IAAI3+B,MAAM,kBAnBpB,eAqBQ2hC,EAAe5wB,GAAmB4tB,EAAgB/iC,MAAM/E,SACxDonC,EAAiBnnC,KAAKG,MAC1BkxB,WAAWgV,GAAX,SAAuB,GAAMwE,IAGzBC,EACJvpB,EAAYxX,OAAO4D,qBAAkB0N,mBACrCuvB,EAAmB97B,OAAO/E,OAAOiC,EAAOtD,WACpC,IAAID,UACJ,KAEA8E,EAAc,IAAIC,cAClBsC,EAAqB,GACvBg7B,IACFv9B,EAAY1H,IACV4H,gBAAcS,cAAc,CAC1BL,WAAY7B,EAAOtD,UACnBsB,SAAU,MACV8D,iBAAkBg9B,EAAkBpiC,UACpCsF,UAAWL,qBAAkBC,iBAC7BG,MAAO,MAETJ,qBAAkBQ,kBAAkB,CAClCC,QAAS08B,EAAkBpiC,UAC3B2F,KAAMV,qBAAkB0N,iBACxB/M,MAAOtC,EAAOtD,aAGlBoH,EAAQhO,KAAKgpC,IAEfv9B,EAAY1H,IACVmkC,mCAAgCmB,gBAC9B1D,EACA8B,EACAv9B,EAAOtD,UACP,IAAIvH,IAAGgmC,KAGP2D,EACFv9B,EAAY1H,IACV8H,qBAAkBo9B,SAAS,CACzBC,OAAQzB,EACR0B,YAAaH,EAAkBpiC,UAC/BsR,OAAQmtB,EACR74B,MAAOtC,EAAOtD,YAEhBiF,qBAAkBu9B,aAAa,CAC7BF,OAAQF,EAAkBpiC,UAC1BuiC,YAAaL,EAAmB97B,OAChCR,MAAOtC,EAAOtD,aAIlB6E,EAAY1H,IACV8H,qBAAkBo9B,SAAS,CACzBC,OAAQzB,EACR0B,YAAaL,EAAmB97B,OAChCkL,OAAQmtB,EACR74B,MAAOtC,EAAOtD,aA/EtB,kBAmFS,CAAC6E,EAAauC,IAnFvB,6CAZ0C,mBAUrC0hB,EAVqC,KAU3BnB,EAV2B,KAmG5C,OACE,0BAAMmB,SAAUA,GACd,kBAACmZ,GAAD,CACElD,SAAUA,EACVta,MAAM,qBACNrtB,MAAOiD,EACP4uB,SAAU,SAAC7xB,GAAD,OAAWqjC,EAAWrjC,IAChCJ,MAAO,CAAEunB,aAAc,MAEzB,kBAAC,KAAD,CACE6K,YAAa,gDACbhyB,MAAOumC,EACP1U,SAAU,SAACna,GAAD,OAAOyvB,EAAYzvB,EAAE1M,OAAOhL,MAAMwkC,SAC5C5kC,MAAO,CAAEunB,aAAc,MAEzB,kBAACwjB,GAAD,CAAcvV,UAAWA,EAAW7E,WAAYA,KAKtD,SAAS0Z,GAAT,GAAgD,IAAxBtC,EAAuB,EAAvBA,SAAuB,EACf9lC,mBAAS,IADM,mBACtC4mC,EADsC,KAC7B6C,EAD6B,KAGrCl/B,EAAcO,KAAdP,UAHqC,EAIrB8P,KAAjB7L,EAJsC,oBAKvC+kB,EAAYhpB,GAAaiE,GAAiBkhB,WAAWkX,GALd,EAOd4B,GAC7B,oBAD+C,sBAE/C,4BAAAjrC,EAAA,6DACQqO,EAAc,IAAIC,eACZ3H,IACVmkC,mCAAgCqB,UAC9B5D,EACAznC,KAAKG,MAA4B,IAAtBkxB,WAAWkX,MAL5B,kBAQS,CAACh7B,EAAa,KARvB,4CAT2C,mBAOtCikB,EAPsC,KAO5BnB,EAP4B,KAqB7C,OACE,0BAAMmB,SAAUA,GACd,kBAAC,KAAD,CACEM,YAAa,gDACbhyB,MAAOyoC,EACP5W,SAAU,SAACna,GAAD,OAAO4zB,EAAW5zB,EAAE1M,OAAOhL,MAAMwkC,SAC3C5kC,MAAO,CAAEunB,aAAc,MAEzB,kBAACwjB,GAAD,CAAcvV,UAAWA,EAAW7E,WAAYA,KAKtD,SAAS8Z,GACPl/B,EACAqgC,GAEiC,IADjC5mC,EACgC,wDAC1B0D,EAAaW,IADa,EAEF0D,KAAtBT,EAFwB,EAExBA,OAAQE,EAFgB,EAEhBA,UAFgB,EAGIvK,oBAAS,GAHb,mBAGzB0uB,EAHyB,KAGbC,EAHa,cAKjBkB,EALiB,8EAKhC,WAAwBha,GAAxB,qBAAAtY,EAAA,yDACEsY,EAAEsxB,kBACEzY,EAFN,oDAKEC,GAAc,GALhB,SAOSpkB,EAPT,sBAQY,IAAIhD,MAAM,wBARtB,uBAUyCoiC,IAVzC,0CAUW/9B,EAVX,KAUwBuC,EAVxB,eAWUE,GAAgB,CAAE5H,aAAY4D,SAAQuB,cAAauC,YAX7D,QAYQpL,GACF0C,IAbN,kDAgBIxF,GAAO,CACLoJ,QAAQ,SAAD,OAAWC,GAClBA,YAAa,KAAED,QACfG,KAAM,UAnBZ,yBAsBImlB,GAAc,GAtBlB,8EALgC,sBA+BhC,MAAO,CAACkB,EAAUnB,GAGpB,SAASoa,GAAT,GAAkD,IAA1BvV,EAAyB,EAAzBA,UAAW7E,EAAc,EAAdA,WACzBnkB,EAAcO,KAAdP,UACR,OACE,kBAAC,KAAD,CACEs4B,SAAS,SACTr5B,KAAK,UACLmnB,UAAW4C,GAAa7E,GAEtBnkB,EAAqC,SAAzB,wBAKpB,SAASy+B,GAAT,GAYI,IAXFlD,EAWC,EAXDA,SACAta,EAUC,EAVDA,MACArtB,EASC,EATDA,MACA6xB,EAQC,EARDA,SACAjyB,EAOC,EAPDA,MAQM06B,EAAgB9e,KACtB,OACE,kBAAC,KAAMoW,MAAP,CAAahyB,MAAOA,GAClB,0BAAM6rC,UAAU,yBAAyBpe,GACzC,kBAAC,KAAD,CAAQwE,SAAUA,EAAU7xB,MAAOA,EAAOJ,MAAO,CAAE4tB,MAAO,SACvDma,EAASjmC,MAAMqkC,OAAO7/B,KAAI,SAAC4/B,GAAD,OACzB,kBAAC,GAAD,CAAQ9lC,MAAO8lC,EAAMv3B,KAAKnL,WAAYpE,IAAK8mC,EAAMv3B,KAAKnL,YACnDk3B,EAAcwL,EAAMv3B,KAAKnL,YACxB,oCACGk3B,EAAcwL,EAAMv3B,KAAKnL,YAD5B,KAC2C0iC,EAAMv3B,KAAKnL,WADtD,KAIA0iC,EAAMv3B,KAAKnL,iBASzB,SAASsnC,GAAT,GAA0D,IAAlCrd,EAAiC,EAAjCA,MAAOztB,EAA0B,EAA1BA,MAAOI,EAAmB,EAAnBA,MAAO6xB,EAAY,EAAZA,SACrCyI,EAAgB9e,KAChByjB,EAAUn8B,mBAAQ,WACtB,OAAOY,OAAO+Y,QAAQ6d,GACnBr4B,QACC,mCAAEwf,EAAF,KAAe6hB,EAAf,YACE7hB,EAAYke,SAAS3/B,IACrBsjC,EAAOpL,cAAcyH,SAAS3/B,EAAMk4B,kBAEvChyB,KAAI,mCAAEub,EAAF,KAAe6hB,EAAf,WAA4B,CAC/BtjC,MAAOyhB,EACP4L,MACE,oCACGiW,EADH,KACa7hB,EADb,WAKL,CAAC6Y,EAAet6B,IACnB,OACE,kBAAC,KAAM4xB,MAAP,CAAahyB,MAAOA,GAClB,0BAAM6rC,UAAU,yBAAyBpe,GACzC,kBAAC,KAAD,CACE4R,QAASA,EACTj/B,MAAOA,EACP6xB,SAAU,SAACna,GAAD,OAAOma,EAASna,IAC1B9X,MAAO,CAAE4tB,MAAO,W,ICriBhBI,GAAS5gB,KAAT4gB,KAEO,SAAS8d,KAAY,IA8BR,EA7BlB3E,EAAgBjR,eAAhBiR,YADyB,EAEYr9B,EA2E/C,SAAqBzG,GACnB,IAEE,OADA,IAAIhE,YAAUgE,IACP,EACP,MAAOyU,GACP,OAAO,GA/EPi0B,CAAY5E,GAAe,IAAI9nC,YAAU8nC,GAAe,MAHzB,mBAE1B6E,EAF0B,KAETC,EAFS,KAK3B9V,EAAUC,eAEV2R,EAA4B7kC,mBAAQ,WACxC,IAAK8oC,EACH,OAAO,KAET,IACE,MAAO,CACL3oC,QAAS,IAAIhE,YAAU8nC,GACvBrlC,MAAOoqC,2BAAgBF,EAAgB5mC,MACvC+mC,QAASH,EAAgBp9B,OAE3B,MAAOkJ,GACP,OAAO,QAER,CAACqvB,EAAa6E,IApBgB,EAqBgBliC,EAAc,OAC7Di+B,QAD6D,IAC7DA,OAD6D,EAC7DA,EAAUjmC,MAAM6mC,eAtBe,mBAqB1BR,EArB0B,KAqBTiE,EArBS,KAwB3B7R,EAAWr3B,mBACf,kBAAOilC,EAAkB5tB,GAAmB4tB,EAAgB/iC,MAAQ,OACpE,CAAC+iC,IAEK77B,EAAWS,KAAXT,OAER,OAAIy7B,GAAYxN,EAEZ,oCACE,kBAAC,KAAD,CACEjR,MAAO,4CAAQye,EAAS1kC,QAAQG,YAChC6oC,OAAQ,kBAAMlW,EAAQ/zB,KAAK,WAC3BkqC,SAAUvE,EAASjmC,MAAM8F,OAE3B,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAKmxB,GAAI,GAAImK,GAAI,IACf,kBAACoF,GAAD,CAAeP,SAAUA,EAAUxN,SAAUA,KAE/C,kBAAC,KAAD,CAAKxB,GAAI,GAAImK,GAAI,IACf,kBAAC4F,GAAD,CAAuBf,SAAUA,EAAUxN,SAAUA,KAEvD,kBAAC,KAAD,CAAKxB,GAAI,IACP,kBAACyQ,GAAD,CAAmBzB,SAAUA,KAE9Bz7B,EAAOE,YAAP,UACDu7B,EAASjmC,MAAM8mC,gBADd,aACD,EAAyBv+B,OAAOiC,EAAOtD,aACvCujC,iCAAsBxE,GACpB,kBAAC,KAAD,CAAKhP,GAAI,IACP,kBAACgR,GAAD,CAAgBhC,SAAUA,KAE1B,OAOV,oCACE,kBAAC,KAAD,CACEze,MAAO,4CAAQ6d,GACfkF,OAAQ,kBAAMlW,EAAQ/zB,KAAK,aAE7B,kBAACyiB,GAAD,KACIonB,GAAsBG,EAGtB,kBAAC,GAAD,qBAFA,kBAAC,KAAD,Q,sUClFFj/B,GAAUC,KAAVD,MAEFwX,GAAUC,KAAOzjB,IAAV,MAQPqrC,GAAO5nB,KAAO6nB,KAAV,MAMK,SAASC,KAAgB,IAAD,EACCzqC,mBAAS,IADV,mBAC9BklC,EAD8B,KACjBwF,EADiB,KAE/BxW,EAAUC,eAMhB,OACE,kBAAC,GAAD,KACE,kBAACvR,GAAD,KACE,kBAAC,GAAD,CAAOtX,MAAO,GAAd,SACA,kBAACi/B,GAAD,CAAM1a,SARZ,SAAkBha,GAChBA,EAAEsxB,iBACFjT,EAAQ/zB,KAAR,iBAAuB+kC,MAOjB,kBAAC,KAAD,CACE/mC,MAAO+mC,EACPlV,SAAU,SAACna,GAAD,OAAO60B,EAAe70B,EAAE1M,OAAOhL,MAAMwkC,SAC/ChP,YAAY,iBAEd,kBAAC,KAAD,CAAQnqB,KAAK,UAAUq5B,SAAS,UAAhC,OAIF,kBAACh6B,GAAD,CAAMG,GAAG,cAAT,qBChCD,SAAS2hC,KACd,OACE,oCACE,kBAAC,KAAD,CAAYC,SAAU,KACpB,kBAACvJ,GAAD,KACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOwJ,OAAK,EAAC/vB,KAAK,KAChB,kBAAC,KAAD,CAAU9R,GAAIoU,QAEhB,kBAAC,KAAD,CAAOytB,OAAK,EAAC/vB,KAAK,0BAChB,kBAACkZ,GAAD,OAEF,kBAAC,KAAD,CAAO6W,OAAK,EAAC/vB,KAAK,UAAUua,UAAW2B,KACvC,kBAAC,KAAD,CAAO6T,OAAK,EAAC/vB,KAAK,YAAYua,UAAW8C,KACzC,kBAAC,KAAD,CAAO0S,OAAK,EAAC/vB,KAAK,WAAWua,UAAWqG,KACxC,kBAAC,KAAD,CACEmP,OAAK,EACL/vB,KAAK,mBACLua,UAAWyM,KAEb,kBAAC,KAAD,CAAO+I,OAAK,EAAC/vB,KAAK,UAChB,kBAAC2vB,GAAD,OAEF,kBAAC,KAAD,CAAOI,OAAK,EAAC/vB,KAAK,cAChB,kBAACooB,GAAD,OAEF,kBAAC,KAAD,CAAO2H,OAAK,EAAC/vB,KAAK,uBAChB,kBAAC+uB,GAAD,WC9BC,SAASiB,KACtB,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAM,kBAAC,KAAD,CAAM1pC,KAAK,YACnC,kBAAC2J,GAAD,MACA,kBAAC,GAAD,KACE,kBAAC9E,EAAD,KACE,kBAAC+D,GAAD,KACE,kBAAC2xB,GAAD,KACE,kBAAC,WAAD,CAAUmP,SAAU,kBAAM,kBAAC,KAAD,CAAM1pC,KAAK,YACnC,kBAACspC,GAAD,YCPIK,QACW,cAA7BtW,OAAOwK,SAAS+L,UAEe,UAA7BvW,OAAOwK,SAAS+L,UAEhBvW,OAAOwK,SAAS+L,SAASC,MACvB,2DCZNC,IAAS5jB,OACP,kBAAC,IAAM6jB,WAAP,KACE,kBAAC,GAAD,OAEFxnC,SAASynC,eAAe,SDyHpB,kBAAmBlf,WACrBA,UAAUmf,cAAcC,MACrBruB,MAAK,SAACsuB,GACLA,EAAaC,gBAEdtuB,OAAM,SAAC5R,GACNnI,QAAQmI,MAAMA,EAAMlC,c","file":"static/js/main.80cd8b71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.49174c73.svg\";","import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport BN from 'bn.js';\r\n\r\nexport function isValidPublicKey(key) {\r\n  if (!key) {\r\n    return false;\r\n  }\r\n  try {\r\n    new PublicKey(key);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const percentFormat = new Intl.NumberFormat(undefined, {\r\n  style: 'percent',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport function floorToDecimal(\r\n  value: number,\r\n  decimals: number | undefined | null,\r\n) {\r\n  return decimals ? Math.floor(value * 10 ** decimals) / 10 ** decimals : value;\r\n}\r\n\r\nexport function roundToDecimal(\r\n  value: number,\r\n  decimals: number | undefined | null,\r\n) {\r\n  return decimals ? Math.round(value * 10 ** decimals) / 10 ** decimals : value;\r\n}\r\n\r\nexport function getDecimalCount(value): number {\r\n  if (!isNaN(value) && Math.floor(value) !== value)\r\n    return value.toString().split('.')[1].length || 0;\r\n  return 0;\r\n}\r\n\r\nexport function divideBnToNumber(numerator: BN, denominator: BN): number {\r\n  const quotient = numerator.div(denominator).toNumber();\r\n  const rem = numerator.umod(denominator);\r\n  const gcd = rem.gcd(denominator);\r\n  return quotient + rem.div(gcd).toNumber() / denominator.div(gcd).toNumber();\r\n}\r\n\r\nexport function getTokenMultiplierFromDecimals(decimals: number): BN {\r\n  return new BN(10).pow(new BN(decimals));\r\n}\r\n\r\nconst localStorageListeners = {};\r\n\r\nexport function useLocalStorageStringState(\r\n  key: string,\r\n  defaultState: string | null = null,\r\n): [string | null, (newState: string | null) => void] {\r\n  const state = localStorage.getItem(key) || defaultState;\r\n\r\n  const [, notify] = useState(key + '\\n' + state);\r\n\r\n  useEffect(() => {\r\n    if (!localStorageListeners[key]) {\r\n      localStorageListeners[key] = [];\r\n    }\r\n    localStorageListeners[key].push(notify);\r\n    return () => {\r\n      localStorageListeners[key] = localStorageListeners[key].filter(\r\n        (listener) => listener !== notify,\r\n      );\r\n      if (localStorageListeners[key].length === 0) {\r\n        delete localStorageListeners[key];\r\n      }\r\n    };\r\n  }, [key]);\r\n\r\n  const setState = useCallback<(newState: string | null) => void>(\r\n    (newState) => {\r\n      const changed = state !== newState;\r\n      if (!changed) {\r\n        return;\r\n      }\r\n\r\n      if (newState === null) {\r\n        localStorage.removeItem(key);\r\n      } else {\r\n        localStorage.setItem(key, newState);\r\n      }\r\n      localStorageListeners[key].forEach((listener) =>\r\n        listener(key + '\\n' + newState),\r\n      );\r\n    },\r\n    [state, key],\r\n  );\r\n\r\n  return [state, setState];\r\n}\r\n\r\nexport function useLocalStorageState<T = any>(\r\n  key: string,\r\n  defaultState: T | null = null,\r\n): [T, (newState: T) => void] {\r\n  let [stringState, setStringState] = useLocalStorageStringState(\r\n    key,\r\n    JSON.stringify(defaultState),\r\n  );\r\n  return [\r\n    useMemo(() => stringState && JSON.parse(stringState), [stringState]),\r\n    (newState) => setStringState(JSON.stringify(newState)),\r\n  ];\r\n}\r\n\r\nexport function useEffectAfterTimeout(effect, timeout) {\r\n  useEffect(() => {\r\n    const handle = setTimeout(effect, timeout);\r\n    return () => clearTimeout(handle);\r\n  });\r\n}\r\n\r\nexport function useListener(emitter, eventName) {\r\n  const [, forceUpdate] = useState(0);\r\n  useEffect(() => {\r\n    const listener = () => forceUpdate((i) => i + 1);\r\n    emitter.on(eventName, listener);\r\n    return () => emitter.removeListener(eventName, listener);\r\n  }, [emitter, eventName]);\r\n}\r\n\r\nexport function abbreviateAddress(address: PublicKey, size = 4) {\r\n  const base58 = address.toBase58();\r\n  return base58.slice(0, size) + '…' + base58.slice(-size);\r\n}\r\n\r\nexport function isEqual(obj1, obj2, keys) {\r\n  if (!keys && Object.keys(obj1).length !== Object.keys(obj2).length) {\r\n    return false;\r\n  }\r\n  keys = keys || Object.keys(obj1);\r\n  for (const k of keys) {\r\n    if (obj1[k] !== obj2[k]) {\r\n      // shallow comparison\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import { useEffect, useReducer } from 'react';\r\n\r\nimport assert from 'assert';\r\n\r\nconst pageLoadTime = new Date();\r\n\r\nconst globalCache: Map<any, any> = new Map();\r\n\r\nclass FetchLoopListener<T = any> {\r\n  cacheKey: any;\r\n  fn: () => Promise<T>;\r\n  refreshInterval: number;\r\n  refreshIntervalOnError: number | null;\r\n  callback: () => void;\r\n  cacheNullValues: Boolean = true;\r\n\r\n  constructor(\r\n    cacheKey: any,\r\n    fn: () => Promise<T>,\r\n    refreshInterval: number,\r\n    refreshIntervalOnError: number | null,\r\n    callback: () => void,\r\n    cacheNullValues: Boolean,\r\n  ) {\r\n    this.cacheKey = cacheKey;\r\n    this.fn = fn;\r\n    this.refreshInterval = refreshInterval;\r\n    this.refreshIntervalOnError = refreshIntervalOnError;\r\n    this.callback = callback;\r\n    this.cacheNullValues = cacheNullValues;\r\n  }\r\n}\r\n\r\nclass FetchLoopInternal<T = any> {\r\n  cacheKey: any;\r\n  fn: () => Promise<T>;\r\n  timeoutId: null | any;\r\n  listeners: Set<FetchLoopListener<T>>;\r\n  errors: number;\r\n  cacheNullValues: Boolean = true;\r\n\r\n  constructor(cacheKey: any, fn: () => Promise<T>, cacheNullValues: Boolean) {\r\n    this.cacheKey = cacheKey;\r\n    this.fn = fn;\r\n    this.timeoutId = null;\r\n    this.listeners = new Set();\r\n    this.errors = 0;\r\n    this.cacheNullValues = cacheNullValues;\r\n  }\r\n\r\n  get refreshInterval(): number {\r\n    return Math.min(\r\n      ...[...this.listeners].map((listener) => listener.refreshInterval),\r\n    );\r\n  }\r\n\r\n  get refreshIntervalOnError(): number | null {\r\n    const refreshIntervalsOnError: number[] = [...this.listeners]\r\n      .map((listener) => listener.refreshIntervalOnError)\r\n      .filter((x): x is number => x !== null);\r\n    if (refreshIntervalsOnError.length === 0) {\r\n      return null;\r\n    }\r\n    return Math.min(...refreshIntervalsOnError);\r\n  }\r\n\r\n  get stopped(): boolean {\r\n    return this.listeners.size === 0;\r\n  }\r\n\r\n  addListener(listener: FetchLoopListener<T>): void {\r\n    const previousRefreshInterval = this.refreshInterval;\r\n    this.listeners.add(listener);\r\n    if (this.refreshInterval < previousRefreshInterval) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  removeListener(listener: FetchLoopListener<T>): void {\r\n    assert(this.listeners.delete(listener));\r\n    if (this.stopped) {\r\n      if (this.timeoutId) {\r\n        clearTimeout(this.timeoutId);\r\n        this.timeoutId = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  notifyListeners(): void {\r\n    this.listeners.forEach((listener) => listener.callback());\r\n  }\r\n\r\n  refresh = async () => {\r\n    if (this.timeoutId) {\r\n      clearTimeout(this.timeoutId);\r\n      this.timeoutId = null;\r\n    }\r\n    if (this.stopped) {\r\n      return;\r\n    }\r\n\r\n    let errored = false;\r\n    try {\r\n      const data = await this.fn();\r\n      if (!this.cacheNullValues && data === null) {\r\n        console.log(`Not caching null value for ${this.cacheKey}`);\r\n        // cached data has not changed so no need to re-render\r\n        this.errors = 0;\r\n        return data;\r\n      } else {\r\n        globalCache.set(this.cacheKey, data);\r\n        this.errors = 0;\r\n        this.notifyListeners();\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      ++this.errors;\r\n      console.warn(error);\r\n      errored = true;\r\n    } finally {\r\n      if (!this.timeoutId && !this.stopped) {\r\n        let waitTime = this.refreshInterval;\r\n        if (\r\n          errored &&\r\n          this.refreshIntervalOnError &&\r\n          this.refreshIntervalOnError > 0\r\n        ) {\r\n          waitTime = this.refreshIntervalOnError;\r\n        }\r\n\r\n        // Back off on errors.\r\n        if (this.errors > 0) {\r\n          waitTime = Math.min(1000 * 2 ** (this.errors - 1), 60000);\r\n        }\r\n\r\n        // Don't do any refreshing for the first five seconds, to make way for other things to load.\r\n        const timeSincePageLoad = +new Date() - +pageLoadTime;\r\n        if (timeSincePageLoad < 5000) {\r\n          waitTime += 5000 - timeSincePageLoad / 2;\r\n        }\r\n\r\n        // Refresh background pages slowly.\r\n        if (document.visibilityState === 'hidden') {\r\n          waitTime = 60000;\r\n        } else if (!document.hasFocus()) {\r\n          waitTime *= 1.5;\r\n        }\r\n\r\n        // Add jitter so we don't send all requests at the same time.\r\n        waitTime *= 0.8 + 0.4 * Math.random();\r\n\r\n        this.timeoutId = setTimeout(this.refresh, waitTime);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nclass FetchLoops {\r\n  loops = new Map();\r\n\r\n  addListener<T>(listener: FetchLoopListener<T>) {\r\n    if (!this.loops.has(listener.cacheKey)) {\r\n      this.loops.set(\r\n        listener.cacheKey,\r\n        new FetchLoopInternal<T>(\r\n          listener.cacheKey,\r\n          listener.fn,\r\n          listener.cacheNullValues,\r\n        ),\r\n      );\r\n    }\r\n    this.loops.get(listener.cacheKey).addListener(listener);\r\n  }\r\n\r\n  removeListener<T>(listener: FetchLoopListener<T>) {\r\n    const loop = this.loops.get(listener.cacheKey);\r\n    loop.removeListener(listener);\r\n    if (loop.stopped) {\r\n      this.loops.delete(listener.cacheKey);\r\n      globalCache.delete(listener.cacheKey);\r\n    }\r\n  }\r\n\r\n  refresh(cacheKey) {\r\n    if (this.loops.has(cacheKey)) {\r\n      this.loops.get(cacheKey).refresh();\r\n    }\r\n  }\r\n\r\n  refreshAll() {\r\n    return Promise.all([...this.loops.values()].map((loop) => loop.refresh()));\r\n  }\r\n}\r\nconst globalLoops = new FetchLoops();\r\n\r\nexport function useAsyncData<T = any>(\r\n  asyncFn: () => Promise<T>,\r\n  cacheKey: any,\r\n  { refreshInterval = 60000, refreshIntervalOnError = null } = {},\r\n  cacheNullValues: Boolean = true,\r\n): [null | undefined | T, boolean] {\r\n  const [, rerender] = useReducer((i) => i + 1, 0);\r\n\r\n  useEffect(() => {\r\n    if (!cacheKey) {\r\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n      return () => {};\r\n    }\r\n    const listener = new FetchLoopListener<T>(\r\n      cacheKey,\r\n      asyncFn,\r\n      refreshInterval,\r\n      refreshIntervalOnError,\r\n      rerender,\r\n      cacheNullValues,\r\n    );\r\n    globalLoops.addListener(listener);\r\n    return () => globalLoops.removeListener(listener);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cacheKey, refreshInterval]);\r\n\r\n  if (!cacheKey) {\r\n    return [null, false];\r\n  }\r\n\r\n  const loaded = globalCache.has(cacheKey);\r\n  const data = loaded ? globalCache.get(cacheKey) : undefined;\r\n  return [data, loaded];\r\n}\r\n\r\nexport function refreshCache(cacheKey: any, clearCache = false): void {\r\n  if (clearCache) {\r\n    globalCache.delete(cacheKey);\r\n  }\r\n  const loop = globalLoops.loops.get(cacheKey);\r\n  if (loop) {\r\n    loop.refresh();\r\n    if (clearCache) {\r\n      loop.notifyListeners();\r\n    }\r\n  }\r\n}\r\n\r\nexport function refreshAllCaches(): void {\r\n  for (const loop of globalLoops.loops.values()) {\r\n    loop.refresh();\r\n  }\r\n}\r\n\r\nexport function setCache(\r\n  cacheKey: any,\r\n  value: any,\r\n  { initializeOnly = false } = {},\r\n): void {\r\n  if (initializeOnly && globalCache.has(cacheKey)) {\r\n    return;\r\n  }\r\n  globalCache.set(cacheKey, value);\r\n  const loop = globalLoops.loops.get(cacheKey);\r\n  if (loop) {\r\n    loop.notifyListeners();\r\n  }\r\n}\r\n","import { useLocalStorageState } from './utils';\r\nimport { Account, AccountInfo, Connection, PublicKey } from '@solana/web3.js';\r\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\r\nimport { setCache, useAsyncData } from './fetch-loop';\r\nimport tuple from 'immutable-tuple';\r\nimport { ConnectionContextValues, EndpointInfo } from './types';\r\n\r\nexport const ENDPOINTS: EndpointInfo[] = [\r\n  {\r\n    name: 'mainnet-beta',\r\n    endpoint: 'https://solana-api.projectserum.com',\r\n    custom: false,\r\n  },\r\n  { name: 'localnet', endpoint: 'http://127.0.0.1:8899', custom: false },\r\n];\r\n\r\nconst accountListenerCount = new Map();\r\n\r\nconst ConnectionContext: React.Context<null | ConnectionContextValues> = React.createContext<null | ConnectionContextValues>(\r\n  null,\r\n);\r\n\r\nexport function ConnectionProvider({ children }) {\r\n  const [endpoint, setEndpoint] = useLocalStorageState<string>(\r\n    'connectionEndpts',\r\n    ENDPOINTS[0].endpoint,\r\n  );\r\n  const [customEndpoints, setCustomEndpoints] = useLocalStorageState<\r\n    EndpointInfo[]\r\n  >('customConnectionEndpoints', []);\r\n  const availableEndpoints = ENDPOINTS.concat(customEndpoints);\r\n\r\n  const connection = useMemo(() => new Connection(endpoint, 'recent'), [\r\n    endpoint,\r\n  ]);\r\n  const sendConnection = useMemo(() => new Connection(endpoint, 'recent'), [\r\n    endpoint,\r\n  ]);\r\n\r\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\r\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\r\n  // This is a hack to prevent the list from every getting empty\r\n  useEffect(() => {\r\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\r\n    return () => {\r\n      connection.removeAccountChangeListener(id);\r\n    };\r\n  }, [connection]);\r\n\r\n  useEffect(() => {\r\n    const id = connection.onSlotChange(() => null);\r\n    return () => {\r\n      connection.removeSlotChangeListener(id);\r\n    };\r\n  }, [connection]);\r\n\r\n  useEffect(() => {\r\n    const id = sendConnection.onAccountChange(\r\n      new Account().publicKey,\r\n      () => {},\r\n    );\r\n    return () => {\r\n      sendConnection.removeAccountChangeListener(id);\r\n    };\r\n  }, [sendConnection]);\r\n\r\n  useEffect(() => {\r\n    const id = sendConnection.onSlotChange(() => null);\r\n    return () => {\r\n      sendConnection.removeSlotChangeListener(id);\r\n    };\r\n  }, [sendConnection]);\r\n\r\n  return (\r\n    <ConnectionContext.Provider\r\n      value={{\r\n        endpoint,\r\n        setEndpoint,\r\n        connection,\r\n        sendConnection,\r\n        availableEndpoints,\r\n        setCustomEndpoints,\r\n      }}\r\n    >\r\n      {children}\r\n    </ConnectionContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useConnection() {\r\n  const context = useContext(ConnectionContext);\r\n  if (!context) {\r\n    throw new Error('Missing connection context');\r\n  }\r\n  return context.connection;\r\n}\r\n\r\nexport function useSendConnection() {\r\n  const context = useContext(ConnectionContext);\r\n  if (!context) {\r\n    throw new Error('Missing connection context');\r\n  }\r\n  return context.sendConnection;\r\n}\r\n\r\nexport function useConnectionConfig() {\r\n  const context = useContext(ConnectionContext);\r\n  if (!context) {\r\n    throw new Error('Missing connection context');\r\n  }\r\n  return {\r\n    endpoint: context.endpoint,\r\n    endpointInfo: context.availableEndpoints.find(\r\n      (info) => info.endpoint === context.endpoint,\r\n    ),\r\n    setEndpoint: context.setEndpoint,\r\n    availableEndpoints: context.availableEndpoints,\r\n    setCustomEndpoints: context.setCustomEndpoints,\r\n  };\r\n}\r\n\r\nexport function useAccountInfo(\r\n  publicKey: PublicKey | undefined | null,\r\n): [AccountInfo<Buffer> | null | undefined, boolean] {\r\n  const connection = useConnection();\r\n  const cacheKey = tuple(connection, publicKey?.toBase58());\r\n  const [accountInfo, loaded] = useAsyncData<AccountInfo<Buffer> | null>(\r\n    async () => (publicKey ? connection.getAccountInfo(publicKey) : null),\r\n    cacheKey,\r\n    { refreshInterval: 60_000 },\r\n  );\r\n  useEffect(() => {\r\n    if (!publicKey) {\r\n      return;\r\n    }\r\n    if (accountListenerCount.has(cacheKey)) {\r\n      let currentItem = accountListenerCount.get(cacheKey);\r\n      ++currentItem.count;\r\n    } else {\r\n      let previousInfo: AccountInfo<Buffer> | null = null;\r\n      const subscriptionId = connection.onAccountChange(publicKey, (info) => {\r\n        if (\r\n          !previousInfo ||\r\n          !previousInfo.data.equals(info.data) ||\r\n          previousInfo.lamports !== info.lamports\r\n        ) {\r\n          previousInfo = info;\r\n          setCache(cacheKey, info);\r\n        }\r\n      });\r\n      accountListenerCount.set(cacheKey, { count: 1, subscriptionId });\r\n    }\r\n    return () => {\r\n      let currentItem = accountListenerCount.get(cacheKey);\r\n      let nextCount = currentItem.count - 1;\r\n      if (nextCount <= 0) {\r\n        connection.removeAccountChangeListener(currentItem.subscriptionId);\r\n        accountListenerCount.delete(cacheKey);\r\n      } else {\r\n        --currentItem.count;\r\n      }\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cacheKey]);\r\n  const previousInfoRef = useRef<AccountInfo<Buffer> | null | undefined>(null);\r\n  if (\r\n    !accountInfo ||\r\n    !previousInfoRef.current ||\r\n    !previousInfoRef.current.data.equals(accountInfo.data) ||\r\n    previousInfoRef.current.lamports !== accountInfo.lamports\r\n  ) {\r\n    previousInfoRef.current = accountInfo;\r\n  }\r\n  return [previousInfoRef.current, loaded];\r\n}\r\n\r\nexport function useAccountData(publicKey) {\r\n  const [accountInfo] = useAccountInfo(publicKey);\r\n  return accountInfo && accountInfo.data;\r\n}\r\n","import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nexport default function Link({ external = false, ...props }) {\r\n  let { to, children, ...rest } = props;\r\n  if (external) {\r\n    return (\r\n      <a href={to} target=\"_blank\" rel=\"noopener noreferrer\" {...rest}>\r\n        {children}\r\n      </a>\r\n    );\r\n  }\r\n  return (\r\n    <RouterLink to={to} {...rest}>\r\n      {children}\r\n    </RouterLink>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { notification } from 'antd';\r\nimport Link from '../components/Link';\r\n\r\nexport function notify({\r\n  message,\r\n  description,\r\n  txid,\r\n  type = 'info',\r\n  placement = 'bottomLeft',\r\n}: {\r\n  message: string;\r\n  description?: string | JSX.Element;\r\n  txid?: string;\r\n  type?: string;\r\n  placement?: string;\r\n}) {\r\n  if (txid) {\r\n    description = (\r\n      <Link\r\n        external\r\n        to={'https://explorer.solana.com/tx/' + txid}\r\n        style={{ color: '#0000ff' }}\r\n      >\r\n        View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\r\n      </Link>\r\n    );\r\n  }\r\n  notification[type]({\r\n    message: <span style={{ color: 'black' }}>{message}</span>,\r\n    description: (\r\n      <span style={{ color: 'black', opacity: 0.5 }}>{description}</span>\r\n    ),\r\n    placement,\r\n    style: {\r\n      backgroundColor: 'white',\r\n    },\r\n  });\r\n}\r\n","import React, { useContext, useEffect, useMemo, useState } from 'react';\r\nimport Wallet from '@project-serum/sol-wallet-adapter';\r\nimport { notify } from './notifications';\r\nimport { useConnectionConfig } from './connection';\r\nimport { useLocalStorageState } from './utils';\r\nimport { WalletContextValues } from './types';\r\n\r\nexport const WALLET_PROVIDERS = [\r\n  { name: 'sollet.io', url: 'https://www.sollet.io' },\r\n];\r\n\r\nconst WalletContext = React.createContext<null | WalletContextValues>(null);\r\n\r\nexport function WalletProvider({ children }) {\r\n  const { endpoint } = useConnectionConfig();\r\n\r\n  const [savedProviderUrl, setProviderUrl] = useLocalStorageState(\r\n    'walletProvider',\r\n    'https://www.sollet.io',\r\n  );\r\n  let providerUrl;\r\n  if (!savedProviderUrl) {\r\n    providerUrl = 'https://www.sollet.io';\r\n  } else {\r\n    providerUrl = savedProviderUrl;\r\n  }\r\n\r\n  const wallet = useMemo(() => new Wallet(providerUrl, endpoint), [\r\n    providerUrl,\r\n    endpoint,\r\n  ]);\r\n\r\n  const [connected, setConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log('trying to connect');\r\n    wallet.on('connect', () => {\r\n      console.log('connected');\r\n      localStorage.removeItem('feeDiscountKey')\r\n      setConnected(true);\r\n      let walletPublicKey = wallet.publicKey.toBase58();\r\n      let keyToDisplay =\r\n        walletPublicKey.length > 20\r\n          ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(\r\n              walletPublicKey.length - 7,\r\n              walletPublicKey.length,\r\n            )}`\r\n          : walletPublicKey;\r\n      notify({\r\n        message: 'Wallet update',\r\n        description: 'Connected to wallet ' + keyToDisplay,\r\n      });\r\n    });\r\n    wallet.on('disconnect', () => {\r\n      setConnected(false);\r\n      notify({\r\n        message: 'Wallet update',\r\n        description: 'Disconnected from wallet',\r\n      });\r\n      localStorage.removeItem('feeDiscountKey')\r\n    });\r\n    return () => {\r\n      wallet.disconnect();\r\n      setConnected(false);\r\n    };\r\n  }, [wallet]);\r\n\r\n  return (\r\n    <WalletContext.Provider\r\n      value={{\r\n        wallet,\r\n        connected,\r\n        providerUrl,\r\n        setProviderUrl,\r\n        providerName:\r\n          WALLET_PROVIDERS.find(({ url }) => url === providerUrl)?.name ??\r\n          providerUrl,\r\n      }}\r\n    >\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useWallet() {\r\n  const context = useContext(WalletContext);\r\n  if (!context) {\r\n    throw new Error('Missing wallet context');\r\n  }\r\n  return {\r\n    connected: context.connected,\r\n    wallet: context.wallet,\r\n    providerUrl: context.providerUrl,\r\n    setProvider: context.setProviderUrl,\r\n    providerName: context.providerName,\r\n  };\r\n}\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml,body{\r\n  background: #11161D;\r\n}\r\ninput[type=number]::-webkit-inner-spin-button {\r\n  opacity: 0;\r\n}\r\ninput[type=number]:hover::-webkit-inner-spin-button,\r\ninput[type=number]:focus::-webkit-inner-spin-button {\r\n  opacity: 0.25;\r\n}\r\n/* width */\r\n::-webkit-scrollbar {\r\n  width: 15px;\r\n}\r\n/* Track */\r\n::-webkit-scrollbar-track {\r\n  background: #2d313c;\r\n}\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n  background: #5b5f67;\r\n}\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: #5b5f67;\r\n}\r\n.ant-slider-track, .ant-slider:hover .ant-slider-track {\r\n  background-color: #2abdd2;\r\n  opacity: 0.75;\r\n}\r\n.ant-slider-track,\r\n.ant-slider ant-slider-track:hover {\r\n  background-color: #2abdd2;\r\n  opacity: 0.75;\r\n}\r\n.ant-slider-dot-active,\r\n.ant-slider-handle,\r\n.ant-slider-handle-click-focused,\r\n.ant-slider:hover .ant-slider-handle:not(.ant-tooltip-open)  {\r\n  border: 2px solid #2abdd2; \r\n}\r\n.ant-table-tbody > tr.ant-table-row:hover > td {\r\n  background: #273043;\r\n}\r\n.ant-table-tbody > tr > td {\r\n  border-bottom: 8px solid #1A2029;\r\n}\r\n.ant-table-container table > thead > tr:first-child th {\r\n  border-bottom: none;\r\n}\r\n.ant-divider-horizontal.ant-divider-with-text::before, .ant-divider-horizontal.ant-divider-with-text::after {\r\n  border-top: 1px solid #434a59 !important;\r\n}\r\n.ant-layout {\r\n    background: #11161D\r\n  }\r\n  .ant-table {\r\n    background: #212734;\r\n  }\r\n  .ant-table-thead > tr > th {\r\n    background: #1A2029;\r\n  }\r\n.ant-select-item-option-content {\r\n  img {\r\n    margin-right: 4px;\r\n  }\r\n}\r\n.ant-modal-content {\r\n  background-color: #212734;\r\n}\r\n\r\n@-webkit-keyframes highlight {\r\n  from { background-color: #2abdd2;}\r\n  to {background-color: #1A2029;}\r\n}\r\n@-moz-keyframes highlight {\r\n  from { background-color: #2abdd2;}\r\n  to {background-color: #1A2029;}\r\n}\r\n@-keyframes highlight {\r\n  from { background-color: #2abdd2;}\r\n  to {background-color: #1A2029;}\r\n}\r\n.flash {\r\n  -moz-animation: highlight 0.5s ease 0s 1 alternate ;\r\n  -webkit-animation: highlight 0.5s ease 0s 1 alternate;\r\n  animation: highlight 0.5s ease 0s 1 alternate;\r\n}`;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default class ErrorBoundary extends Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div>\r\n          <div>\r\n            <Title level={2}>Something went wrong.</Title>\r\n            <Title level={4}>Please try again later.</Title>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import { notify } from './notifications';\r\nimport { getDecimalCount, sleep } from './utils';\r\nimport { getSelectedTokenAccountForMint } from './markets';\r\nimport {\r\n  Account,\r\n  AccountInfo,\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  RpcResponseAndContext,\r\n  SimulatedTransactionResponse,\r\n  SystemProgram,\r\n  Transaction,\r\n  TransactionSignature,\r\n} from '@solana/web3.js';\r\nimport BN from 'bn.js';\r\nimport {\r\n  DexInstructions,\r\n  Market,\r\n  OpenOrders,\r\n  TOKEN_MINTS,\r\n  TokenInstructions,\r\n} from '@project-serum/serum';\r\nimport Wallet from '@project-serum/sol-wallet-adapter';\r\nimport { SelectedTokenAccounts, TokenAccount } from './types';\r\nimport { Order } from '@project-serum/serum/lib/market';\r\nimport { Buffer } from 'buffer';\r\nimport assert from 'assert';\r\nimport { struct } from 'superstruct';\r\n\r\nexport async function createTokenAccountTransaction({\r\n  connection,\r\n  wallet,\r\n  mintPublicKey,\r\n}: {\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  mintPublicKey: PublicKey;\r\n}): Promise<{\r\n  transaction: Transaction;\r\n  signer: Account;\r\n  newAccountPubkey: PublicKey;\r\n}> {\r\n  const newAccount = new Account();\r\n  const transaction = new Transaction();\r\n  const instruction = SystemProgram.createAccount({\r\n    fromPubkey: wallet.publicKey,\r\n    newAccountPubkey: newAccount.publicKey,\r\n    lamports: await connection.getMinimumBalanceForRentExemption(165),\r\n    space: 165,\r\n    programId: TokenInstructions.TOKEN_PROGRAM_ID,\r\n  });\r\n  transaction.add(instruction);\r\n  transaction.add(\r\n    TokenInstructions.initializeAccount({\r\n      account: newAccount.publicKey,\r\n      mint: mintPublicKey,\r\n      owner: wallet.publicKey,\r\n    }),\r\n  );\r\n  return {\r\n    transaction,\r\n    signer: newAccount,\r\n    newAccountPubkey: newAccount.publicKey,\r\n  };\r\n}\r\n\r\nexport async function settleFunds({\r\n  market,\r\n  openOrders,\r\n  connection,\r\n  wallet,\r\n  baseCurrencyAccount,\r\n  quoteCurrencyAccount,\r\n}: {\r\n  market: Market;\r\n  openOrders: OpenOrders;\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  baseCurrencyAccount: TokenAccount;\r\n  quoteCurrencyAccount: TokenAccount;\r\n}): Promise<string | undefined> {\r\n  if (\r\n    !market ||\r\n    !wallet ||\r\n    !connection ||\r\n    !openOrders ||\r\n    (!baseCurrencyAccount && !quoteCurrencyAccount)\r\n  ) {\r\n    notify({ message: 'Not connected' });\r\n    return;\r\n  }\r\n\r\n  let createAccountTransaction: Transaction | undefined;\r\n  let createAccountSigner: Account | undefined;\r\n  let baseCurrencyAccountPubkey = baseCurrencyAccount?.pubkey;\r\n  let quoteCurrencyAccountPubkey = quoteCurrencyAccount?.pubkey;\r\n\r\n  if (!baseCurrencyAccountPubkey) {\r\n    const result = await createTokenAccountTransaction({\r\n      connection,\r\n      wallet,\r\n      mintPublicKey: market.baseMintAddress,\r\n    });\r\n    baseCurrencyAccountPubkey = result?.newAccountPubkey;\r\n    createAccountTransaction = result?.transaction;\r\n    createAccountSigner = result?.signer;\r\n  }\r\n  if (!quoteCurrencyAccountPubkey) {\r\n    const result = await createTokenAccountTransaction({\r\n      connection,\r\n      wallet,\r\n      mintPublicKey: market.quoteMintAddress,\r\n    });\r\n    quoteCurrencyAccountPubkey = result?.newAccountPubkey;\r\n    createAccountTransaction = result?.transaction;\r\n    createAccountSigner = result?.signer;\r\n  }\r\n  let referrerQuoteWallet: PublicKey | null = null;\r\n  if (market.supportsReferralFees) {\r\n    const usdt = TOKEN_MINTS.find(({ name }) => name === 'USDT');\r\n    const usdc = TOKEN_MINTS.find(({ name }) => name === 'USDC');\r\n    if (\r\n      process.env.REACT_APP_USDT_REFERRAL_FEES_ADDRESS &&\r\n      usdt &&\r\n      market.quoteMintAddress.equals(usdt.address)\r\n    ) {\r\n      referrerQuoteWallet = new PublicKey(\r\n        process.env.REACT_APP_USDT_REFERRAL_FEES_ADDRESS,\r\n      );\r\n    } else if (\r\n      process.env.REACT_APP_USDC_REFERRAL_FEES_ADDRESS &&\r\n      usdc &&\r\n      market.quoteMintAddress.equals(usdc.address)\r\n    ) {\r\n      referrerQuoteWallet = new PublicKey(\r\n        process.env.REACT_APP_USDC_REFERRAL_FEES_ADDRESS,\r\n      );\r\n    }\r\n  }\r\n  const {\r\n    transaction: settleFundsTransaction,\r\n    signers: settleFundsSigners,\r\n  } = await market.makeSettleFundsTransaction(\r\n    connection,\r\n    openOrders,\r\n    baseCurrencyAccountPubkey,\r\n    quoteCurrencyAccountPubkey,\r\n    referrerQuoteWallet,\r\n  );\r\n\r\n  let transaction = mergeTransactions([\r\n    createAccountTransaction,\r\n    settleFundsTransaction,\r\n  ]);\r\n  let signers = createAccountSigner\r\n    ? [...settleFundsSigners, createAccountSigner]\r\n    : settleFundsSigners;\r\n\r\n  return await sendTransaction({\r\n    transaction,\r\n    signers,\r\n    wallet,\r\n    connection,\r\n    sendingMessage: 'Settling funds...',\r\n  });\r\n}\r\n\r\nexport async function settleAllFunds({\r\n  connection,\r\n  wallet,\r\n  tokenAccounts,\r\n  markets,\r\n  selectedTokenAccounts,\r\n}: {\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  tokenAccounts: TokenAccount[];\r\n  markets: Market[];\r\n  selectedTokenAccounts?: SelectedTokenAccounts;\r\n}) {\r\n  if (!markets || !wallet || !connection || !tokenAccounts) {\r\n    return;\r\n  }\r\n\r\n  const programIds: PublicKey[] = [];\r\n  markets\r\n    .reduce((cumulative, m) => {\r\n      // @ts-ignore\r\n      cumulative.push(m._programId);\r\n      return cumulative;\r\n    }, [])\r\n    .forEach((programId) => {\r\n      if (!programIds.find((p) => p.equals(programId))) {\r\n        programIds.push(programId);\r\n      }\r\n    });\r\n\r\n  const getOpenOrdersAccountsForProgramId = async (programId) => {\r\n    const openOrdersAccounts = await OpenOrders.findForOwner(\r\n      connection,\r\n      wallet.publicKey,\r\n      programId,\r\n    );\r\n    return openOrdersAccounts.filter(\r\n      (openOrders) =>\r\n        openOrders.baseTokenFree.toNumber() ||\r\n        openOrders.quoteTokenFree.toNumber(),\r\n    );\r\n  };\r\n\r\n  const openOrdersAccountsForProgramIds = await Promise.all(\r\n    programIds.map((programId) => getOpenOrdersAccountsForProgramId(programId)),\r\n  );\r\n  const openOrdersAccounts = openOrdersAccountsForProgramIds.reduce(\r\n    (accounts, current) => accounts.concat(current),\r\n    [],\r\n  );\r\n\r\n  const settleTransactions = (\r\n    await Promise.all(\r\n      openOrdersAccounts.map((openOrdersAccount) => {\r\n        const market = markets.find((m) =>\r\n          // @ts-ignore\r\n          m._decoded?.ownAddress?.equals(openOrdersAccount.market),\r\n        );\r\n        const baseMint = market?.baseMintAddress;\r\n        const quoteMint = market?.quoteMintAddress;\r\n\r\n        const selectedBaseTokenAccount = getSelectedTokenAccountForMint(\r\n          tokenAccounts,\r\n          baseMint,\r\n          baseMint &&\r\n            selectedTokenAccounts &&\r\n            selectedTokenAccounts[baseMint.toBase58()],\r\n        )?.pubkey;\r\n        const selectedQuoteTokenAccount = getSelectedTokenAccountForMint(\r\n          tokenAccounts,\r\n          quoteMint,\r\n          quoteMint &&\r\n            selectedTokenAccounts &&\r\n            selectedTokenAccounts[quoteMint.toBase58()],\r\n        )?.pubkey;\r\n        if (!selectedBaseTokenAccount || !selectedQuoteTokenAccount) {\r\n          return null;\r\n        }\r\n        return (\r\n          market &&\r\n          market.makeSettleFundsTransaction(\r\n            connection,\r\n            openOrdersAccount,\r\n            selectedBaseTokenAccount,\r\n            selectedQuoteTokenAccount,\r\n          )\r\n        );\r\n      }),\r\n    )\r\n  ).filter(\r\n    (\r\n      x,\r\n    ): x is {\r\n      signers: Account[];\r\n      transaction: Transaction;\r\n      payer: PublicKey;\r\n    } => !!x,\r\n  );\r\n  if (!settleTransactions || settleTransactions.length === 0) return;\r\n\r\n  const transactions = settleTransactions.slice(0, 4).map((t) => t.transaction);\r\n  const signers: Array<Account> = [];\r\n  settleTransactions\r\n    .reduce((cumulative: Array<Account>, t) => cumulative.concat(t.signers), [])\r\n    .forEach((signer) => {\r\n      if (!signers.find((s) => s.publicKey.equals(signer.publicKey))) {\r\n        signers.push(signer);\r\n      }\r\n    });\r\n\r\n  const transaction = mergeTransactions(transactions);\r\n\r\n  return await sendTransaction({\r\n    transaction,\r\n    signers,\r\n    wallet,\r\n    connection,\r\n  });\r\n}\r\n\r\nexport async function cancelOrder(params: {\r\n  market: Market;\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  order: Order;\r\n}) {\r\n  return cancelOrders({ ...params, orders: [params.order] });\r\n}\r\n\r\nexport async function cancelOrders({\r\n  market,\r\n  wallet,\r\n  connection,\r\n  orders,\r\n}: {\r\n  market: Market;\r\n  wallet: Wallet;\r\n  connection: Connection;\r\n  orders: Order[];\r\n}) {\r\n  const transaction = market.makeMatchOrdersTransaction(5);\r\n  orders.forEach((order) => {\r\n    transaction.add(\r\n      market.makeCancelOrderInstruction(connection, wallet.publicKey, order),\r\n    );\r\n  });\r\n  transaction.add(market.makeMatchOrdersTransaction(5));\r\n  return await sendTransaction({\r\n    transaction,\r\n    wallet,\r\n    connection,\r\n    sendingMessage: 'Sending cancel...',\r\n  });\r\n}\r\n\r\nexport async function placeOrder({\r\n  side,\r\n  price,\r\n  size,\r\n  orderType,\r\n  market,\r\n  connection,\r\n  wallet,\r\n  baseCurrencyAccount,\r\n  quoteCurrencyAccount,\r\n  feeDiscountPubkey = undefined,\r\n}: {\r\n  side: 'buy' | 'sell';\r\n  price: number;\r\n  size: number;\r\n  orderType: 'ioc' | 'postOnly' | 'limit';\r\n  market: Market | undefined | null;\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  baseCurrencyAccount: PublicKey | undefined;\r\n  quoteCurrencyAccount: PublicKey | undefined;\r\n  feeDiscountPubkey: PublicKey | undefined;\r\n}) {\r\n  let formattedMinOrderSize =\r\n    market?.minOrderSize?.toFixed(getDecimalCount(market.minOrderSize)) ||\r\n    market?.minOrderSize;\r\n  let formattedTickSize =\r\n    market?.tickSize?.toFixed(getDecimalCount(market.tickSize)) ||\r\n    market?.tickSize;\r\n  const isIncrement = (num, step) =>\r\n    Math.abs((num / step) % 1) < 1e-5 ||\r\n    Math.abs(((num / step) % 1) - 1) < 1e-5;\r\n  if (isNaN(price)) {\r\n    notify({ message: 'Invalid price', type: 'error' });\r\n    return;\r\n  }\r\n  if (isNaN(size)) {\r\n    notify({ message: 'Invalid size', type: 'error' });\r\n    return;\r\n  }\r\n  if (!wallet || !wallet.publicKey) {\r\n    notify({ message: 'Connect wallet', type: 'error' });\r\n    return;\r\n  }\r\n  if (!market) {\r\n    notify({ message: 'Invalid  market', type: 'error' });\r\n    return;\r\n  }\r\n  if (!isIncrement(size, market.minOrderSize)) {\r\n    notify({\r\n      message: `Size must be an increment of ${formattedMinOrderSize}`,\r\n      type: 'error',\r\n    });\r\n    return;\r\n  }\r\n  if (size < market.minOrderSize) {\r\n    notify({ message: 'Size too small', type: 'error' });\r\n    return;\r\n  }\r\n  if (!isIncrement(price, market.tickSize)) {\r\n    notify({\r\n      message: `Price must be an increment of ${formattedTickSize}`,\r\n      type: 'error',\r\n    });\r\n    return;\r\n  }\r\n  if (price < market.tickSize) {\r\n    notify({ message: 'Price under tick size', type: 'error' });\r\n    return;\r\n  }\r\n  const owner = wallet.publicKey;\r\n  const transaction = new Transaction();\r\n  const signers: Account[] = [];\r\n\r\n  if (!baseCurrencyAccount) {\r\n    const {\r\n      transaction: createAccountTransaction,\r\n      signer: createAccountSigners,\r\n      newAccountPubkey,\r\n    } = await createTokenAccountTransaction({\r\n      connection,\r\n      wallet,\r\n      mintPublicKey: market.baseMintAddress,\r\n    });\r\n    transaction.add(createAccountTransaction);\r\n    signers.push(createAccountSigners);\r\n    baseCurrencyAccount = newAccountPubkey;\r\n  }\r\n  if (!quoteCurrencyAccount) {\r\n    const {\r\n      transaction: createAccountTransaction,\r\n      signer: createAccountSigners,\r\n      newAccountPubkey,\r\n    } = await createTokenAccountTransaction({\r\n      connection,\r\n      wallet,\r\n      mintPublicKey: market.quoteMintAddress,\r\n    });\r\n    transaction.add(createAccountTransaction);\r\n    signers.push(createAccountSigners);\r\n    quoteCurrencyAccount = newAccountPubkey;\r\n  }\r\n\r\n  const payer = side === 'sell' ? baseCurrencyAccount : quoteCurrencyAccount;\r\n  if (!payer) {\r\n    notify({\r\n      message: 'Need an SPL token account for cost currency',\r\n      type: 'error',\r\n    });\r\n    return;\r\n  }\r\n  const params = {\r\n    owner,\r\n    payer,\r\n    side,\r\n    price,\r\n    size,\r\n    orderType,\r\n    feeDiscountPubkey: feeDiscountPubkey || null,\r\n  };\r\n  console.log(params);\r\n\r\n  const matchOrderstransaction = market.makeMatchOrdersTransaction(5);\r\n  transaction.add(matchOrderstransaction);\r\n  const startTime = getUnixTs();\r\n  let {\r\n    transaction: placeOrderTx,\r\n    signers: placeOrderSigners,\r\n  } = await market.makePlaceOrderTransaction(\r\n    connection,\r\n    params,\r\n    120_000,\r\n    120_000,\r\n  );\r\n  const endTime = getUnixTs();\r\n  console.log(`Creating order transaction took ${endTime - startTime}`);\r\n  transaction.add(placeOrderTx);\r\n  transaction.add(market.makeMatchOrdersTransaction(5));\r\n  signers.push(...placeOrderSigners);\r\n\r\n  return await sendTransaction({\r\n    transaction,\r\n    wallet,\r\n    connection,\r\n    signers,\r\n    sendingMessage: 'Sending order...',\r\n  });\r\n}\r\n\r\nexport async function listMarket({\r\n  connection,\r\n  wallet,\r\n  baseMint,\r\n  quoteMint,\r\n  baseLotSize,\r\n  quoteLotSize,\r\n  dexProgramId,\r\n}: {\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  baseMint: PublicKey;\r\n  quoteMint: PublicKey;\r\n  baseLotSize: number;\r\n  quoteLotSize: number;\r\n  dexProgramId: PublicKey;\r\n}) {\r\n  const market = new Account();\r\n  const requestQueue = new Account();\r\n  const eventQueue = new Account();\r\n  const bids = new Account();\r\n  const asks = new Account();\r\n  const baseVault = new Account();\r\n  const quoteVault = new Account();\r\n  const feeRateBps = 0;\r\n  const quoteDustThreshold = new BN(100);\r\n\r\n  async function getVaultOwnerAndNonce() {\r\n    const nonce = new BN(0);\r\n    while (true) {\r\n      try {\r\n        const vaultOwner = await PublicKey.createProgramAddress(\r\n          [market.publicKey.toBuffer(), nonce.toArrayLike(Buffer, 'le', 8)],\r\n          dexProgramId,\r\n        );\r\n        return [vaultOwner, nonce];\r\n      } catch (e) {\r\n        nonce.iaddn(1);\r\n      }\r\n    }\r\n  }\r\n  const [vaultOwner, vaultSignerNonce] = await getVaultOwnerAndNonce();\r\n\r\n  const tx1 = new Transaction();\r\n  tx1.add(\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: baseVault.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(165),\r\n      space: 165,\r\n      programId: TokenInstructions.TOKEN_PROGRAM_ID,\r\n    }),\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: quoteVault.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(165),\r\n      space: 165,\r\n      programId: TokenInstructions.TOKEN_PROGRAM_ID,\r\n    }),\r\n    TokenInstructions.initializeAccount({\r\n      account: baseVault.publicKey,\r\n      mint: baseMint,\r\n      owner: vaultOwner,\r\n    }),\r\n    TokenInstructions.initializeAccount({\r\n      account: quoteVault.publicKey,\r\n      mint: quoteMint,\r\n      owner: vaultOwner,\r\n    }),\r\n  );\r\n\r\n  const tx2 = new Transaction();\r\n  tx2.add(\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: market.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(\r\n        Market.getLayout(dexProgramId).span,\r\n      ),\r\n      space: Market.getLayout(dexProgramId).span,\r\n      programId: dexProgramId,\r\n    }),\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: requestQueue.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(5120 + 12),\r\n      space: 5120 + 12,\r\n      programId: dexProgramId,\r\n    }),\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: eventQueue.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(262144 + 12),\r\n      space: 262144 + 12,\r\n      programId: dexProgramId,\r\n    }),\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: bids.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(65536 + 12),\r\n      space: 65536 + 12,\r\n      programId: dexProgramId,\r\n    }),\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: asks.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(65536 + 12),\r\n      space: 65536 + 12,\r\n      programId: dexProgramId,\r\n    }),\r\n    DexInstructions.initializeMarket({\r\n      market: market.publicKey,\r\n      requestQueue: requestQueue.publicKey,\r\n      eventQueue: eventQueue.publicKey,\r\n      bids: bids.publicKey,\r\n      asks: asks.publicKey,\r\n      baseVault: baseVault.publicKey,\r\n      quoteVault: quoteVault.publicKey,\r\n      baseMint,\r\n      quoteMint,\r\n      baseLotSize: new BN(baseLotSize),\r\n      quoteLotSize: new BN(quoteLotSize),\r\n      feeRateBps,\r\n      vaultSignerNonce,\r\n      quoteDustThreshold,\r\n      programId: dexProgramId,\r\n    }),\r\n  );\r\n\r\n  const signedTransactions = await signTransactions({\r\n    transactionsAndSigners: [\r\n      { transaction: tx1, signers: [baseVault, quoteVault] },\r\n      {\r\n        transaction: tx2,\r\n        signers: [market, requestQueue, eventQueue, bids, asks],\r\n      },\r\n    ],\r\n    wallet,\r\n    connection,\r\n  });\r\n  for (let signedTransaction of signedTransactions) {\r\n    await sendSignedTransaction({\r\n      signedTransaction,\r\n      connection,\r\n    });\r\n  }\r\n\r\n  return market.publicKey;\r\n}\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nconst DEFAULT_TIMEOUT = 15000;\r\n\r\nexport async function sendTransaction({\r\n  transaction,\r\n  wallet,\r\n  signers = [],\r\n  connection,\r\n  sendingMessage = 'Sending transaction...',\r\n  sentMessage = 'Transaction sent',\r\n  successMessage = 'Transaction confirmed',\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  transaction: Transaction;\r\n  wallet: Wallet;\r\n  signers?: Array<Account>;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}) {\r\n  const signedTransaction = await signTransaction({\r\n    transaction,\r\n    wallet,\r\n    signers,\r\n    connection,\r\n  });\r\n  return await sendSignedTransaction({\r\n    signedTransaction,\r\n    connection,\r\n    sendingMessage,\r\n    sentMessage,\r\n    successMessage,\r\n    timeout,\r\n  });\r\n}\r\n\r\nexport async function signTransaction({\r\n  transaction,\r\n  wallet,\r\n  signers = [],\r\n  connection,\r\n}: {\r\n  transaction: Transaction;\r\n  wallet: Wallet;\r\n  signers?: Array<Account>;\r\n  connection: Connection;\r\n}) {\r\n  transaction.recentBlockhash = (\r\n    await connection.getRecentBlockhash('max')\r\n  ).blockhash;\r\n  transaction.setSigners(wallet.publicKey, ...signers.map((s) => s.publicKey));\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  return await wallet.signTransaction(transaction);\r\n}\r\n\r\nexport async function signTransactions({\r\n  transactionsAndSigners,\r\n  wallet,\r\n  connection,\r\n}: {\r\n  transactionsAndSigners: {\r\n    transaction: Transaction;\r\n    signers?: Array<Account>;\r\n  }[];\r\n  wallet: Wallet;\r\n  connection: Connection;\r\n}) {\r\n  const blockhash = (await connection.getRecentBlockhash('max')).blockhash;\r\n  transactionsAndSigners.forEach(({ transaction, signers = [] }) => {\r\n    transaction.recentBlockhash = blockhash;\r\n    transaction.setSigners(\r\n      wallet.publicKey,\r\n      ...signers.map((s) => s.publicKey),\r\n    );\r\n    if (signers?.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n  });\r\n  return await wallet.signAllTransactions(\r\n    transactionsAndSigners.map(({ transaction }) => transaction),\r\n  );\r\n}\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  sendingMessage = 'Sending transaction...',\r\n  sentMessage = 'Transaction sent',\r\n  successMessage = 'Transaction confirmed',\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<string> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n  const startTime = getUnixTs();\r\n  notify({ message: sendingMessage });\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n  notify({ message: sentMessage, type: 'success', txid });\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(300);\r\n    }\r\n  })();\r\n  try {\r\n    await awaitTransactionSignatureConfirmation(txid, timeout, connection);\r\n  } catch (err) {\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n  notify({ message: successMessage, type: 'success', txid });\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return txid;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n) {\r\n  let done = false;\r\n  const result = await new Promise((resolve, reject) => {\r\n    (async () => {\r\n      setTimeout(() => {\r\n        if (done) {\r\n          return;\r\n        }\r\n        done = true;\r\n        console.log('Timed out for txid', txid);\r\n        reject({ timeout: true });\r\n      }, timeout);\r\n      try {\r\n        connection.onSignature(\r\n          txid,\r\n          (result) => {\r\n            console.log('WS confirmed', txid, result);\r\n            done = true;\r\n            if (result.err) {\r\n              reject(result.err);\r\n            } else {\r\n              resolve(result);\r\n            }\r\n          },\r\n          'recent',\r\n        );\r\n        console.log('Set up WS connection', txid);\r\n      } catch (e) {\r\n        done = true;\r\n        console.log('WS error in setup', txid, e);\r\n      }\r\n      while (!done) {\r\n        // eslint-disable-next-line no-loop-func\r\n        (async () => {\r\n          try {\r\n            const signatureStatuses = await connection.getSignatureStatuses([\r\n              txid,\r\n            ]);\r\n            const result = signatureStatuses && signatureStatuses.value[0];\r\n            if (!done) {\r\n              if (!result) {\r\n                console.log('REST null result for', txid, result);\r\n              } else if (result.err) {\r\n                console.log('REST error for', txid, result);\r\n                done = true;\r\n                reject(result.err);\r\n              } else if (!result.confirmations) {\r\n                console.log('REST no confirmations for', txid, result);\r\n              } else {\r\n                console.log('REST confirmation for', txid, result);\r\n                done = true;\r\n                resolve(result);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            if (!done) {\r\n              console.log('REST connection error: txid', txid, e);\r\n            }\r\n          }\r\n        })();\r\n        await sleep(300);\r\n      }\r\n    })();\r\n  });\r\n  done = true;\r\n  return result;\r\n}\r\n\r\nfunction mergeTransactions(transactions: (Transaction | undefined)[]) {\r\n  const transaction = new Transaction();\r\n  transactions\r\n    .filter((t): t is Transaction => t !== undefined)\r\n    .forEach((t) => {\r\n      transaction.add(t);\r\n    });\r\n  return transaction;\r\n}\r\n\r\nfunction jsonRpcResult(resultDescription: any) {\r\n  const jsonRpcVersion = struct.literal('2.0');\r\n  return struct.union([\r\n    struct({\r\n      jsonrpc: jsonRpcVersion,\r\n      id: 'string',\r\n      error: 'any',\r\n    }),\r\n    struct({\r\n      jsonrpc: jsonRpcVersion,\r\n      id: 'string',\r\n      error: 'null?',\r\n      result: resultDescription,\r\n    }),\r\n  ]);\r\n}\r\n\r\nfunction jsonRpcResultAndContext(resultDescription: any) {\r\n  return jsonRpcResult({\r\n    context: struct({\r\n      slot: 'number',\r\n    }),\r\n    value: resultDescription,\r\n  });\r\n}\r\n\r\nconst AccountInfoResult = struct({\r\n  executable: 'boolean',\r\n  owner: 'string',\r\n  lamports: 'number',\r\n  data: 'any',\r\n  rentEpoch: 'number?',\r\n});\r\n\r\nexport const GetMultipleAccountsAndContextRpcResult = jsonRpcResultAndContext(\r\n  struct.array([struct.union(['null', AccountInfoResult])]),\r\n);\r\n\r\nexport async function getMultipleSolanaAccounts(\r\n  connection: Connection,\r\n  publicKeys: PublicKey[],\r\n): Promise<\r\n  RpcResponseAndContext<{ [key: string]: AccountInfo<Buffer> | null }>\r\n> {\r\n  const args = [publicKeys.map((k) => k.toBase58()), { commitment: 'recent' }];\r\n  // @ts-ignore\r\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\r\n  const res = GetMultipleAccountsAndContextRpcResult(unsafeRes);\r\n  if (res.error) {\r\n    throw new Error(\r\n      'failed to get info about accounts ' +\r\n        publicKeys.map((k) => k.toBase58()).join(', ') +\r\n        ': ' +\r\n        res.error.message,\r\n    );\r\n  }\r\n  assert(typeof res.result !== 'undefined');\r\n  const accounts: Array<{\r\n    executable: any;\r\n    owner: PublicKey;\r\n    lamports: any;\r\n    data: Buffer;\r\n  } | null> = [];\r\n  for (const account of res.result.value) {\r\n    let value: {\r\n      executable: any;\r\n      owner: PublicKey;\r\n      lamports: any;\r\n      data: Buffer;\r\n    } | null = null;\r\n    if (res.result.value) {\r\n      const { executable, owner, lamports, data } = account;\r\n      assert(data[1] === 'base64');\r\n      value = {\r\n        executable,\r\n        owner: new PublicKey(owner),\r\n        lamports,\r\n        data: Buffer.from(data[0], 'base64'),\r\n      };\r\n    }\r\n    accounts.push(value);\r\n  }\r\n  return {\r\n    context: {\r\n      slot: res.result.context.slot,\r\n    },\r\n    value: Object.fromEntries(\r\n      accounts.map((account, i) => [publicKeys[i].toBase58(), account]),\r\n    ),\r\n  };\r\n}\r\n\r\n/** Copy of Connection.simulateTransaction that takes a commitment parameter. */\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n","import * as BufferLayout from 'buffer-layout';\r\nimport bs58 from 'bs58';\r\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\r\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\r\nimport { TokenAccount } from './types';\r\nimport { TOKEN_MINTS } from '@project-serum/serum';\r\nimport { useAllMarkets, useCustomMarkets, useTokenAccounts } from './markets';\r\nimport { getMultipleSolanaAccounts } from './send';\r\nimport { useConnection } from './connection';\r\nimport { useAsyncData } from './fetch-loop';\r\nimport tuple from 'immutable-tuple';\r\nimport BN from 'bn.js';\r\nimport { useMemo } from 'react';\r\n\r\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\r\n  BufferLayout.blob(32, 'mint'),\r\n  BufferLayout.blob(32, 'owner'),\r\n  BufferLayout.nu64('amount'),\r\n  BufferLayout.blob(93),\r\n]);\r\n\r\nexport const MINT_LAYOUT = BufferLayout.struct([\r\n  BufferLayout.blob(36),\r\n  BufferLayout.blob(8, 'supply'),\r\n  BufferLayout.u8('decimals'),\r\n  BufferLayout.u8('initialized'),\r\n  BufferLayout.blob(36),\r\n]);\r\n\r\nexport function parseTokenAccountData(\r\n  data: Buffer,\r\n): { mint: PublicKey; owner: PublicKey; amount: number } {\r\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\r\n  return {\r\n    mint: new PublicKey(mint),\r\n    owner: new PublicKey(owner),\r\n    amount,\r\n  };\r\n}\r\n\r\nexport interface MintInfo {\r\n  decimals: number;\r\n  initialized: boolean;\r\n  supply: BN;\r\n}\r\n\r\nexport function parseTokenMintData(data): MintInfo {\r\n  let { decimals, initialized, supply } = MINT_LAYOUT.decode(data);\r\n  return {\r\n    decimals,\r\n    initialized: !!initialized,\r\n    supply: new BN(supply, 10, 'le'),\r\n  };\r\n}\r\n\r\nexport function getOwnedAccountsFilters(publicKey: PublicKey) {\r\n  return [\r\n    {\r\n      memcmp: {\r\n        offset: ACCOUNT_LAYOUT.offsetOf('owner'),\r\n        bytes: publicKey.toBase58(),\r\n      },\r\n    },\r\n    {\r\n      dataSize: ACCOUNT_LAYOUT.span,\r\n    },\r\n  ];\r\n}\r\n\r\nexport const TOKEN_PROGRAM_ID = new PublicKey(\r\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\r\n);\r\n\r\nexport async function getOwnedTokenAccounts(\r\n  connection: Connection,\r\n  publicKey: PublicKey,\r\n): Promise<Array<{ publicKey: PublicKey; accountInfo: AccountInfo<Buffer> }>> {\r\n  let filters = getOwnedAccountsFilters(publicKey);\r\n  // @ts-ignore\r\n  let resp = await connection._rpcRequest('getProgramAccounts', [\r\n    TOKEN_PROGRAM_ID.toBase58(),\r\n    {\r\n      commitment: connection.commitment,\r\n      filters,\r\n    },\r\n  ]);\r\n  if (resp.error) {\r\n    throw new Error(\r\n      'failed to get token accounts owned by ' +\r\n        publicKey.toBase58() +\r\n        ': ' +\r\n        resp.error.message,\r\n    );\r\n  }\r\n  return resp.result\r\n    .map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\r\n      publicKey: new PublicKey(pubkey),\r\n      accountInfo: {\r\n        data: bs58.decode(data),\r\n        executable,\r\n        owner: new PublicKey(owner),\r\n        lamports,\r\n      },\r\n    }))\r\n    .filter(({ accountInfo }) => {\r\n      // TODO: remove this check once mainnet is updated\r\n      return filters.every((filter) => {\r\n        if (filter.dataSize) {\r\n          return accountInfo.data.length === filter.dataSize;\r\n        } else if (filter.memcmp) {\r\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\r\n          return accountInfo.data\r\n            .slice(\r\n              filter.memcmp.offset,\r\n              filter.memcmp.offset + filterBytes.length,\r\n            )\r\n            .equals(filterBytes);\r\n        }\r\n        return false;\r\n      });\r\n    });\r\n}\r\n\r\nexport async function getTokenAccountInfo(\r\n  connection: Connection,\r\n  ownerAddress: PublicKey,\r\n) {\r\n  let [splAccounts, account] = await Promise.all([\r\n    getOwnedTokenAccounts(connection, ownerAddress),\r\n    connection.getAccountInfo(ownerAddress),\r\n  ]);\r\n  const parsedSplAccounts: TokenAccount[] = splAccounts.map(\r\n    ({ publicKey, accountInfo }) => {\r\n      return {\r\n        pubkey: publicKey,\r\n        account: accountInfo,\r\n        effectiveMint: parseTokenAccountData(accountInfo.data).mint,\r\n      };\r\n    },\r\n  );\r\n  return parsedSplAccounts.concat({\r\n    pubkey: ownerAddress,\r\n    account,\r\n    effectiveMint: WRAPPED_SOL_MINT,\r\n  });\r\n}\r\n\r\nexport function useMintToTickers(): { [mint: string]: string } {\r\n  const { customMarkets } = useCustomMarkets();\r\n  const [markets] = useAllMarkets();\r\n  return useMemo(() => {\r\n    const mintsToTickers = Object.fromEntries(\r\n      TOKEN_MINTS.map((mint) => [mint.address.toBase58(), mint.name]),\r\n    );\r\n    for (let market of markets || []) {\r\n      const customMarketInfo = customMarkets.find(\r\n        (customMarket) =>\r\n          customMarket.address === market.market.address.toBase58(),\r\n      );\r\n      if (!(market.market.baseMintAddress.toBase58() in mintsToTickers)) {\r\n        if (customMarketInfo) {\r\n          mintsToTickers[market.market.baseMintAddress.toBase58()] =\r\n            customMarketInfo.baseLabel || `${customMarketInfo.name}_BASE`;\r\n        }\r\n      }\r\n      if (!(market.market.quoteMintAddress.toBase58() in mintsToTickers)) {\r\n        if (customMarketInfo) {\r\n          mintsToTickers[market.market.quoteMintAddress.toBase58()] =\r\n            customMarketInfo.quoteLabel || `${customMarketInfo.name}_QUOTE`;\r\n        }\r\n      }\r\n    }\r\n    return mintsToTickers;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [markets?.length, customMarkets.length]);\r\n}\r\n\r\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000;\r\n\r\nexport function useMintInfos(): [\r\n  (\r\n    | {\r\n        [mintAddress: string]: {\r\n          decimals: number;\r\n          initialized: boolean;\r\n        } | null;\r\n      }\r\n    | null\r\n    | undefined\r\n  ),\r\n  boolean,\r\n] {\r\n  const connection = useConnection();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const [allMarkets] = useAllMarkets();\r\n\r\n  const allMints = (tokenAccounts || [])\r\n    .map((account) => account.effectiveMint)\r\n    .concat(\r\n      (allMarkets || []).map((marketInfo) => marketInfo.market.baseMintAddress),\r\n    )\r\n    .concat(\r\n      (allMarkets || []).map(\r\n        (marketInfo) => marketInfo.market.quoteMintAddress,\r\n      ),\r\n    );\r\n  const uniqueMints = [...new Set(allMints.map((mint) => mint.toBase58()))].map(\r\n    (stringMint) => new PublicKey(stringMint),\r\n  );\r\n\r\n  const getAllMintInfo = async () => {\r\n    const mintInfos = await getMultipleSolanaAccounts(connection, uniqueMints);\r\n    return Object.fromEntries(\r\n      Object.entries(mintInfos.value).map(([key, accountInfo]) => [\r\n        key,\r\n        accountInfo && parseTokenMintData(accountInfo.data),\r\n      ]),\r\n    );\r\n  };\r\n\r\n  return useAsyncData(\r\n    getAllMintInfo,\r\n    tuple(\r\n      'getAllMintInfo',\r\n      connection,\r\n      (tokenAccounts || []).length,\r\n      (allMarkets || []).length,\r\n    ),\r\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n","import { BonfidaTrade } from './types';\r\n\r\nexport default class BonfidaApi {\r\n  static URL: string = 'https://serum-api.bonfida.com/';\r\n\r\n  static async get(path: string) {\r\n    try {\r\n      const response = await fetch(this.URL + path);\r\n      if (response.ok) {\r\n        const responseJson = await response.json();\r\n        return responseJson.success ? responseJson.data : null;\r\n      }\r\n    } catch (err) {\r\n      console.log(`Error fetching from Bonfida API ${path}: ${err}`);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static async getRecentTrades(\r\n    marketAddress: string,\r\n  ): Promise<BonfidaTrade[] | null> {\r\n    return BonfidaApi.get(`trades/address/${marketAddress}`);\r\n  }\r\n}\r\n\r\nexport const BONFIDA_DATA_FEED = 'https://serum-api.bonfida.com/tv';\r\n","import {\r\n  decodeEventQueue,\r\n  Market,\r\n  MARKETS,\r\n  OpenOrders,\r\n  Orderbook,\r\n  TOKEN_MINTS,\r\n  TokenInstructions,\r\n} from '@project-serum/serum';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport {\r\n  divideBnToNumber,\r\n  floorToDecimal,\r\n  getTokenMultiplierFromDecimals,\r\n  useLocalStorageState,\r\n} from './utils';\r\nimport { refreshCache, useAsyncData } from './fetch-loop';\r\nimport { useAccountData, useAccountInfo, useConnection } from './connection';\r\nimport { useWallet } from './wallet';\r\nimport tuple from 'immutable-tuple';\r\nimport { notify } from './notifications';\r\nimport BN from 'bn.js';\r\nimport {\r\n  getTokenAccountInfo,\r\n  parseTokenAccountData,\r\n  useMintInfos,\r\n} from './tokens';\r\nimport {\r\n  Balances,\r\n  CustomMarketInfo,\r\n  DeprecatedOpenOrdersBalances,\r\n  FullMarketInfo,\r\n  MarketContextValues,\r\n  MarketInfo,\r\n  OrderWithMarketAndMarketName,\r\n  SelectedTokenAccounts,\r\n  TokenAccount,\r\n  Trade,\r\n} from './types';\r\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\r\nimport { Order } from '@project-serum/serum/lib/market';\r\nimport BonfidaApi from './bonfidaConnector';\r\n\r\n// Used in debugging, should be false in production\r\nconst _IGNORE_DEPRECATED = false;\r\n\r\nexport const USE_MARKETS: MarketInfo[] = _IGNORE_DEPRECATED\r\n  ? MARKETS.map((m) => ({ ...m, deprecated: false }))\r\n  : MARKETS;\r\n\r\nexport function useMarketsList() {\r\n  return USE_MARKETS.filter(({ deprecated }) => !deprecated);\r\n}\r\n\r\nexport function useAllMarkets() {\r\n  const connection = useConnection();\r\n  const { customMarkets } = useCustomMarkets();\r\n\r\n  const getAllMarkets = async () => {\r\n    const markets: Array<{\r\n      market: Market;\r\n      marketName: string;\r\n      programId: PublicKey;\r\n    } | null> = await Promise.all(\r\n      getMarketInfos(customMarkets).map(async (marketInfo) => {\r\n        try {\r\n          const market = await Market.load(\r\n            connection,\r\n            marketInfo.address,\r\n            {},\r\n            marketInfo.programId,\r\n          );\r\n          return {\r\n            market,\r\n            marketName: marketInfo.name,\r\n            programId: marketInfo.programId,\r\n          };\r\n        } catch (e) {\r\n          notify({\r\n            message: 'Error loading all market',\r\n            description: e.message,\r\n            type: 'error',\r\n          });\r\n          return null;\r\n        }\r\n      }),\r\n    );\r\n    return markets.filter(\r\n      (m): m is { market: Market; marketName: string; programId: PublicKey } =>\r\n        !!m,\r\n    );\r\n  };\r\n  return useAsyncData(\r\n    getAllMarkets,\r\n    tuple('getAllMarkets', customMarkets.length, connection),\r\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function useUnmigratedOpenOrdersAccounts() {\r\n  const connection = useConnection();\r\n  const { wallet } = useWallet();\r\n\r\n  async function getUnmigratedOpenOrdersAccounts(): Promise<OpenOrders[]> {\r\n    if (!wallet || !connection || !wallet.publicKey) {\r\n      return [];\r\n    }\r\n    console.log('refreshing useUnmigratedOpenOrdersAccounts');\r\n    let deprecatedOpenOrdersAccounts: OpenOrders[] = [];\r\n    const deprecatedProgramIds = Array.from(\r\n      new Set(\r\n        USE_MARKETS.filter(\r\n          ({ deprecated }) => deprecated,\r\n        ).map(({ programId }) => programId.toBase58()),\r\n      ),\r\n    ).map((publicKeyStr) => new PublicKey(publicKeyStr));\r\n    let programId: PublicKey;\r\n    for (programId of deprecatedProgramIds) {\r\n      try {\r\n        const openOrdersAccounts = await OpenOrders.findForOwner(\r\n          connection,\r\n          wallet.publicKey,\r\n          programId,\r\n        );\r\n        deprecatedOpenOrdersAccounts = deprecatedOpenOrdersAccounts.concat(\r\n          openOrdersAccounts\r\n            .filter(\r\n              (openOrders) =>\r\n                openOrders.baseTokenTotal.toNumber() ||\r\n                openOrders.quoteTokenTotal.toNumber(),\r\n            )\r\n            .filter((openOrders) =>\r\n              USE_MARKETS.some(\r\n                (market) =>\r\n                  market.deprecated && market.address.equals(openOrders.market),\r\n              ),\r\n            ),\r\n        );\r\n      } catch (e) {\r\n        console.log(\r\n          'Error loading deprecated markets',\r\n          programId?.toBase58(),\r\n          e.message,\r\n        );\r\n      }\r\n    }\r\n    // Maybe sort\r\n    return deprecatedOpenOrdersAccounts;\r\n  }\r\n\r\n  const cacheKey = tuple(\r\n    'getUnmigratedOpenOrdersAccounts',\r\n    connection,\r\n    wallet?.publicKey?.toBase58(),\r\n  );\r\n  const [accounts] = useAsyncData(getUnmigratedOpenOrdersAccounts, cacheKey, {\r\n    refreshInterval: _VERY_SLOW_REFRESH_INTERVAL,\r\n  });\r\n\r\n  return {\r\n    accounts,\r\n    refresh: (clearCache: boolean) => refreshCache(cacheKey, clearCache),\r\n  };\r\n}\r\n\r\nconst MarketContext: React.Context<null | MarketContextValues> = React.createContext<null | MarketContextValues>(\r\n  null,\r\n);\r\n\r\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000;\r\n\r\n// For things that don't really change\r\nconst _SLOW_REFRESH_INTERVAL = 5 * 1000;\r\n\r\n// For things that change frequently\r\nconst _FAST_REFRESH_INTERVAL = 1000;\r\n\r\nexport const DEFAULT_MARKET = USE_MARKETS.find(\r\n  ({ name, deprecated }) => name === 'SRM/USDT' && !deprecated,\r\n);\r\n\r\nexport function getMarketDetails(\r\n  market: Market | undefined | null,\r\n  customMarkets: CustomMarketInfo[],\r\n): FullMarketInfo {\r\n  if (!market) {\r\n    return {};\r\n  }\r\n  const marketInfos = getMarketInfos(customMarkets);\r\n  const marketInfo = marketInfos.find((otherMarket) =>\r\n    otherMarket.address.equals(market.address),\r\n  );\r\n  const baseCurrency =\r\n    (market?.baseMintAddress &&\r\n      TOKEN_MINTS.find((token) => token.address.equals(market.baseMintAddress))\r\n        ?.name) ||\r\n    (marketInfo?.baseLabel && `${marketInfo?.baseLabel}*`) ||\r\n    'UNKNOWN';\r\n  const quoteCurrency =\r\n    (market?.quoteMintAddress &&\r\n      TOKEN_MINTS.find((token) => token.address.equals(market.quoteMintAddress))\r\n        ?.name) ||\r\n    (marketInfo?.quoteLabel && `${marketInfo?.quoteLabel}*`) ||\r\n    'UNKNOWN';\r\n\r\n  return {\r\n    ...marketInfo,\r\n    marketName: marketInfo?.name,\r\n    baseCurrency,\r\n    quoteCurrency,\r\n    marketInfo,\r\n  };\r\n}\r\n\r\nexport function useCustomMarkets() {\r\n  const [customMarkets, setCustomMarkets] = useLocalStorageState<\r\n    CustomMarketInfo[]\r\n  >('customMarkets', []);\r\n  return { customMarkets, setCustomMarkets };\r\n}\r\n\r\nexport function MarketProvider({ marketAddress, setMarketAddress, children }) {\r\n  const { customMarkets, setCustomMarkets } = useCustomMarkets();\r\n\r\n  const address = marketAddress && new PublicKey(marketAddress);\r\n  const connection = useConnection();\r\n  const marketInfos = getMarketInfos(customMarkets);\r\n  const marketInfo =\r\n    address && marketInfos.find((market) => market.address.equals(address));\r\n\r\n  // Replace existing market with a non-deprecated one on first load\r\n  useEffect(() => {\r\n    if (marketInfo && marketInfo.deprecated) {\r\n      console.log('Switching markets from deprecated', marketInfo);\r\n      if (DEFAULT_MARKET) {\r\n        setMarketAddress(DEFAULT_MARKET.address.toBase58());\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const [market, setMarket] = useState<Market | null>();\r\n  useEffect(() => {\r\n    if (\r\n      market &&\r\n      marketInfo &&\r\n      // @ts-ignore\r\n      market._decoded.ownAddress?.equals(marketInfo?.address)\r\n    ) {\r\n      return;\r\n    }\r\n    setMarket(null);\r\n    if (!marketInfo || !marketInfo.address) {\r\n      notify({\r\n        message: 'Error loading market',\r\n        description: 'Please select a market from the dropdown',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    Market.load(connection, marketInfo.address, {}, marketInfo.programId)\r\n      .then(setMarket)\r\n      .catch((e) =>\r\n        notify({\r\n          message: 'Error loading market',\r\n          description: e.message,\r\n          type: 'error',\r\n        }),\r\n      );\r\n    // eslint-disable-next-line\r\n  }, [connection, marketInfo]);\r\n\r\n  return (\r\n    <MarketContext.Provider\r\n      value={{\r\n        market,\r\n        ...getMarketDetails(market, customMarkets),\r\n        setMarketAddress,\r\n        customMarkets,\r\n        setCustomMarkets,\r\n      }}\r\n    >\r\n      {children}\r\n    </MarketContext.Provider>\r\n  );\r\n}\r\n\r\nexport function getTradePageUrl(marketAddress?: string) {\r\n  if (!marketAddress) {\r\n    const saved = localStorage.getItem('marketAddress');\r\n    if (saved) {\r\n      marketAddress = JSON.parse(saved);\r\n    }\r\n    marketAddress = marketAddress || DEFAULT_MARKET?.address.toBase58() || '';\r\n  }\r\n  return `/market/${marketAddress}`;\r\n}\r\n\r\nexport function useSelectedTokenAccounts(): [\r\n  SelectedTokenAccounts,\r\n  (newSelectedTokenAccounts: SelectedTokenAccounts) => void,\r\n] {\r\n  const [\r\n    selectedTokenAccounts,\r\n    setSelectedTokenAccounts,\r\n  ] = useLocalStorageState<SelectedTokenAccounts>('selectedTokenAccounts', {});\r\n  return [selectedTokenAccounts, setSelectedTokenAccounts];\r\n}\r\n\r\nexport function useMarket() {\r\n  const context = useContext(MarketContext);\r\n  if (!context) {\r\n    throw new Error('Missing market context');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useMarkPrice() {\r\n  const [markPrice, setMarkPrice] = useState<null | number>(null);\r\n\r\n  const [orderbook] = useOrderbook();\r\n  const trades = useTrades();\r\n\r\n  useEffect(() => {\r\n    let bb = orderbook?.bids?.length > 0 && Number(orderbook.bids[0][0]);\r\n    let ba = orderbook?.asks?.length > 0 && Number(orderbook.asks[0][0]);\r\n    let last = trades && trades.length > 0 && trades[0].price;\r\n\r\n    let markPrice =\r\n      bb && ba\r\n        ? last\r\n          ? [bb, ba, last].sort((a, b) => a - b)[1]\r\n          : (bb + ba) / 2\r\n        : null;\r\n\r\n    setMarkPrice(markPrice);\r\n  }, [orderbook, trades]);\r\n\r\n  return markPrice;\r\n}\r\n\r\nexport function _useUnfilteredTrades(limit = 10000) {\r\n  const { market } = useMarket();\r\n  const connection = useConnection();\r\n  async function getUnfilteredTrades(): Promise<any[] | null> {\r\n    if (!market || !connection) {\r\n      return null;\r\n    }\r\n    return await market.loadFills(connection, limit);\r\n  }\r\n  const [trades] = useAsyncData(\r\n    getUnfilteredTrades,\r\n    tuple('getUnfilteredTrades', market, connection),\r\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\r\n  );\r\n  return trades;\r\n  // NOTE: For now, websocket is too expensive since the event queue is large\r\n  // and updates very frequently\r\n\r\n  // let data = useAccountData(market && market._decoded.eventQueue);\r\n  // if (!data) {\r\n  //   return null;\r\n  // }\r\n  // const events = decodeEventQueue(data, limit);\r\n  // return events\r\n  //   .filter((event) => event.eventFlags.fill && event.nativeQuantityPaid.gtn(0))\r\n  //   .map(market.parseFillEvent.bind(market));\r\n}\r\n\r\nexport function useBonfidaTrades() {\r\n  const { market } = useMarket();\r\n  const marketAddress = market?.address.toBase58();\r\n\r\n  async function getBonfidaTrades() {\r\n    if (!marketAddress) {\r\n      return null;\r\n    }\r\n    return await BonfidaApi.getRecentTrades(marketAddress);\r\n  }\r\n\r\n  return useAsyncData(\r\n    getBonfidaTrades,\r\n    tuple('getBonfidaTrades', marketAddress),\r\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\r\n    false,\r\n  );\r\n}\r\n\r\nexport function useOrderbookAccounts() {\r\n  const { market } = useMarket();\r\n  // @ts-ignore\r\n  let bidData = useAccountData(market && market._decoded.bids);\r\n  // @ts-ignore\r\n  let askData = useAccountData(market && market._decoded.asks);\r\n  return {\r\n    bidOrderbook: market && bidData ? Orderbook.decode(market, bidData) : null,\r\n    askOrderbook: market && askData ? Orderbook.decode(market, askData) : null,\r\n  };\r\n}\r\n\r\nexport function useOrderbook(\r\n  depth = 20,\r\n): [{ bids: number[][]; asks: number[][] }, boolean] {\r\n  const { bidOrderbook, askOrderbook } = useOrderbookAccounts();\r\n  const { market } = useMarket();\r\n  const bids =\r\n    !bidOrderbook || !market\r\n      ? []\r\n      : bidOrderbook.getL2(depth).map(([price, size]) => [price, size]);\r\n  const asks =\r\n    !askOrderbook || !market\r\n      ? []\r\n      : askOrderbook.getL2(depth).map(([price, size]) => [price, size]);\r\n  return [{ bids, asks }, !!bids || !!asks];\r\n}\r\n\r\n// Want the balances table to be fast-updating, dont want open orders to flicker\r\n// TODO: Update to use websocket\r\nexport function useOpenOrdersAccounts(fast = false) {\r\n  const { market } = useMarket();\r\n  const { connected, wallet } = useWallet();\r\n  const connection = useConnection();\r\n  async function getOpenOrdersAccounts() {\r\n    if (!connected) {\r\n      return null;\r\n    }\r\n    if (!market) {\r\n      return null;\r\n    }\r\n    return await market.findOpenOrdersAccountsForOwner(\r\n      connection,\r\n      wallet.publicKey,\r\n    );\r\n  }\r\n  return useAsyncData(\r\n    getOpenOrdersAccounts,\r\n    tuple('getOpenOrdersAccounts', wallet, market, connected),\r\n    { refreshInterval: fast ? _FAST_REFRESH_INTERVAL : _SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function useSelectedOpenOrdersAccount(fast = false) {\r\n  const [accounts] = useOpenOrdersAccounts(fast);\r\n  if (!accounts) {\r\n    return null;\r\n  }\r\n  return accounts[0];\r\n}\r\n\r\nexport function useTokenAccounts(): [\r\n  TokenAccount[] | null | undefined,\r\n  boolean,\r\n] {\r\n  const { connected, wallet } = useWallet();\r\n  const connection = useConnection();\r\n  async function getTokenAccounts() {\r\n    if (!connected) {\r\n      return null;\r\n    }\r\n    return await getTokenAccountInfo(connection, wallet.publicKey);\r\n  }\r\n  return useAsyncData(\r\n    getTokenAccounts,\r\n    tuple('getTokenAccounts', wallet, connected),\r\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function getSelectedTokenAccountForMint(\r\n  accounts: TokenAccount[] | undefined | null,\r\n  mint: PublicKey | undefined,\r\n  selectedPubKey?: string | PublicKey | null,\r\n) {\r\n  if (!accounts || !mint) {\r\n    return null;\r\n  }\r\n  const filtered = accounts.filter(\r\n    ({ effectiveMint, pubkey }) =>\r\n      mint.equals(effectiveMint) &&\r\n      (!selectedPubKey ||\r\n        (typeof selectedPubKey === 'string'\r\n          ? selectedPubKey\r\n          : selectedPubKey.toBase58()) === pubkey.toBase58()),\r\n  );\r\n  return filtered && filtered[0];\r\n}\r\n\r\nexport function useSelectedQuoteCurrencyAccount() {\r\n  const [accounts] = useTokenAccounts();\r\n  const { market } = useMarket();\r\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\r\n  const mintAddress = market?.quoteMintAddress;\r\n  return getSelectedTokenAccountForMint(\r\n    accounts,\r\n    mintAddress,\r\n    mintAddress && selectedTokenAccounts[mintAddress.toBase58()],\r\n  );\r\n}\r\n\r\nexport function useSelectedBaseCurrencyAccount() {\r\n  const [accounts] = useTokenAccounts();\r\n  const { market } = useMarket();\r\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\r\n  const mintAddress = market?.baseMintAddress;\r\n  return getSelectedTokenAccountForMint(\r\n    accounts,\r\n    mintAddress,\r\n    mintAddress && selectedTokenAccounts[mintAddress.toBase58()],\r\n  );\r\n}\r\n\r\n// TODO: Update to use websocket\r\nexport function useSelectedQuoteCurrencyBalances() {\r\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\r\n  const { market } = useMarket();\r\n  const [accountInfo, loaded] = useAccountInfo(quoteCurrencyAccount?.pubkey);\r\n  if (!market || !quoteCurrencyAccount || !loaded || !accountInfo) {\r\n    return null;\r\n  }\r\n  if (market.quoteMintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT)) {\r\n    return accountInfo?.lamports / 1e9 ?? 0;\r\n  }\r\n  return market.quoteSplSizeToNumber(\r\n    new BN(accountInfo.data.slice(64, 72), 10, 'le'),\r\n  );\r\n}\r\n\r\n// TODO: Update to use websocket\r\nexport function useSelectedBaseCurrencyBalances() {\r\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\r\n  const { market } = useMarket();\r\n  const [accountInfo, loaded] = useAccountInfo(baseCurrencyAccount?.pubkey);\r\n  if (!market || !baseCurrencyAccount || !loaded || !accountInfo) {\r\n    return null;\r\n  }\r\n  if (market.baseMintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT)) {\r\n    return accountInfo?.lamports / 1e9 ?? 0;\r\n  }\r\n  return market.baseSplSizeToNumber(\r\n    new BN(accountInfo.data.slice(64, 72), 10, 'le'),\r\n  );\r\n}\r\n\r\nexport function useOpenOrders() {\r\n  const { market, marketName } = useMarket();\r\n  const openOrdersAccount = useSelectedOpenOrdersAccount();\r\n  const { bidOrderbook, askOrderbook } = useOrderbookAccounts();\r\n  if (!market || !openOrdersAccount || !bidOrderbook || !askOrderbook) {\r\n    return null;\r\n  }\r\n  return market\r\n    .filterForOpenOrders(bidOrderbook, askOrderbook, [openOrdersAccount])\r\n    .map((order) => ({ ...order, marketName, market }));\r\n}\r\n\r\nexport function useTrades(limit = 100) {\r\n  const trades = _useUnfilteredTrades(limit);\r\n  if (!trades) {\r\n    return null;\r\n  }\r\n  // Until partial fills are each given their own fill, use maker fills\r\n  return trades\r\n    .filter(({ eventFlags }) => eventFlags.maker)\r\n    .map((trade) => ({\r\n      ...trade,\r\n      side: trade.side === 'buy' ? 'sell' : 'buy',\r\n    }));\r\n}\r\n\r\nexport function useLocallyStoredFeeDiscountKey(): {\r\n  storedFeeDiscountKey: PublicKey | undefined,\r\n  setStoredFeeDiscountKey: (key: string) => void\r\n} {\r\n  const [storedFeeDiscountKey, setStoredFeeDiscountKey] = useLocalStorageState<string>(`feeDiscountKey`, undefined);\r\n  return {\r\n    storedFeeDiscountKey: storedFeeDiscountKey ? new PublicKey(storedFeeDiscountKey) : undefined,\r\n    setStoredFeeDiscountKey\r\n  }\r\n}\r\n\r\nexport function useFeeDiscountKeys(): [\r\n  (\r\n    | {\r\n        pubkey: PublicKey;\r\n        feeTier: number;\r\n        balance: number;\r\n        mint: PublicKey;\r\n      }[]\r\n    | null\r\n    | undefined\r\n  ),\r\n  boolean,\r\n] {\r\n  const { market } = useMarket();\r\n  const { connected, wallet } = useWallet();\r\n  const connection = useConnection();\r\n  const { setStoredFeeDiscountKey } = useLocallyStoredFeeDiscountKey();\r\n  let getFeeDiscountKeys = async () => {\r\n    if (!connected) {\r\n      return null;\r\n    }\r\n    if (!market) {\r\n      return null;\r\n    }\r\n    const feeDiscountKey = await market.findFeeDiscountKeys(connection, wallet.publicKey);\r\n    if (feeDiscountKey) {\r\n      setStoredFeeDiscountKey(feeDiscountKey[0].pubkey.toBase58())\r\n    }\r\n    return feeDiscountKey;\r\n  }\r\n  return useAsyncData(\r\n    getFeeDiscountKeys,\r\n    tuple('getFeeDiscountKeys', wallet, market, connected),\r\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function useFills(limit = 100) {\r\n  const { marketName } = useMarket();\r\n  const fills = _useUnfilteredTrades(limit);\r\n  const [openOrdersAccounts] = useOpenOrdersAccounts();\r\n  if (!openOrdersAccounts || openOrdersAccounts.length === 0) {\r\n    return null;\r\n  }\r\n  if (!fills) {\r\n    return null;\r\n  }\r\n  return fills\r\n    .filter((fill) =>\r\n      openOrdersAccounts.some((openOrdersAccount) =>\r\n        fill.openOrders.equals(openOrdersAccount.publicKey),\r\n      ),\r\n    )\r\n    .map((fill) => ({ ...fill, marketName }));\r\n}\r\n\r\n// TODO: Update to use websocket\r\nexport function useFillsForAllMarkets(limit = 100) {\r\n  const { connected, wallet } = useWallet();\r\n\r\n  const connection = useConnection();\r\n  const allMarkets = useAllMarkets();\r\n\r\n  async function getFillsForAllMarkets() {\r\n    let fills: Trade[] = [];\r\n    if (!connected) {\r\n      return fills;\r\n    }\r\n\r\n    let marketData;\r\n    for (marketData of allMarkets) {\r\n      const { market, marketName } = marketData;\r\n      if (!market) {\r\n        return fills;\r\n      }\r\n      const openOrdersAccounts = await market.findOpenOrdersAccountsForOwner(\r\n        connection,\r\n        wallet.publicKey,\r\n      );\r\n      const openOrdersAccount = openOrdersAccounts && openOrdersAccounts[0];\r\n      if (!openOrdersAccount) {\r\n        return fills;\r\n      }\r\n      const eventQueueData = await connection.getAccountInfo(\r\n        market && market._decoded.eventQueue,\r\n      );\r\n      let data = eventQueueData?.data;\r\n      if (!data) {\r\n        return fills;\r\n      }\r\n      const events = decodeEventQueue(data, limit);\r\n      const fillsForMarket: Trade[] = events\r\n        .filter(\r\n          (event) => event.eventFlags.fill && event.nativeQuantityPaid.gtn(0),\r\n        )\r\n        .map(market.parseFillEvent.bind(market));\r\n      const ownFillsForMarket = fillsForMarket\r\n        .filter((fill) => fill.openOrders.equals(openOrdersAccount.publicKey))\r\n        .map((fill) => ({ ...fill, marketName }));\r\n      fills = fills.concat(ownFillsForMarket);\r\n    }\r\n\r\n    console.log(JSON.stringify(fills));\r\n    return fills;\r\n  }\r\n\r\n  return useAsyncData(\r\n    getFillsForAllMarkets,\r\n    tuple('getFillsForAllMarkets', connected, connection, allMarkets, wallet),\r\n    { refreshInterval: _FAST_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function useAllOpenOrdersAccounts() {\r\n  const { wallet, connected } = useWallet();\r\n  const connection = useConnection();\r\n  const marketInfos = useMarketInfos();\r\n  const programIds = [\r\n    ...new Set(marketInfos.map((info) => info.programId.toBase58())),\r\n  ].map((stringProgramId) => new PublicKey(stringProgramId));\r\n\r\n  const getAllOpenOrdersAccounts = async () => {\r\n    if (!connected) {\r\n      return [];\r\n    }\r\n    return (\r\n      await Promise.all(\r\n        programIds.map((programId) =>\r\n          OpenOrders.findForOwner(connection, wallet.publicKey, programId),\r\n        ),\r\n      )\r\n    ).flat();\r\n  };\r\n  return useAsyncData(\r\n    getAllOpenOrdersAccounts,\r\n    tuple(\r\n      'getAllOpenOrdersAccounts',\r\n      connection,\r\n      connected,\r\n      wallet?.publicKey?.toBase58(),\r\n      marketInfos.length,\r\n      (programIds || []).length,\r\n    ),\r\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function useAllOpenOrdersBalances() {\r\n  const [\r\n    openOrdersAccounts,\r\n    loadedOpenOrdersAccounts,\r\n  ] = useAllOpenOrdersAccounts();\r\n  const [mintInfos, mintInfosConnected] = useMintInfos();\r\n  const [allMarkets] = useAllMarkets();\r\n  if (!loadedOpenOrdersAccounts || !mintInfosConnected) {\r\n    return {};\r\n  }\r\n\r\n  const marketsByAddress = Object.fromEntries(\r\n    (allMarkets || []).map((m) => [m.market.address.toBase58(), m]),\r\n  );\r\n  const openOrdersBalances: {\r\n    [mint: string]: { market: PublicKey; free: number; total: number }[];\r\n  } = {};\r\n  for (let account of openOrdersAccounts || []) {\r\n    const marketInfo = marketsByAddress[account.market.toBase58()];\r\n    const baseMint = marketInfo?.market.baseMintAddress.toBase58();\r\n    const quoteMint = marketInfo?.market.quoteMintAddress.toBase58();\r\n    if (!(baseMint in openOrdersBalances)) {\r\n      openOrdersBalances[baseMint] = [];\r\n    }\r\n    if (!(quoteMint in openOrdersBalances)) {\r\n      openOrdersBalances[quoteMint] = [];\r\n    }\r\n\r\n    const baseMintInfo = mintInfos && mintInfos[baseMint];\r\n    const baseFree = divideBnToNumber(\r\n      new BN(account.baseTokenFree),\r\n      getTokenMultiplierFromDecimals(baseMintInfo?.decimals || 0),\r\n    );\r\n    const baseTotal = divideBnToNumber(\r\n      new BN(account.baseTokenTotal),\r\n      getTokenMultiplierFromDecimals(baseMintInfo?.decimals || 0),\r\n    );\r\n    const quoteMintInfo = mintInfos && mintInfos[quoteMint];\r\n    const quoteFree = divideBnToNumber(\r\n      new BN(account.quoteTokenFree),\r\n      getTokenMultiplierFromDecimals(quoteMintInfo?.decimals || 0),\r\n    );\r\n    const quoteTotal = divideBnToNumber(\r\n      new BN(account.quoteTokenTotal),\r\n      getTokenMultiplierFromDecimals(quoteMintInfo?.decimals || 0),\r\n    );\r\n\r\n    openOrdersBalances[baseMint].push({\r\n      market: account.market,\r\n      free: baseFree,\r\n      total: baseTotal,\r\n    });\r\n    openOrdersBalances[quoteMint].push({\r\n      market: account.market,\r\n      free: quoteFree,\r\n      total: quoteTotal,\r\n    });\r\n  }\r\n  return openOrdersBalances;\r\n}\r\n\r\nexport function useAllOpenOrders(): {\r\n  openOrders: { orders: Order[]; marketAddress: string }[] | null | undefined;\r\n  loaded: boolean;\r\n  refreshOpenOrders: () => void;\r\n} {\r\n  const connection = useConnection();\r\n  const { connected } = useWallet();\r\n  const [\r\n    openOrdersAccounts,\r\n    openOrdersAccountsConnected,\r\n  ] = useAllOpenOrdersAccounts();\r\n  const [marketInfos, marketInfosConnected] = useAllMarkets();\r\n  const openOrdersAccountsByAddress: {\r\n    [marketAddress: string]: OpenOrders[];\r\n  } = {};\r\n  for (let account of openOrdersAccounts || []) {\r\n    const marketsAddr = account.market.toBase58();\r\n    if (!(marketsAddr in openOrdersAccountsByAddress)) {\r\n      openOrdersAccountsByAddress[marketsAddr] = [];\r\n    }\r\n    openOrdersAccountsByAddress[marketsAddr].push(account);\r\n  }\r\n  const marketsByAddress = Object.fromEntries(\r\n    (marketInfos || []).map((info) => [info.market.publicKey.toBase58(), info]),\r\n  );\r\n  const getAllOpenOrders = async () => {\r\n    return await Promise.all(\r\n      Object.keys(openOrdersAccountsByAddress).map(async (marketAddr) => {\r\n        const market = marketsByAddress[marketAddr].market;\r\n        const [bids, asks] = await Promise.all([\r\n          market.loadBids(connection),\r\n          market.loadAsks(connection),\r\n        ]);\r\n        return {\r\n          orders: market.filterForOpenOrders(\r\n            bids,\r\n            asks,\r\n            openOrdersAccountsByAddress[marketAddr],\r\n          ),\r\n          marketAddress: marketAddr,\r\n        };\r\n      }),\r\n    );\r\n  };\r\n  const cacheKey = tuple(\r\n    'getAllOpenOrders',\r\n    openOrdersAccountsConnected,\r\n    (openOrdersAccounts || []).length,\r\n    connection,\r\n    connected,\r\n    marketInfosConnected,\r\n  );\r\n  const [openOrders, loaded] = useAsyncData(getAllOpenOrders, cacheKey, {\r\n    refreshInterval: _VERY_SLOW_REFRESH_INTERVAL,\r\n  });\r\n  return {\r\n    openOrders,\r\n    loaded,\r\n    refreshOpenOrders: () => refreshCache(cacheKey),\r\n  };\r\n}\r\n\r\nexport function useBalances(): Balances[] {\r\n  const baseCurrencyBalances = useSelectedBaseCurrencyBalances();\r\n  const quoteCurrencyBalances = useSelectedQuoteCurrencyBalances();\r\n  const openOrders = useSelectedOpenOrdersAccount(true);\r\n  const { baseCurrency, quoteCurrency, market } = useMarket();\r\n  const baseExists =\r\n    openOrders && openOrders.baseTokenTotal && openOrders.baseTokenFree;\r\n  const quoteExists =\r\n    openOrders && openOrders.quoteTokenTotal && openOrders.quoteTokenFree;\r\n  if (\r\n    baseCurrency === 'UNKNOWN' ||\r\n    quoteCurrency === 'UNKNOWN' ||\r\n    !baseCurrency ||\r\n    !quoteCurrency\r\n  ) {\r\n    return [];\r\n  }\r\n  return [\r\n    {\r\n      market,\r\n      key: `${baseCurrency}${quoteCurrency}${baseCurrency}`,\r\n      coin: baseCurrency,\r\n      wallet: baseCurrencyBalances,\r\n      orders:\r\n        baseExists && market && openOrders\r\n          ? market.baseSplSizeToNumber(\r\n              openOrders.baseTokenTotal.sub(openOrders.baseTokenFree),\r\n            )\r\n          : null,\r\n      openOrders,\r\n      unsettled:\r\n        baseExists && market && openOrders\r\n          ? market.baseSplSizeToNumber(openOrders.baseTokenFree)\r\n          : null,\r\n    },\r\n    {\r\n      market,\r\n      key: `${quoteCurrency}${baseCurrency}${quoteCurrency}`,\r\n      coin: quoteCurrency,\r\n      wallet: quoteCurrencyBalances,\r\n      openOrders,\r\n      orders:\r\n        quoteExists && market && openOrders\r\n          ? market.quoteSplSizeToNumber(\r\n              openOrders.quoteTokenTotal.sub(openOrders.quoteTokenFree),\r\n            )\r\n          : null,\r\n      unsettled:\r\n        quoteExists && market && openOrders\r\n          ? market.quoteSplSizeToNumber(openOrders.quoteTokenFree)\r\n          : null,\r\n    },\r\n  ];\r\n}\r\n\r\nexport function useWalletBalancesForAllMarkets(): {\r\n  mint: string;\r\n  balance: number;\r\n}[] {\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const { connected } = useWallet();\r\n  const [mintInfos, mintInfosConnected] = useMintInfos();\r\n\r\n  if (!connected || !mintInfosConnected) {\r\n    return [];\r\n  }\r\n\r\n  let balances: { [mint: string]: number } = {};\r\n  for (let account of tokenAccounts || []) {\r\n    if (!account.account) {\r\n      continue;\r\n    }\r\n    let parsedAccount;\r\n    if (account.effectiveMint.equals(WRAPPED_SOL_MINT)) {\r\n      parsedAccount = {\r\n        mint: WRAPPED_SOL_MINT,\r\n        owner: account.pubkey,\r\n        amount: account.account.lamports,\r\n      };\r\n    } else {\r\n      parsedAccount = parseTokenAccountData(account.account.data);\r\n    }\r\n    if (!(parsedAccount.mint.toBase58() in balances)) {\r\n      balances[parsedAccount.mint.toBase58()] = 0;\r\n    }\r\n    const mintInfo = mintInfos && mintInfos[parsedAccount.mint.toBase58()];\r\n    const additionalAmount = divideBnToNumber(\r\n      new BN(parsedAccount.amount),\r\n      getTokenMultiplierFromDecimals(mintInfo?.decimals || 0),\r\n    );\r\n    balances[parsedAccount.mint.toBase58()] += additionalAmount;\r\n  }\r\n  return Object.entries(balances).map(([mint, balance]) => {\r\n    return { mint, balance };\r\n  });\r\n}\r\n\r\nexport function useUnmigratedDeprecatedMarkets() {\r\n  const connection = useConnection();\r\n  const { accounts } = useUnmigratedOpenOrdersAccounts();\r\n  const marketsList =\r\n    accounts &&\r\n    Array.from(new Set(accounts.map((openOrders) => openOrders.market)));\r\n  const deps = marketsList && marketsList.map((m) => m.toBase58());\r\n\r\n  const useUnmigratedDeprecatedMarketsInner = async () => {\r\n    if (!marketsList) {\r\n      return null;\r\n    }\r\n    const getMarket = async (address) => {\r\n      const marketInfo = USE_MARKETS.find((market) =>\r\n        market.address.equals(address),\r\n      );\r\n      if (!marketInfo) {\r\n        console.log('Failed loading market');\r\n        notify({\r\n          message: 'Error loading market',\r\n          type: 'error',\r\n        });\r\n        return null;\r\n      }\r\n      try {\r\n        console.log('Loading market', marketInfo.name);\r\n        // NOTE: Should this just be cached by (connection, marketInfo.address, marketInfo.programId)?\r\n        return await Market.load(\r\n          connection,\r\n          marketInfo.address,\r\n          {},\r\n          marketInfo.programId,\r\n        );\r\n      } catch (e) {\r\n        console.log('Failed loading market', marketInfo.name, e);\r\n        notify({\r\n          message: 'Error loading market',\r\n          description: e.message,\r\n          type: 'error',\r\n        });\r\n        return null;\r\n      }\r\n    };\r\n    return (await Promise.all(marketsList.map(getMarket))).filter((x) => x);\r\n  };\r\n  const [markets] = useAsyncData(\r\n    useUnmigratedDeprecatedMarketsInner,\r\n    tuple(\r\n      'useUnmigratedDeprecatedMarketsInner',\r\n      connection,\r\n      deps && deps.toString(),\r\n    ),\r\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\r\n  );\r\n  if (!markets) {\r\n    return null;\r\n  }\r\n  return markets.map((market) => ({\r\n    market,\r\n    openOrdersList: accounts?.filter(\r\n      (openOrders) => market && openOrders.market.equals(market.address),\r\n    ),\r\n  }));\r\n}\r\n\r\nexport function useGetOpenOrdersForDeprecatedMarkets(): {\r\n  openOrders: OrderWithMarketAndMarketName[] | null | undefined;\r\n  loaded: boolean;\r\n  refreshOpenOrders: () => void;\r\n} {\r\n  const { connected, wallet } = useWallet();\r\n  const { customMarkets } = useCustomMarkets();\r\n  const connection = useConnection();\r\n  const marketsAndOrders = useUnmigratedDeprecatedMarkets();\r\n  const marketsList =\r\n    marketsAndOrders && marketsAndOrders.map(({ market }) => market);\r\n\r\n  // This isn't quite right: open order balances could change\r\n  const deps =\r\n    marketsList &&\r\n    marketsList\r\n      .filter((market): market is Market => !!market)\r\n      .map((market) => market.address.toBase58());\r\n\r\n  async function getOpenOrdersForDeprecatedMarkets() {\r\n    if (!connected) {\r\n      return null;\r\n    }\r\n    if (!marketsList) {\r\n      return null;\r\n    }\r\n    console.log('refreshing getOpenOrdersForDeprecatedMarkets');\r\n    const getOrders = async (market: Market | null) => {\r\n      if (!market) {\r\n        return null;\r\n      }\r\n      const { marketName } = getMarketDetails(market, customMarkets);\r\n      try {\r\n        console.log('Fetching open orders for', marketName);\r\n        // Can do better than this, we have the open orders accounts already\r\n        return (\r\n          await market.loadOrdersForOwner(connection, wallet.publicKey)\r\n        ).map((order) => ({ marketName, market, ...order }));\r\n      } catch (e) {\r\n        console.log('Failed loading open orders', market.address.toBase58(), e);\r\n        notify({\r\n          message: `Error loading open orders for deprecated ${marketName}`,\r\n          description: e.message,\r\n          type: 'error',\r\n        });\r\n        return null;\r\n      }\r\n    };\r\n    return (await Promise.all(marketsList.map(getOrders)))\r\n      .filter((x): x is OrderWithMarketAndMarketName[] => !!x)\r\n      .flat();\r\n  }\r\n\r\n  const cacheKey = tuple(\r\n    'getOpenOrdersForDeprecatedMarkets',\r\n    connected,\r\n    connection,\r\n    wallet,\r\n    deps && deps.toString(),\r\n  );\r\n  const [openOrders, loaded] = useAsyncData(\r\n    getOpenOrdersForDeprecatedMarkets,\r\n    cacheKey,\r\n    {\r\n      refreshInterval: _VERY_SLOW_REFRESH_INTERVAL,\r\n    },\r\n  );\r\n  console.log('openOrders', openOrders);\r\n  return {\r\n    openOrders,\r\n    loaded,\r\n    refreshOpenOrders: () => refreshCache(cacheKey),\r\n  };\r\n}\r\n\r\nexport function useBalancesForDeprecatedMarkets() {\r\n  const markets = useUnmigratedDeprecatedMarkets();\r\n  const [customMarkets] = useLocalStorageState<CustomMarketInfo[]>(\r\n    'customMarkets',\r\n    [],\r\n  );\r\n  if (!markets) {\r\n    return null;\r\n  }\r\n\r\n  const openOrderAccountBalances: DeprecatedOpenOrdersBalances[] = [];\r\n  markets.forEach(({ market, openOrdersList }) => {\r\n    const { baseCurrency, quoteCurrency, marketName } = getMarketDetails(\r\n      market,\r\n      customMarkets,\r\n    );\r\n    if (!baseCurrency || !quoteCurrency || !market) {\r\n      return;\r\n    }\r\n    (openOrdersList || []).forEach((openOrders) => {\r\n      const inOrdersBase =\r\n        openOrders?.baseTokenTotal &&\r\n        openOrders?.baseTokenFree &&\r\n        market.baseSplSizeToNumber(\r\n          openOrders.baseTokenTotal.sub(openOrders.baseTokenFree),\r\n        );\r\n      const inOrdersQuote =\r\n        openOrders?.quoteTokenTotal &&\r\n        openOrders?.quoteTokenFree &&\r\n        market.baseSplSizeToNumber(\r\n          openOrders.quoteTokenTotal.sub(openOrders.quoteTokenFree),\r\n        );\r\n      const unsettledBase =\r\n        openOrders?.baseTokenFree &&\r\n        market.baseSplSizeToNumber(openOrders.baseTokenFree);\r\n      const unsettledQuote =\r\n        openOrders?.quoteTokenFree &&\r\n        market.baseSplSizeToNumber(openOrders.quoteTokenFree);\r\n\r\n      openOrderAccountBalances.push({\r\n        marketName,\r\n        market,\r\n        coin: baseCurrency,\r\n        key: `${marketName}${baseCurrency}`,\r\n        orders: inOrdersBase,\r\n        unsettled: unsettledBase,\r\n        openOrders,\r\n      });\r\n      openOrderAccountBalances.push({\r\n        marketName,\r\n        market,\r\n        coin: quoteCurrency,\r\n        key: `${marketName}${quoteCurrency}`,\r\n        orders: inOrdersQuote,\r\n        unsettled: unsettledQuote,\r\n        openOrders,\r\n      });\r\n    });\r\n  });\r\n  return openOrderAccountBalances;\r\n}\r\n\r\nexport function getMarketInfos(\r\n  customMarkets: CustomMarketInfo[],\r\n): MarketInfo[] {\r\n  const customMarketsInfo = customMarkets.map((m) => ({\r\n    ...m,\r\n    address: new PublicKey(m.address),\r\n    programId: new PublicKey(m.programId),\r\n    deprecated: false,\r\n  }));\r\n\r\n  return [...customMarketsInfo, ...USE_MARKETS];\r\n}\r\n\r\nexport function useMarketInfos() {\r\n  const { customMarkets } = useCustomMarkets();\r\n  return getMarketInfos(customMarkets);\r\n}\r\n\r\n/**\r\n * If selling, choose min tick size. If buying choose a price\r\n * s.t. given the state of the orderbook, the order will spend\r\n * `cost` cost currency.\r\n *\r\n * @param orderbook serum Orderbook object\r\n * @param cost quantity to spend. Base currency if selling,\r\n *  quote currency if buying.\r\n * @param tickSizeDecimals size of price increment of the market\r\n */\r\nexport function getMarketOrderPrice(\r\n  orderbook: Orderbook,\r\n  cost: number,\r\n  tickSizeDecimals?: number,\r\n) {\r\n  if (orderbook.isBids) {\r\n    return orderbook.market.tickSize;\r\n  }\r\n  let spentCost = 0;\r\n  let price, sizeAtLevel, costAtLevel: number;\r\n  const asks = orderbook.getL2(1000);\r\n  for ([price, sizeAtLevel] of asks) {\r\n    costAtLevel = price * sizeAtLevel;\r\n    if (spentCost + costAtLevel > cost) {\r\n      break;\r\n    }\r\n    spentCost += costAtLevel;\r\n  }\r\n  const sendPrice = Math.min(price * 1.02, asks[0][0] * 1.05);\r\n  let formattedPrice;\r\n  if (tickSizeDecimals) {\r\n    formattedPrice = floorToDecimal(sendPrice, tickSizeDecimals);\r\n  } else {\r\n    formattedPrice = sendPrice;\r\n  }\r\n  return formattedPrice;\r\n}\r\n\r\nexport function getExpectedFillPrice(\r\n  orderbook: Orderbook,\r\n  cost: number,\r\n  tickSizeDecimals?: number,\r\n) {\r\n  let spentCost = 0;\r\n  let avgPrice = 0;\r\n  let price, sizeAtLevel, costAtLevel: number;\r\n  for ([price, sizeAtLevel] of orderbook.getL2(1000)) {\r\n    costAtLevel = (orderbook.isBids ? 1 : price) * sizeAtLevel;\r\n    if (spentCost + costAtLevel > cost) {\r\n      avgPrice += (cost - spentCost) * price;\r\n      spentCost = cost;\r\n      break;\r\n    }\r\n    avgPrice += costAtLevel * price;\r\n    spentCost += costAtLevel;\r\n  }\r\n  const totalAvgPrice = avgPrice / Math.min(cost, spentCost);\r\n  let formattedPrice;\r\n  if (tickSizeDecimals) {\r\n    formattedPrice = floorToDecimal(totalAvgPrice, tickSizeDecimals);\r\n  } else {\r\n    formattedPrice = totalAvgPrice;\r\n  }\r\n  return formattedPrice;\r\n}\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef<() => void>();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current && savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 5px;\r\n  padding: 20px;\r\n  background-color: #1a2029;\r\n`;\r\n\r\nexport default function FloatingElement({\r\n  style = undefined,\r\n  children,\r\n  stretchVertical = false,\r\n}) {\r\n  return (\r\n    <Wrapper\r\n      style={{\r\n        height: stretchVertical ? 'calc(100% - 10px)' : undefined,\r\n        ...style,\r\n      }}\r\n    >\r\n      {children}\r\n    </Wrapper>\r\n  );\r\n}\r\n","import { Col, Row } from 'antd';\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useMarket, useOrderbook, useMarkPrice } from '../utils/markets';\r\nimport { isEqual, getDecimalCount } from '../utils/utils';\r\nimport { useInterval } from '../utils/useInterval';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport usePrevious from '../utils/usePrevious';\r\nimport { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons';\r\n\r\nconst Title = styled.div`\r\n  color: rgba(255, 255, 255, 1);\r\n`;\r\n\r\nconst SizeTitle = styled(Row)`\r\n  padding: 20px 0 14px;\r\n  color: #434a59;\r\n`;\r\n\r\nconst MarkPriceTitle = styled(Row)`\r\n  padding: 20px 0 14px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst Line = styled.div`\r\n  text-align: right;\r\n  float: right;\r\n  height: 100%;\r\n  ${(props) =>\r\n    props['data-width'] &&\r\n    css`\r\n      width: ${props['data-width']};\r\n    `}\r\n  ${(props) =>\r\n    props['data-bgcolor'] &&\r\n    css`\r\n      background-color: ${props['data-bgcolor']};\r\n    `}\r\n`;\r\n\r\nconst Price = styled.div`\r\n  position: absolute;\r\n  right: 5px;\r\n  color: white;\r\n`;\r\n\r\nexport default function Orderbook({ smallScreen, depth = 7, onPrice, onSize }) {\r\n  const markPrice = useMarkPrice();\r\n  const [orderbook] = useOrderbook();\r\n  const { baseCurrency, quoteCurrency } = useMarket();\r\n\r\n  const currentOrderbookData = useRef(null);\r\n  const lastOrderbookData = useRef(null);\r\n\r\n  const [orderbookData, setOrderbookData] = useState(null);\r\n\r\n  useInterval(() => {\r\n    if (\r\n      !currentOrderbookData.current ||\r\n      JSON.stringify(currentOrderbookData.current) !==\r\n        JSON.stringify(lastOrderbookData.current)\r\n    ) {\r\n      let bids = orderbook?.bids || [];\r\n      let asks = orderbook?.asks || [];\r\n\r\n      let sum = (total, [, size], index) =>\r\n        index < depth ? total + size : total;\r\n      let totalSize = bids.reduce(sum, 0) + asks.reduce(sum, 0);\r\n\r\n      let bidsToDisplay = getCumulativeOrderbookSide(bids, totalSize, false);\r\n      let asksToDisplay = getCumulativeOrderbookSide(asks, totalSize, true);\r\n\r\n      currentOrderbookData.current = {\r\n        bids: orderbook?.bids,\r\n        asks: orderbook?.asks,\r\n      };\r\n\r\n      setOrderbookData({ bids: bidsToDisplay, asks: asksToDisplay });\r\n    }\r\n  }, 250);\r\n\r\n  useEffect(() => {\r\n    lastOrderbookData.current = {\r\n      bids: orderbook?.bids,\r\n      asks: orderbook?.asks,\r\n    };\r\n  }, [orderbook]);\r\n\r\n  function getCumulativeOrderbookSide(orders, totalSize, backwards = false) {\r\n    let cumulative = orders\r\n      .slice(0, depth)\r\n      .reduce((cumulative, [price, size], i) => {\r\n        const cumulativeSize = (cumulative[i - 1]?.cumulativeSize || 0) + size;\r\n        cumulative.push({\r\n          price,\r\n          size,\r\n          cumulativeSize,\r\n          sizePercent: Math.round((cumulativeSize / (totalSize || 1)) * 100),\r\n        });\r\n        return cumulative;\r\n      }, []);\r\n    if (backwards) {\r\n      cumulative = cumulative.reverse();\r\n    }\r\n    return cumulative;\r\n  }\r\n\r\n  return (\r\n    <FloatingElement\r\n      style={\r\n        smallScreen ? { flex: 1 } : { height: '500px', overflow: 'hidden' }\r\n      }\r\n    >\r\n      <Title>Orderbook</Title>\r\n      <SizeTitle>\r\n        <Col span={12} style={{ textAlign: 'left' }}>\r\n          Size ({baseCurrency})\r\n        </Col>\r\n        <Col span={12} style={{ textAlign: 'right' }}>\r\n          Price ({quoteCurrency})\r\n        </Col>\r\n      </SizeTitle>\r\n      {orderbookData?.asks.map(({ price, size, sizePercent }) => (\r\n        <OrderbookRow\r\n          key={price + ''}\r\n          price={price}\r\n          size={size}\r\n          side={'sell'}\r\n          sizePercent={sizePercent}\r\n          onPriceClick={() => onPrice(price)}\r\n          onSizeClick={() => onSize(size)}\r\n        />\r\n      ))}\r\n      <MarkPriceComponent markPrice={markPrice} />\r\n      {orderbookData?.bids.map(({ price, size, sizePercent }) => (\r\n        <OrderbookRow\r\n          key={price + ''}\r\n          price={price}\r\n          size={size}\r\n          side={'buy'}\r\n          sizePercent={sizePercent}\r\n          onPriceClick={() => onPrice(price)}\r\n          onSizeClick={() => onSize(size)}\r\n        />\r\n      ))}\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\nconst OrderbookRow = React.memo(\r\n  ({ side, price, size, sizePercent, onSizeClick, onPriceClick }) => {\r\n    const element = useRef();\r\n\r\n    const { market } = useMarket();\r\n\r\n    useEffect(() => {\r\n      // eslint-disable-next-line\r\n      !element.current?.classList.contains('flash') &&\r\n        element.current?.classList.add('flash');\r\n      const id = setTimeout(\r\n        () =>\r\n          element.current?.classList.contains('flash') &&\r\n          element.current?.classList.remove('flash'),\r\n        250,\r\n      );\r\n      return () => clearTimeout(id);\r\n    }, [price, size]);\r\n\r\n    let formattedSize =\r\n      market?.minOrderSize && !isNaN(size)\r\n        ? Number(size).toFixed(getDecimalCount(market.minOrderSize) + 1)\r\n        : size;\r\n\r\n    let formattedPrice =\r\n      market?.tickSize && !isNaN(price)\r\n        ? Number(price).toFixed(getDecimalCount(market.tickSize) + 1)\r\n        : price;\r\n\r\n    return (\r\n      <Row ref={element} style={{ marginBottom: 1 }} onClick={onSizeClick}>\r\n        <Col span={12} style={{ textAlign: 'left' }}>\r\n          {formattedSize}\r\n        </Col>\r\n        <Col span={12} style={{ textAlign: 'right' }}>\r\n          <Line\r\n            data-width={sizePercent + '%'}\r\n            data-bgcolor={\r\n              side === 'buy'\r\n                ? 'rgba(65, 199, 122, 0.6)'\r\n                : 'rgba(242, 60, 105, 0.6)'\r\n            }\r\n          />\r\n          <Price onClick={onPriceClick}>{formattedPrice}</Price>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  },\r\n  (prevProps, nextProps) =>\r\n    isEqual(prevProps, nextProps, ['price', 'size', 'sizePercent']),\r\n);\r\n\r\nconst MarkPriceComponent = React.memo(\r\n  ({ markPrice }) => {\r\n    const { market } = useMarket();\r\n    const previousMarkPrice = usePrevious(markPrice);\r\n\r\n    let markPriceColor =\r\n      markPrice > previousMarkPrice\r\n        ? '#41C77A'\r\n        : markPrice < previousMarkPrice\r\n        ? '#F23B69'\r\n        : 'white';\r\n\r\n    let formattedMarkPrice =\r\n      markPrice &&\r\n      market?.tickSize &&\r\n      markPrice.toFixed(getDecimalCount(market.tickSize));\r\n\r\n    return (\r\n      <MarkPriceTitle justify=\"center\">\r\n        <Col style={{ color: markPriceColor }}>\r\n          {markPrice > previousMarkPrice && (\r\n            <ArrowUpOutlined style={{ marginRight: 5 }} />\r\n          )}\r\n          {markPrice < previousMarkPrice && (\r\n            <ArrowDownOutlined style={{ marginRight: 5 }} />\r\n          )}\r\n          {formattedMarkPrice || '----'}\r\n        </Col>\r\n      </MarkPriceTitle>\r\n    );\r\n  },\r\n  (prevProps, nextProps) => isEqual(prevProps, nextProps, ['markPrice']),\r\n);\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport default function usePrevious(value) {\r\n  // The ref object is a generic container whose current property is mutable ...\r\n  // ... and can hold any value, similar to an instance property on a class\r\n  const ref = useRef();\r\n\r\n  // Store current value in ref\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]); // Only re-run if value changes\r\n\r\n  // Return previous value (happens before update in useEffect above)\r\n  return ref.current;\r\n}\r\n","import React from 'react';\r\nimport { ConfigProvider, Table } from 'antd';\r\n\r\nexport default function DataTable({\r\n  dataSource,\r\n  columns,\r\n  emptyLabel = 'No data',\r\n  pagination = false,\r\n  loading = false,\r\n  pageSize = 10,\r\n}) {\r\n  const customizeRenderEmpty = () => (\r\n    <div\r\n      style={{\r\n        padding: '20px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      {emptyLabel}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ConfigProvider renderEmpty={customizeRenderEmpty}>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        pagination={pagination ? { pagination: true, pageSize } : false}\r\n        loading={loading}\r\n      />\r\n    </ConfigProvider>\r\n  );\r\n}\r\n","import { Button } from 'antd';\r\nimport React from 'react';\r\nimport {\r\n  useTokenAccounts,\r\n  getSelectedTokenAccountForMint,\r\n} from '../../utils/markets';\r\nimport DataTable from '../layout/DataTable';\r\nimport { useSendConnection } from '../../utils/connection';\r\nimport { useWallet } from '../../utils/wallet';\r\nimport { settleFunds } from '../../utils/send';\r\nimport { notify } from '../../utils/notifications';\r\n\r\nexport default function BalancesTable({\r\n  balances,\r\n  showMarket,\r\n  hideWalletBalance,\r\n  onSettleSuccess,\r\n}) {\r\n  const [accounts] = useTokenAccounts();\r\n  const connection = useSendConnection();\r\n  const { wallet } = useWallet();\r\n\r\n  async function onSettleFunds(market, openOrders) {\r\n    try {\r\n      await settleFunds({\r\n        market,\r\n        openOrders,\r\n        connection,\r\n        wallet,\r\n        baseCurrencyAccount: getSelectedTokenAccountForMint(\r\n          accounts,\r\n          market?.baseMintAddress,\r\n        ),\r\n        quoteCurrencyAccount: getSelectedTokenAccountForMint(\r\n          accounts,\r\n          market?.quoteMintAddress,\r\n        ),\r\n      });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    onSettleSuccess && onSettleSuccess();\r\n  }\r\n\r\n  const columns = [\r\n    showMarket\r\n      ? {\r\n          title: 'Market',\r\n          dataIndex: 'marketName',\r\n          key: 'marketName',\r\n        }\r\n      : null,\r\n    {\r\n      title: 'Coin',\r\n      dataIndex: 'coin',\r\n      key: 'coin',\r\n    },\r\n    hideWalletBalance\r\n      ? null\r\n      : {\r\n          title: 'Wallet Balance',\r\n          dataIndex: 'wallet',\r\n          key: 'wallet',\r\n        },\r\n    {\r\n      title: 'Orders',\r\n      dataIndex: 'orders',\r\n      key: 'orders',\r\n    },\r\n    {\r\n      title: 'Unsettled',\r\n      dataIndex: 'unsettled',\r\n      key: 'unsettled',\r\n    },\r\n    {\r\n      key: 'action',\r\n      render: ({ market, openOrders, marketName }) => (\r\n        <div style={{ textAlign: 'right' }}>\r\n          <Button\r\n            ghost\r\n            style={{ marginRight: 12 }}\r\n            onClick={() => onSettleFunds(market, openOrders)}\r\n          >\r\n            Settle {marketName}\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ].filter((x) => x);\r\n  return (\r\n    <DataTable\r\n      emptyLabel=\"No balances\"\r\n      dataSource={balances}\r\n      columns={columns}\r\n      pagination={false}\r\n    />\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport DataTable from '../layout/DataTable';\r\n\r\nimport styled from 'styled-components';\r\nimport { Button, Col, Row, Tag } from 'antd';\r\nimport { cancelOrder } from '../../utils/send';\r\nimport { useWallet } from '../../utils/wallet';\r\nimport { useSendConnection } from '../../utils/connection';\r\nimport { notify } from '../../utils/notifications';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport { OrderWithMarketAndMarketName } from '../../utils/types';\r\n\r\nconst CancelButton = styled(Button)`\r\n  color: #f23b69;\r\n  border: 1px solid #f23b69;\r\n`;\r\n\r\nexport default function OpenOrderTable({\r\n  openOrders,\r\n  onCancelSuccess,\r\n  pageSize,\r\n  loading,\r\n  marketFilter,\r\n}: {\r\n  openOrders: OrderWithMarketAndMarketName[] | null | undefined;\r\n  onCancelSuccess?: () => void;\r\n  pageSize?: number;\r\n  loading?: boolean;\r\n  marketFilter?: boolean;\r\n}) {\r\n  let { wallet } = useWallet();\r\n  let connection = useSendConnection();\r\n\r\n  const [cancelId, setCancelId] = useState(null);\r\n\r\n  async function cancel(order) {\r\n    setCancelId(order?.orderId);\r\n    try {\r\n      await cancelOrder({\r\n        order,\r\n        market: order.market,\r\n        connection,\r\n        wallet,\r\n      });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error cancelling order',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    } finally {\r\n      setCancelId(null);\r\n    }\r\n    onCancelSuccess && onCancelSuccess();\r\n  }\r\n\r\n  const marketFilters = [\r\n    ...new Set((openOrders || []).map((orderInfos) => orderInfos.marketName)),\r\n  ].map((marketName) => {\r\n    return { text: marketName, value: marketName };\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Market',\r\n      dataIndex: 'marketName',\r\n      key: 'marketName',\r\n      filters: marketFilter ? marketFilters : undefined,\r\n      onFilter: (value, record) => record.marketName.indexOf(value) === 0,\r\n    },\r\n    {\r\n      title: 'Side',\r\n      dataIndex: 'side',\r\n      key: 'side',\r\n      render: (side) => (\r\n        <Tag\r\n          color={side === 'buy' ? '#41C77A' : '#F23B69'}\r\n          style={{ fontWeight: 700 }}\r\n        >\r\n          {side.charAt(0).toUpperCase() + side.slice(1)}\r\n        </Tag>\r\n      ),\r\n      sorter: (a, b) => {\r\n        if (a.side === b.side) {\r\n          return 0;\r\n        } else if (a.side === 'buy') {\r\n          return 1;\r\n        } else {\r\n          return -1;\r\n        }\r\n      },\r\n      showSorterTooltip: false,\r\n    },\r\n    {\r\n      title: 'Size',\r\n      dataIndex: 'size',\r\n      key: 'size',\r\n      sorter: (a, b) => b.size - a.size,\r\n      showSorterTooltip: false,\r\n    },\r\n    {\r\n      title: 'Price',\r\n      dataIndex: 'price',\r\n      key: 'price',\r\n      sorter: (a, b) => b.price - a.price,\r\n      showSorterTooltip: false,\r\n    },\r\n    {\r\n      key: 'orderId',\r\n      render: (order) => (\r\n        <div style={{ textAlign: 'right' }}>\r\n          <CancelButton\r\n            icon={<DeleteOutlined />}\r\n            onClick={() => cancel(order)}\r\n            loading={cancelId + '' === order?.orderId + ''}\r\n          >\r\n            Cancel\r\n          </CancelButton>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  const dataSource = (openOrders || []).map((order) => ({\r\n    ...order,\r\n    key: order.orderId,\r\n  }));\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={24}>\r\n        <DataTable\r\n          emptyLabel=\"No open orders\"\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          pagination={true}\r\n          pageSize={pageSize ? pageSize : 5}\r\n          loading={loading !== undefined && loading}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Tag } from 'antd';\r\nimport { useFills, useMarket } from '../../utils/markets';\r\nimport DataTable from '../layout/DataTable';\r\n\r\nexport default function FillsTable() {\r\n  const fills = useFills();\r\n\r\n  const { quoteCurrency } = useMarket();\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Market',\r\n      dataIndex: 'marketName',\r\n      key: 'marketName',\r\n    },\r\n    {\r\n      title: 'Side',\r\n      dataIndex: 'side',\r\n      key: 'side',\r\n      render: (side) => (\r\n        <Tag\r\n          color={side === 'buy' ? '#41C77A' : '#F23B69'}\r\n          style={{ fontWeight: 700 }}\r\n        >\r\n          {side.charAt(0).toUpperCase() + side.slice(1)}\r\n        </Tag>\r\n      ),\r\n    },\r\n    {\r\n      title: `Size`,\r\n      dataIndex: 'size',\r\n      key: 'size',\r\n    },\r\n    {\r\n      title: `Price`,\r\n      dataIndex: 'price',\r\n      key: 'price',\r\n    },\r\n    {\r\n      title: `Liquidity`,\r\n      dataIndex: 'liquidity',\r\n      key: 'liquidity',\r\n    },\r\n    {\r\n      title: quoteCurrency ? `Fees (${quoteCurrency})` : 'Fees',\r\n      dataIndex: 'feeCost',\r\n      key: 'feeCost',\r\n    },\r\n  ];\r\n\r\n  const dataSource = (fills || []).map((fill) => ({\r\n    ...fill,\r\n    key: `${fill.orderId}${fill.side}`,\r\n    liquidity: fill.eventFlags.maker ? 'Maker' : 'Taker',\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col span={24}>\r\n          <DataTable\r\n            dataSource={dataSource}\r\n            columns={columns}\r\n            pagination={true}\r\n            pageSize={5}\r\n            emptyLabel=\"No fills\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Typography, Tag } from 'antd';\r\nimport { useFeeDiscountKeys } from '../../utils/markets';\r\nimport DataTable from '../layout/DataTable';\r\nimport { TokenInstructions, getFeeRates } from '@project-serum/serum';\r\nimport { percentFormat } from '../../utils/utils';\r\n\r\nexport default function FeesTable() {\r\n  const [feeAccounts] = useFeeDiscountKeys();\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Fee Tier',\r\n      dataIndex: 'feeTier',\r\n      key: 'feeTier',\r\n      render: (feeTier, row) => (\r\n        <div style={{ display: 'flex' }}>\r\n          <Typography>{feeTier}</Typography>\r\n          {row.index === 0 ? (\r\n            <div style={{ marginLeft: 10 }}>\r\n              <Tag color={'#41C77A'} style={{ fontWeight: 700 }}>\r\n                Selected\r\n              </Tag>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Taker',\r\n      dataIndex: 'taker',\r\n      key: 'taker',\r\n      render: (feeTier, row) =>\r\n        percentFormat.format(getFeeRates(row.feeTier).taker),\r\n    },\r\n    {\r\n      title: 'Maker',\r\n      dataIndex: 'maker',\r\n      key: 'maker',\r\n      render: (feeTier, row) =>\r\n        percentFormat.format(getFeeRates(row.feeTier).maker),\r\n    },\r\n    {\r\n      title: `Public Key`,\r\n      dataIndex: 'pubkey',\r\n      key: 'pubkey',\r\n      render: (pubkey) => pubkey.toBase58(),\r\n    },\r\n    {\r\n      title: `Balance`,\r\n      dataIndex: 'balance',\r\n      key: 'balance',\r\n    },\r\n    {\r\n      title: `Mint`,\r\n      dataIndex: 'mint',\r\n      key: 'mint',\r\n      render: (_, row) =>\r\n        row.mint.equals(TokenInstructions.SRM_MINT)\r\n          ? 'SRM'\r\n          : row.mint.equals(TokenInstructions.MSRM_MINT)\r\n          ? 'MSRM'\r\n          : 'UNKNOWN',\r\n    },\r\n  ];\r\n\r\n  const dataSource = (feeAccounts || []).map((account, index) => ({\r\n    ...account,\r\n    index,\r\n    key: account.pubkey.toBase58(),\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col span={24}>\r\n          <DataTable\r\n            dataSource={dataSource}\r\n            columns={columns}\r\n            pagination={true}\r\n            pageSize={5}\r\n            emptyLabel=\"No (M)SRM accounts\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginTop: 8 }}>\r\n        <Col>\r\n          <Typography>\r\n            Holding SRM or MSRM makes you eligible for fee discounts:\r\n          </Typography>\r\n          <FeeScheduleTable />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction FeeScheduleTable() {\r\n  // Representation of serum-js/src/fees.ts\r\n  const dataSource = [\r\n    { feeTier: 0, taker: 0.0022, maker: -0.0003, token: '', balance: '' },\r\n    { feeTier: 1, taker: 0.002, maker: -0.0003, token: 'SRM', balance: 100 },\r\n    { feeTier: 2, taker: 0.0018, maker: -0.0003, token: 'SRM', balance: 1000 },\r\n    { feeTier: 3, taker: 0.0016, maker: -0.0003, token: 'SRM', balance: 10000 },\r\n    {\r\n      feeTier: 4,\r\n      taker: 0.0014,\r\n      maker: -0.0003,\r\n      token: 'SRM',\r\n      balance: 100000,\r\n    },\r\n    {\r\n      feeTier: 5,\r\n      taker: 0.0012,\r\n      maker: -0.0003,\r\n      token: 'SRM',\r\n      balance: 1000000,\r\n    },\r\n    { feeTier: 6, taker: 0.001, maker: -0.0005, token: 'MSRM', balance: 1 },\r\n  ];\r\n  const columns = [\r\n    {\r\n      title: 'Fee Tier',\r\n      dataIndex: 'feeTier',\r\n      key: 'feeTier',\r\n    },\r\n    {\r\n      title: 'Taker',\r\n      dataIndex: 'taker',\r\n      key: 'taker',\r\n      render: (feeTier, row) =>\r\n        percentFormat.format(getFeeRates(row.feeTier).taker),\r\n    },\r\n    {\r\n      title: 'Maker',\r\n      dataIndex: 'maker',\r\n      key: 'maker',\r\n      render: (feeTier, row) =>\r\n        percentFormat.format(getFeeRates(row.feeTier).maker),\r\n    },\r\n    {\r\n      title: 'Requirements',\r\n      dataIndex: 'requirements',\r\n      key: 'requirements',\r\n      render: (_, row) => (\r\n        <Typography>\r\n          {!row.balance ? 'None' : `≥ ${row.balance} ${row.token}`}\r\n        </Typography>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <DataTable\r\n      dataSource={dataSource.map((info) => ({ ...info, key: info.feeTier }))}\r\n      columns={columns}\r\n    />\r\n  );\r\n}\r\n","import BalancesTable from './BalancesTable';\r\nimport OpenOrderTable from './OpenOrderTable';\r\nimport React from 'react';\r\nimport { Tabs, Typography } from 'antd';\r\nimport FillsTable from './FillsTable';\r\nimport FloatingElement from '../layout/FloatingElement';\r\nimport FeesTable from './FeesTable';\r\nimport { useOpenOrders, useBalances, useMarket } from '../../utils/markets';\r\n\r\nconst { Paragraph } = Typography;\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function Index() {\r\n  const { market } = useMarket();\r\n  return (\r\n    <FloatingElement style={{ flex: 1, paddingTop: 20 }}>\r\n      <Typography>\r\n        <Paragraph style={{ color: 'rgba(255,255,255,0.5)' }}>\r\n          Make sure to go to Balances and click Settle to send out your funds.\r\n        </Paragraph>\r\n        <Paragraph style={{ color: 'rgba(255,255,255,0.5)' }}>\r\n          To fund your wallet, <a href=\"https://www.sollet.io\">sollet.io</a>.\r\n          You can get SOL from FTX, Binance, BitMax, and others. You can get\r\n          other tokens from FTX.{' '}\r\n        </Paragraph>\r\n      </Typography>\r\n      <Tabs defaultActiveKey=\"orders\">\r\n        <TabPane tab=\"Open Orders\" key=\"orders\">\r\n          <OpenOrdersTab />\r\n        </TabPane>\r\n        <TabPane tab=\"Recent Trade History\" key=\"fills\">\r\n          <FillsTable />\r\n        </TabPane>\r\n        <TabPane tab=\"Balances\" key=\"balances\">\r\n          <BalancesTab />\r\n        </TabPane>\r\n        {market && market.supportsSrmFeeDiscounts ? (\r\n          <TabPane tab=\"Fee discounts\" key=\"fees\">\r\n            <FeesTable />\r\n          </TabPane>\r\n        ) : null}\r\n      </Tabs>\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\nconst OpenOrdersTab = () => {\r\n  const openOrders = useOpenOrders();\r\n\r\n  return <OpenOrderTable openOrders={openOrders} />;\r\n};\r\n\r\nconst BalancesTab = () => {\r\n  const balances = useBalances();\r\n\r\n  return <BalancesTable balances={balances} />;\r\n};\r\n","import React from 'react';\r\nimport { Modal } from 'antd';\r\nimport {\r\n  useSelectedBaseCurrencyAccount,\r\n  useMarket,\r\n  useSelectedQuoteCurrencyAccount,\r\n} from '../utils/markets';\r\nimport { useWallet } from '../utils/wallet';\r\nimport Link from './Link';\r\n\r\nexport default function DepositDialog({ onClose, baseOrQuote }) {\r\n  const { market, baseCurrency, quoteCurrency } = useMarket();\r\n\r\n  const { providerName, providerUrl } = useWallet();\r\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\r\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\r\n  let coinMint;\r\n  let account;\r\n  let depositCoin;\r\n  if (baseOrQuote === 'base') {\r\n    coinMint = market?.baseMintAddress;\r\n    account = baseCurrencyAccount;\r\n    depositCoin = baseCurrency;\r\n  } else if (baseOrQuote === 'quote') {\r\n    coinMint = market?.quoteMintAddress;\r\n    account = quoteCurrencyAccount;\r\n    depositCoin = quoteCurrency;\r\n  } else {\r\n    account = null;\r\n  }\r\n  if (!coinMint) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Modal\r\n      title={depositCoin}\r\n      visible={!!coinMint}\r\n      onOk={onClose}\r\n      onCancel={onClose}\r\n    >\r\n      <div style={{ paddingTop: '20px' }}>\r\n        <p style={{ color: 'white' }}>Mint address:</p>\r\n        <p style={{ color: 'rgba(255,255,255,0.5)' }}>{coinMint.toBase58()}</p>\r\n        <div>\r\n          <p style={{ color: 'white' }}>SPL Deposit address:</p>\r\n          <p style={{ color: 'rgba(255,255,255,0.5)' }}>\r\n            {account ? (\r\n              account.pubkey.toBase58()\r\n            ) : (\r\n              <>\r\n                Visit{' '}\r\n                <Link external to={providerUrl}>\r\n                  {providerName}\r\n                </Link>{' '}\r\n                to create an account for this mint\r\n              </>\r\n            )}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { TokenAccount } from '../utils/types';\r\nimport { useSelectedTokenAccounts } from '../utils/markets';\r\nimport { Button, Col, Select, Typography } from 'antd';\r\nimport { CopyOutlined } from '@ant-design/icons';\r\nimport { abbreviateAddress } from '../utils/utils';\r\nimport { notify } from '../utils/notifications';\r\n\r\nexport default function StandaloneTokenAccountsSelect({\r\n  accounts,\r\n  mint,\r\n  label,\r\n}: {\r\n  accounts: TokenAccount[] | null | undefined;\r\n  mint: string | undefined;\r\n  label?: boolean;\r\n}) {\r\n  const [\r\n    selectedTokenAccounts,\r\n    setSelectedTokenAccounts,\r\n  ] = useSelectedTokenAccounts();\r\n\r\n  let selectedValue: string | undefined;\r\n  if (mint && mint in selectedTokenAccounts) {\r\n    selectedValue = selectedTokenAccounts[mint];\r\n  } else if (accounts && accounts?.length > 0) {\r\n    selectedValue = accounts[0].pubkey.toBase58();\r\n  } else {\r\n    selectedValue = undefined;\r\n  }\r\n\r\n  const setTokenAccountForCoin = (value) => {\r\n    if (!mint) {\r\n      notify({\r\n        message: 'Error selecting token account',\r\n        description: 'Mint is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    const newSelectedTokenAccounts = { ...selectedTokenAccounts };\r\n    newSelectedTokenAccounts[mint] = value;\r\n    setSelectedTokenAccounts(newSelectedTokenAccounts);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {label && <Col span={8}>Token account:</Col>}\r\n      <Col span={label ? 13 : 21}>\r\n        <Select\r\n          style={{ width: '100%' }}\r\n          value={selectedValue}\r\n          onSelect={setTokenAccountForCoin}\r\n        >\r\n          {accounts?.map((account) => (\r\n            <Select.Option\r\n              key={account.pubkey.toBase58()}\r\n              value={account.pubkey.toBase58()}\r\n            >\r\n              <Typography.Text code>\r\n                {label\r\n                  ? abbreviateAddress(account.pubkey, 8)\r\n                  : account.pubkey.toBase58()}\r\n              </Typography.Text>\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </Col>\r\n      <Col span={2} offset={1}>\r\n        <Button\r\n          shape=\"round\"\r\n          icon={<CopyOutlined />}\r\n          size={'small'}\r\n          onClick={() =>\r\n            selectedValue && navigator.clipboard.writeText(selectedValue)\r\n          }\r\n        />\r\n      </Col>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { LinkOutlined } from '@ant-design/icons';\r\n\r\nexport default function LinkAddress({\r\n  title,\r\n  address,\r\n}: {\r\n  title?: undefined | any;\r\n  address: string;\r\n}) {\r\n  return (\r\n    <div>\r\n      {title && <p style={{ color: 'white' }}>{title}</p>}\r\n      <Button\r\n        type=\"link\"\r\n        icon={<LinkOutlined />}\r\n        href={'https://explorer.solana.com/address/' + address}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        {address}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Col, Divider, Popover, Row } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport styled from 'styled-components';\r\nimport {\r\n  useBalances,\r\n  useMarket,\r\n  useSelectedBaseCurrencyAccount,\r\n  useSelectedOpenOrdersAccount,\r\n  useSelectedQuoteCurrencyAccount,\r\n  useTokenAccounts,\r\n} from '../utils/markets';\r\nimport DepositDialog from './DepositDialog';\r\nimport { useWallet } from '../utils/wallet';\r\nimport Link from './Link';\r\nimport { settleFunds } from '../utils/send';\r\nimport { useSendConnection } from '../utils/connection';\r\nimport { notify } from '../utils/notifications';\r\nimport { Balances } from '../utils/types';\r\nimport StandaloneTokenAccountsSelect from './StandaloneTokenAccountSelect';\r\nimport LinkAddress from './LinkAddress';\r\nimport { InfoCircleOutlined } from '@ant-design/icons';\r\n\r\nconst RowBox = styled(Row)`\r\n  padding-bottom: 20px;\r\n`;\r\n\r\nconst Tip = styled.p`\r\n  font-size: 12px;\r\n  padding-top: 6px;\r\n`;\r\n\r\nconst ActionButton = styled(Button)`\r\n  color: #2abdd2;\r\n  background-color: #212734;\r\n  border-width: 0px;\r\n`;\r\n\r\nexport default function StandaloneBalancesDisplay() {\r\n  const { baseCurrency, quoteCurrency, market } = useMarket();\r\n  const balances = useBalances();\r\n  const openOrdersAccount = useSelectedOpenOrdersAccount(true);\r\n  const connection = useSendConnection();\r\n  const { providerUrl, providerName, wallet, connected } = useWallet();\r\n  const [baseOrQuote, setBaseOrQuote] = useState('');\r\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\r\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const baseCurrencyBalances =\r\n    balances && balances.find((b) => b.coin === baseCurrency);\r\n  const quoteCurrencyBalances =\r\n    balances && balances.find((b) => b.coin === quoteCurrency);\r\n\r\n  async function onSettleFunds() {\r\n    if (!market) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'market is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    if (!openOrdersAccount) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'Open orders account is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    if (!baseCurrencyAccount) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'Open orders account is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    if (!quoteCurrencyAccount) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'Open orders account is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await settleFunds({\r\n        market,\r\n        openOrders: openOrdersAccount,\r\n        connection,\r\n        wallet,\r\n        baseCurrencyAccount,\r\n        quoteCurrencyAccount,\r\n      });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    }\r\n  }\r\n\r\n  const formattedBalances: [\r\n    string | undefined,\r\n    Balances | undefined,\r\n    string,\r\n    string | undefined,\r\n  ][] = [\r\n    [\r\n      baseCurrency,\r\n      baseCurrencyBalances,\r\n      'base',\r\n      market?.baseMintAddress.toBase58(),\r\n    ],\r\n    [\r\n      quoteCurrency,\r\n      quoteCurrencyBalances,\r\n      'quote',\r\n      market?.quoteMintAddress.toBase58(),\r\n    ],\r\n  ];\r\n\r\n  return (\r\n    <FloatingElement style={{ flex: 1, paddingTop: 10 }}>\r\n      {formattedBalances.map(\r\n        ([currency, balances, baseOrQuote, mint], index) => (\r\n          <React.Fragment key={index}>\r\n            <Divider style={{ borderColor: 'white' }}>\r\n              {currency}{' '}\r\n              {mint && (\r\n                <Popover\r\n                  content={<LinkAddress address={mint} />}\r\n                  placement=\"bottomRight\"\r\n                  title=\"Token mint\"\r\n                  trigger=\"hover\"\r\n                >\r\n                  <InfoCircleOutlined style={{ color: '#2abdd2' }} />\r\n                </Popover>\r\n              )}\r\n            </Divider>\r\n            {connected && (\r\n              <RowBox align=\"middle\" style={{ paddingBottom: 10 }}>\r\n                <StandaloneTokenAccountsSelect\r\n                  accounts={tokenAccounts?.filter(\r\n                    (account) => account.effectiveMint.toBase58() === mint,\r\n                  )}\r\n                  mint={mint}\r\n                  label\r\n                />\r\n              </RowBox>\r\n            )}\r\n            <RowBox\r\n              align=\"middle\"\r\n              justify=\"space-between\"\r\n              style={{ paddingBottom: 12 }}\r\n            >\r\n              <Col>Wallet balance:</Col>\r\n              <Col>{balances && balances.wallet}</Col>\r\n            </RowBox>\r\n            <RowBox\r\n              align=\"middle\"\r\n              justify=\"space-between\"\r\n              style={{ paddingBottom: 12 }}\r\n            >\r\n              <Col>Unsettled balance:</Col>\r\n              <Col>{balances && balances.unsettled}</Col>\r\n            </RowBox>\r\n            <RowBox align=\"middle\" justify=\"space-around\">\r\n              <Col style={{ width: 150 }}>\r\n                <ActionButton\r\n                  block\r\n                  size=\"large\"\r\n                  onClick={() => setBaseOrQuote(baseOrQuote)}\r\n                >\r\n                  Deposit\r\n                </ActionButton>\r\n              </Col>\r\n              <Col style={{ width: 150 }}>\r\n                <ActionButton block size=\"large\" onClick={onSettleFunds}>\r\n                  Settle\r\n                </ActionButton>\r\n              </Col>\r\n            </RowBox>\r\n            <Tip>\r\n              All deposits go to your{' '}\r\n              <Link external to={providerUrl}>\r\n                {providerName}\r\n              </Link>{' '}\r\n              wallet\r\n            </Tip>\r\n          </React.Fragment>\r\n        ),\r\n      )}\r\n      <DepositDialog\r\n        baseOrQuote={baseOrQuote}\r\n        onClose={() => setBaseOrQuote('')}\r\n      />\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import { Button, Input, Radio, Switch, Slider } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n  useSelectedBaseCurrencyBalances,\r\n  useSelectedQuoteCurrencyBalances,\r\n  useMarket,\r\n  useMarkPrice,\r\n  useSelectedOpenOrdersAccount,\r\n  useSelectedBaseCurrencyAccount,\r\n  useSelectedQuoteCurrencyAccount, useFeeDiscountKeys, useLocallyStoredFeeDiscountKey,\r\n} from '../utils/markets';\r\nimport { useWallet } from '../utils/wallet';\r\nimport { notify } from '../utils/notifications';\r\nimport {\r\n  getDecimalCount,\r\n  roundToDecimal,\r\n  floorToDecimal,\r\n} from '../utils/utils';\r\nimport { useSendConnection } from '../utils/connection';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport { getUnixTs, placeOrder } from '../utils/send';\r\nimport { SwitchChangeEventHandler } from 'antd/es/switch';\r\nimport { refreshCache } from '../utils/fetch-loop';\r\nimport tuple from 'immutable-tuple';\r\n\r\nconst SellButton = styled(Button)`\r\n  margin: 20px 0px 0px 0px;\r\n  background: #f23b69;\r\n  border-color: #f23b69;\r\n`;\r\n\r\nconst BuyButton = styled(Button)`\r\n  margin: 20px 0px 0px 0px;\r\n  background: #02bf76;\r\n  border-color: #02bf76;\r\n`;\r\n\r\nconst sliderMarks = {\r\n  0: '0%',\r\n  25: '25%',\r\n  50: '50%',\r\n  75: '75%',\r\n  100: '100%',\r\n};\r\n\r\nexport default function TradeForm({\r\n  style,\r\n  setChangeOrderRef,\r\n}: {\r\n  style?: any;\r\n  setChangeOrderRef?: (\r\n    ref: ({ size, price }: { size?: number; price?: number }) => void,\r\n  ) => void;\r\n}) {\r\n  const [side, setSide] = useState<'buy' | 'sell'>('buy');\r\n  const { baseCurrency, quoteCurrency, market } = useMarket();\r\n  const baseCurrencyBalances = useSelectedBaseCurrencyBalances();\r\n  const quoteCurrencyBalances = useSelectedQuoteCurrencyBalances();\r\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\r\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\r\n  const openOrdersAccount = useSelectedOpenOrdersAccount(true);\r\n  const { wallet, connected } = useWallet();\r\n  const sendConnection = useSendConnection();\r\n  const markPrice = useMarkPrice();\r\n  useFeeDiscountKeys();\r\n  const { storedFeeDiscountKey: feeDiscountKey } = useLocallyStoredFeeDiscountKey();\r\n\r\n  const [postOnly, setPostOnly] = useState(false);\r\n  const [ioc, setIoc] = useState(false);\r\n  const [baseSize, setBaseSize] = useState<number | undefined>(undefined);\r\n  const [quoteSize, setQuoteSize] = useState<number | undefined>(undefined);\r\n  const [price, setPrice] = useState<number | undefined>(undefined);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [sizeFraction, setSizeFraction] = useState(0);\r\n\r\n  const availableQuote =\r\n    openOrdersAccount && market\r\n      ? market.quoteSplSizeToNumber(openOrdersAccount.quoteTokenFree)\r\n      : 0;\r\n\r\n  let quoteBalance = (quoteCurrencyBalances || 0) + (availableQuote || 0);\r\n  let baseBalance = baseCurrencyBalances || 0;\r\n  let sizeDecimalCount =\r\n    market?.minOrderSize && getDecimalCount(market.minOrderSize);\r\n  let priceDecimalCount = market?.tickSize && getDecimalCount(market.tickSize);\r\n\r\n  useEffect(() => {\r\n    setChangeOrderRef && setChangeOrderRef(doChangeOrder);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [setChangeOrderRef]);\r\n\r\n  useEffect(() => {\r\n    baseSize && price && onSliderChange(sizeFraction);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [side]);\r\n\r\n  useEffect(() => {\r\n    updateSizeFraction();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [price, baseSize]);\r\n\r\n  useEffect(() => {\r\n    const warmUpCache = async () => {\r\n      try {\r\n        if (!wallet || !wallet.publicKey || !market) {\r\n          console.log(`Skipping refreshing accounts`);\r\n          return;\r\n        }\r\n        const startTime = getUnixTs();\r\n        console.log(`Refreshing accounts for ${market.address}`);\r\n        await market?.findOpenOrdersAccountsForOwner(\r\n          sendConnection,\r\n          wallet.publicKey,\r\n        );\r\n        await market?.findBestFeeDiscountKey(sendConnection, wallet.publicKey);\r\n        const endTime = getUnixTs();\r\n        console.log(\r\n          `Finished refreshing accounts for ${market.address} after ${\r\n            endTime - startTime\r\n          }`,\r\n        );\r\n      } catch (e) {\r\n        console.log(`Encountered error when refreshing trading accounts: ${e}`);\r\n      }\r\n    };\r\n    warmUpCache();\r\n    const id = setInterval(warmUpCache, 30_000);\r\n    return () => clearInterval(id);\r\n  }, [market, sendConnection, wallet, wallet.publicKey]);\r\n\r\n  const onSetBaseSize = (baseSize: number | undefined) => {\r\n    setBaseSize(baseSize);\r\n    if (!baseSize) {\r\n      setQuoteSize(undefined);\r\n      return;\r\n    }\r\n    let usePrice = price || markPrice;\r\n    if (!usePrice) {\r\n      setQuoteSize(undefined);\r\n      return;\r\n    }\r\n    const rawQuoteSize = baseSize * usePrice;\r\n    const quoteSize =\r\n      baseSize && roundToDecimal(rawQuoteSize, sizeDecimalCount);\r\n    setQuoteSize(quoteSize);\r\n  };\r\n\r\n  const onSetQuoteSize = (quoteSize: number | undefined) => {\r\n    setQuoteSize(quoteSize);\r\n    if (!quoteSize) {\r\n      setBaseSize(undefined);\r\n      return;\r\n    }\r\n    let usePrice = price || markPrice;\r\n    if (!usePrice) {\r\n      setBaseSize(undefined);\r\n      return;\r\n    }\r\n    const rawBaseSize = quoteSize / usePrice;\r\n    const baseSize = quoteSize && roundToDecimal(rawBaseSize, sizeDecimalCount);\r\n    setBaseSize(baseSize);\r\n  };\r\n\r\n  const doChangeOrder = ({\r\n    size,\r\n    price,\r\n  }: {\r\n    size?: number;\r\n    price?: number;\r\n  }) => {\r\n    const formattedSize = size && roundToDecimal(size, sizeDecimalCount);\r\n    const formattedPrice = price && roundToDecimal(price, priceDecimalCount);\r\n    formattedSize && onSetBaseSize(formattedSize);\r\n    formattedPrice && setPrice(formattedPrice);\r\n  };\r\n\r\n  const updateSizeFraction = () => {\r\n    const rawMaxSize =\r\n      side === 'buy' ? quoteBalance / (price || markPrice || 1) : baseBalance;\r\n    const maxSize = floorToDecimal(rawMaxSize, sizeDecimalCount);\r\n    const sizeFraction = Math.min(((baseSize || 0) / maxSize) * 100, 100);\r\n    setSizeFraction(sizeFraction);\r\n  };\r\n\r\n  const onSliderChange = (value) => {\r\n    if (!price && markPrice) {\r\n      let formattedMarkPrice: number | string = priceDecimalCount\r\n        ? markPrice.toFixed(priceDecimalCount)\r\n        : markPrice;\r\n      setPrice(\r\n        typeof formattedMarkPrice === 'number'\r\n          ? formattedMarkPrice\r\n          : parseFloat(formattedMarkPrice),\r\n      );\r\n    }\r\n\r\n    let newSize;\r\n    if (side === 'buy') {\r\n      if (price || markPrice) {\r\n        newSize = ((quoteBalance / (price || markPrice || 1)) * value) / 100;\r\n      }\r\n    } else {\r\n      newSize = (baseBalance * value) / 100;\r\n    }\r\n\r\n    // round down to minOrderSize increment\r\n    let formatted = floorToDecimal(newSize, sizeDecimalCount);\r\n\r\n    onSetBaseSize(formatted);\r\n  };\r\n\r\n  const postOnChange: SwitchChangeEventHandler = (checked) => {\r\n    if (checked) {\r\n      setIoc(false);\r\n    }\r\n    setPostOnly(checked);\r\n  };\r\n  const iocOnChange: SwitchChangeEventHandler = (checked) => {\r\n    if (checked) {\r\n      setPostOnly(false);\r\n    }\r\n    setIoc(checked);\r\n  };\r\n\r\n  async function onSubmit() {\r\n    if (!price) {\r\n      console.warn('Missing price');\r\n      notify({\r\n        message: 'Missing price',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    } else if (!baseSize) {\r\n      console.warn('Missing size');\r\n      notify({\r\n        message: 'Missing size',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSubmitting(true);\r\n    try {\r\n      await placeOrder({\r\n        side,\r\n        price,\r\n        size: baseSize,\r\n        orderType: ioc ? 'ioc' : postOnly ? 'postOnly' : 'limit',\r\n        market,\r\n        connection: sendConnection,\r\n        wallet,\r\n        baseCurrencyAccount: baseCurrencyAccount?.pubkey,\r\n        quoteCurrencyAccount: quoteCurrencyAccount?.pubkey,\r\n        feeDiscountPubkey: feeDiscountKey\r\n      });\r\n      refreshCache(tuple('getTokenAccounts', wallet, connected));\r\n      setPrice(undefined);\r\n      onSetBaseSize(undefined);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error placing order',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FloatingElement\r\n      style={{ display: 'flex', flexDirection: 'column', ...style }}\r\n    >\r\n      <div style={{ flex: 1 }}>\r\n        <Radio.Group\r\n          onChange={(e) => setSide(e.target.value)}\r\n          value={side}\r\n          buttonStyle=\"solid\"\r\n          style={{\r\n            marginBottom: 8,\r\n            width: '100%',\r\n          }}\r\n        >\r\n          <Radio.Button\r\n            value=\"buy\"\r\n            style={{\r\n              width: '50%',\r\n              textAlign: 'center',\r\n              background: side === 'buy' ? '#02bf76' : '',\r\n              borderColor: side === 'buy' ? '#02bf76' : '',\r\n            }}\r\n          >\r\n            BUY\r\n          </Radio.Button>\r\n          <Radio.Button\r\n            value=\"sell\"\r\n            style={{\r\n              width: '50%',\r\n              textAlign: 'center',\r\n              background: side === 'sell' ? '#F23B69' : '',\r\n              borderColor: side === 'sell' ? '#F23B69' : '',\r\n            }}\r\n          >\r\n            SELL\r\n          </Radio.Button>\r\n        </Radio.Group>\r\n        <Input\r\n          style={{ textAlign: 'right', paddingBottom: 8 }}\r\n          addonBefore={<div style={{ width: '30px' }}>Price</div>}\r\n          suffix={\r\n            <span style={{ fontSize: 10, opacity: 0.5 }}>{quoteCurrency}</span>\r\n          }\r\n          value={price}\r\n          type=\"number\"\r\n          step={market?.tickSize || 1}\r\n          onChange={(e) => setPrice(parseFloat(e.target.value))}\r\n        />\r\n        <Input.Group compact style={{ paddingBottom: 8 }}>\r\n          <Input\r\n            style={{ width: 'calc(50% + 30px)', textAlign: 'right' }}\r\n            addonBefore={<div style={{ width: '30px' }}>Size</div>}\r\n            suffix={\r\n              <span style={{ fontSize: 10, opacity: 0.5 }}>{baseCurrency}</span>\r\n            }\r\n            value={baseSize}\r\n            type=\"number\"\r\n            step={market?.minOrderSize || 1}\r\n            onChange={(e) => onSetBaseSize(parseFloat(e.target.value))}\r\n          />\r\n          <Input\r\n            style={{ width: 'calc(50% - 30px)', textAlign: 'right' }}\r\n            suffix={\r\n              <span style={{ fontSize: 10, opacity: 0.5 }}>\r\n                {quoteCurrency}\r\n              </span>\r\n            }\r\n            value={quoteSize}\r\n            type=\"number\"\r\n            step={market?.minOrderSize || 1}\r\n            onChange={(e) => onSetQuoteSize(parseFloat(e.target.value))}\r\n          />\r\n        </Input.Group>\r\n        <Slider\r\n          value={sizeFraction}\r\n          tipFormatter={(value) => `${value}%`}\r\n          marks={sliderMarks}\r\n          onChange={onSliderChange}\r\n        />\r\n        <div style={{ paddingTop: 18 }}>\r\n          {'POST '}\r\n          <Switch\r\n            checked={postOnly}\r\n            onChange={postOnChange}\r\n            style={{ marginRight: 40 }}\r\n          />\r\n          {'IOC '}\r\n          <Switch checked={ioc} onChange={iocOnChange} />\r\n        </div>\r\n      </div>\r\n      {side === 'buy' ? (\r\n        <BuyButton\r\n          disabled={!price || !baseSize}\r\n          onClick={onSubmit}\r\n          block\r\n          type=\"primary\"\r\n          size=\"large\"\r\n          loading={submitting}\r\n        >\r\n          Buy {baseCurrency}\r\n        </BuyButton>\r\n      ) : (\r\n        <SellButton\r\n          disabled={!price || !baseSize}\r\n          onClick={onSubmit}\r\n          block\r\n          type=\"primary\"\r\n          size=\"large\"\r\n          loading={submitting}\r\n        >\r\n          Sell {baseCurrency}\r\n        </SellButton>\r\n      )}\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import { Col, Row } from 'antd';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useMarket, useBonfidaTrades } from '../utils/markets';\r\nimport { getDecimalCount } from '../utils/utils';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport { BonfidaTrade } from '../utils/types';\r\n\r\nconst Title = styled.div`\r\n  color: rgba(255, 255, 255, 1);\r\n`;\r\nconst SizeTitle = styled(Row)`\r\n  padding: 20px 0 14px;\r\n  color: #434a59;\r\n`;\r\n\r\nexport default function PublicTrades({ smallScreen }) {\r\n  const { baseCurrency, quoteCurrency, market } = useMarket();\r\n  const [trades, loaded] = useBonfidaTrades();\r\n\r\n  return (\r\n    <FloatingElement\r\n      style={\r\n        smallScreen\r\n          ? { flex: 1 }\r\n          : {\r\n              marginTop: '10px',\r\n              minHeight: '270px',\r\n              maxHeight: 'calc(100vh - 700px)',\r\n            }\r\n      }\r\n    >\r\n      <Title>Recent Market trades</Title>\r\n      <SizeTitle>\r\n        <Col span={8}>Price ({quoteCurrency}) </Col>\r\n        <Col span={8} style={{ textAlign: 'right' }}>\r\n          Size ({baseCurrency})\r\n        </Col>\r\n        <Col span={8} style={{ textAlign: 'right' }}>\r\n          Time\r\n        </Col>\r\n      </SizeTitle>\r\n      {!!trades && loaded && (\r\n        <div\r\n          style={{\r\n            marginRight: '-20px',\r\n            paddingRight: '5px',\r\n            overflowY: 'scroll',\r\n            maxHeight: smallScreen\r\n              ? 'calc(100% - 75px)'\r\n              : 'calc(100vh - 800px)',\r\n          }}\r\n        >\r\n          {trades.map((trade: BonfidaTrade, i: number) => (\r\n            <Row key={i} style={{ marginBottom: 4 }}>\r\n              <Col\r\n                span={8}\r\n                style={{\r\n                  color: trade.side === 'buy' ? '#41C77A' : '#F23B69',\r\n                }}\r\n              >\r\n                {market?.tickSize && !isNaN(trade.price)\r\n                  ? Number(trade.price).toFixed(\r\n                      getDecimalCount(market.tickSize),\r\n                    )\r\n                  : trade.price}\r\n              </Col>\r\n              <Col span={8} style={{ textAlign: 'right' }}>\r\n                {market?.minOrderSize && !isNaN(trade.size)\r\n                  ? Number(trade.size).toFixed(\r\n                      getDecimalCount(market.minOrderSize),\r\n                    )\r\n                  : trade.size}\r\n              </Col>\r\n              <Col span={8} style={{ textAlign: 'right', color: '#434a59' }}>\r\n                {trade.time && new Date(trade.time).toLocaleTimeString()}\r\n              </Col>\r\n            </Row>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import { Button, Divider, Spin, Typography } from 'antd';\r\nimport React from 'react';\r\nimport {\r\n  useGetOpenOrdersForDeprecatedMarkets,\r\n  useBalancesForDeprecatedMarkets,\r\n  useUnmigratedOpenOrdersAccounts,\r\n} from '../utils/markets';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport CheckOutlined from '@ant-design/icons/lib/icons/CheckOutlined';\r\nimport BalancesTable from './UserInfoTable/BalancesTable';\r\nimport Link from './Link';\r\nimport OpenOrderTable from './UserInfoTable/OpenOrderTable';\r\nimport SyncOutlined from '@ant-design/icons/lib/icons/SyncOutlined';\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default function DeprecatedMarketsInstructions({ switchToLiveMarkets }) {\r\n  const balances = useBalancesForDeprecatedMarkets();\r\n  const {\r\n    openOrders,\r\n    loaded,\r\n    refreshOpenOrders,\r\n  } = useGetOpenOrdersForDeprecatedMarkets();\r\n\r\n  const { refresh } = useUnmigratedOpenOrdersAccounts();\r\n  const needToCancelOrders = !openOrders || openOrders.length > 0;\r\n  const filteredBalances =\r\n    balances &&\r\n    balances.filter(({ orders, unsettled }) => orders > 0 || unsettled > 0);\r\n  const needToSettleFunds = filteredBalances && filteredBalances.length > 0;\r\n  return (\r\n    <FloatingElement>\r\n      <Title level={4} style={{ color: 'rgba(255, 255, 255, 1)' }}>\r\n        Migrate to new USDC markets\r\n      </Title>\r\n      <Typography>\r\n        <Link\r\n          external\r\n          to={\r\n            'https://explorer.solana.com/address/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'\r\n          }\r\n        >\r\n          Native USDC\r\n        </Link>{' '}\r\n        has arrived on Solana! See{' '}\r\n        <Link\r\n          external\r\n          to={\r\n            'https://www.circle.com/blog/circle-partners-with-alameda-research-ftx-project-serum-to-introduce-support-for-usdc-on-solana'\r\n          }\r\n        >\r\n          Circle's announcement\r\n        </Link>{' '}\r\n        for more information.\r\n      </Typography>\r\n      <br />\r\n      <Typography>\r\n        Serum is transitioning from the previous{' '}\r\n        <Link\r\n          external\r\n          to={\r\n            'https://explorer.solana.com/address/BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW'\r\n          }\r\n        >\r\n          Wrapped USDC\r\n        </Link>\r\n        , now called WUSDC, to Native USDC. You can convert from WUSDC to USDC\r\n        directly on{' '}\r\n        <Link external to={'https://sollet.io'}>\r\n          sollet.io\r\n        </Link>\r\n        , or can deposit WUSDC and be credited USDC on exchanges like{' '}\r\n        <Link external to={'https://ftx.com'}>\r\n          FTX\r\n        </Link>\r\n        .\r\n      </Typography>\r\n      <br />\r\n      <Typography>\r\n        Markets with WUSDC as the quote curency are now deprecated. To migrate\r\n        over to the new USDC markets, please cancel your orders and settle your\r\n        funds on old markets.\r\n      </Typography>\r\n      <div style={{ marginTop: 20, display: 'flex', justifyContent: 'center' }}>\r\n        <Button onClick={() => refresh(true)}>\r\n          <SyncOutlined /> Refresh data\r\n        </Button>\r\n      </div>\r\n      {!balances ? (\r\n        <Spin size=\"large\" />\r\n      ) : (\r\n        <>\r\n          <Divider>\r\n            {!needToCancelOrders && <CheckOutlined />} Cancel your orders\r\n          </Divider>\r\n          {needToCancelOrders ? (\r\n            loaded ? (\r\n              <OpenOrderTable\r\n                openOrders={openOrders}\r\n                onCancelSuccess={() => {\r\n                  setTimeout(() => {\r\n                    refresh();\r\n                    refreshOpenOrders();\r\n                  }, 1000); // Wait so that on-chain account state reflects the update\r\n                }}\r\n              />\r\n            ) : (\r\n              <Spin size=\"large\" />\r\n            )\r\n          ) : null}\r\n          <Divider>\r\n            {!needToSettleFunds && <CheckOutlined />} Settle your funds\r\n          </Divider>\r\n          {needToSettleFunds && (\r\n            <BalancesTable\r\n              balances={filteredBalances}\r\n              hideWalletBalance\r\n              showMarket\r\n              onSettleSuccess={() => {\r\n                setTimeout(refresh, 1000); // Wait so that on-chain account state reflects the update\r\n              }}\r\n            />\r\n          )}\r\n          <Divider>Switch to upgraded markets</Divider>\r\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n            <Button\r\n              onClick={switchToLiveMarkets}\r\n              disabled={needToSettleFunds || needToCancelOrders}\r\n            >\r\n              Switch to new markets\r\n            </Button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Col, Input, Modal, Row, Typography } from 'antd';\r\nimport { notify } from '../utils/notifications';\r\nimport { isValidPublicKey } from '../utils/utils';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { Market, MARKETS, TOKEN_MINTS } from '@project-serum/serum';\r\nimport { useAccountInfo, useConnection } from '../utils/connection';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nconst { Text } = Typography;\r\n\r\nexport default function CustomMarketDialog({\r\n  visible,\r\n  onAddCustomMarket,\r\n  onClose,\r\n}) {\r\n  const connection = useConnection();\r\n\r\n  const [marketId, setMarketId] = useState('');\r\n\r\n  const [marketLabel, setMarketLabel] = useState('');\r\n  const [baseLabel, setBaseLabel] = useState('');\r\n  const [quoteLabel, setQuoteLabel] = useState('');\r\n\r\n  const [market, setMarket] = useState(null);\r\n  const [loadingMarket, setLoadingMarket] = useState(false);\r\n\r\n  const wellFormedMarketId = isValidPublicKey(marketId);\r\n\r\n  const [marketAccountInfo] = useAccountInfo(\r\n    wellFormedMarketId ? new PublicKey(marketId) : null,\r\n  );\r\n  const programId = marketAccountInfo\r\n    ? marketAccountInfo.owner.toBase58()\r\n    : MARKETS.find(({ deprecated }) => !deprecated).programId.toBase58();\r\n\r\n  useEffect(() => {\r\n    if (!wellFormedMarketId || !programId) {\r\n      resetLabels();\r\n      return;\r\n    }\r\n    setLoadingMarket(true);\r\n    Market.load(\r\n      connection,\r\n      new PublicKey(marketId),\r\n      {},\r\n      new PublicKey(programId),\r\n    )\r\n      .then((market) => {\r\n        setMarket(market);\r\n      })\r\n      .catch(() => {\r\n        resetLabels();\r\n        setMarket(null);\r\n      })\r\n      .finally(() => setLoadingMarket(false));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [connection, marketId, programId]);\r\n\r\n  const resetLabels = () => {\r\n    setMarketLabel(null);\r\n    setBaseLabel(null);\r\n    setQuoteLabel(null);\r\n  };\r\n\r\n  const knownMarket = MARKETS.find(\r\n    (m) =>\r\n      m.address.toBase58() === marketId && m.programId.toBase58() === programId,\r\n  );\r\n  const knownProgram = MARKETS.find(\r\n    (m) => m.programId.toBase58() === programId,\r\n  );\r\n  const knownBaseCurrency =\r\n    market?.baseMintAddress &&\r\n    TOKEN_MINTS.find((token) => token.address.equals(market.baseMintAddress))\r\n      ?.name;\r\n\r\n  const knownQuoteCurrency =\r\n    market?.quoteMintAddress &&\r\n    TOKEN_MINTS.find((token) => token.address.equals(market.quoteMintAddress))\r\n      ?.name;\r\n\r\n  const canSubmit =\r\n    !loadingMarket &&\r\n    !!market &&\r\n    market.publicKey.toBase58() === marketId &&\r\n    marketId &&\r\n    programId &&\r\n    marketLabel &&\r\n    (knownBaseCurrency || baseLabel) &&\r\n    (knownQuoteCurrency || quoteLabel) &&\r\n    wellFormedMarketId;\r\n\r\n  const onSubmit = () => {\r\n    if (!canSubmit) {\r\n      notify({\r\n        message: 'Please fill in all fields with valid values',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    let params = {\r\n      address: marketId,\r\n      programId,\r\n      name: marketLabel,\r\n    };\r\n    if (!knownBaseCurrency) {\r\n      params.baseLabel = baseLabel;\r\n    }\r\n    if (!knownQuoteCurrency) {\r\n      params.quoteLabel = quoteLabel;\r\n    }\r\n    onAddCustomMarket(params);\r\n    onDoClose();\r\n  };\r\n\r\n  const onDoClose = () => {\r\n    resetLabels();\r\n    setMarket(null);\r\n    setMarketId(null);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={'Add custom market'}\r\n      visible={visible}\r\n      onOk={onSubmit}\r\n      okText={'Add'}\r\n      onCancel={onDoClose}\r\n      okButtonProps={{ disabled: !canSubmit }}\r\n    >\r\n      <div>\r\n        {wellFormedMarketId ? (\r\n          <>\r\n            {!market && !loadingMarket && (\r\n              <Row style={{ marginBottom: 8 }}>\r\n                <Text type=\"danger\">Not a valid market</Text>\r\n              </Row>\r\n            )}\r\n            {market && knownMarket && (\r\n              <Row style={{ marginBottom: 8 }}>\r\n                <Text type=\"warning\">Market known: {knownMarket.name}</Text>\r\n              </Row>\r\n            )}\r\n            {market && !knownProgram && (\r\n              <Row style={{ marginBottom: 8 }}>\r\n                <Text type=\"danger\">Warning: unknown DEX program</Text>\r\n              </Row>\r\n            )}\r\n            {market && knownProgram && knownProgram.deprecated && (\r\n              <Row style={{ marginBottom: 8 }}>\r\n                <Text type=\"warning\">Warning: deprecated DEX program</Text>\r\n              </Row>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <>\r\n            {marketId && !wellFormedMarketId && (\r\n              <Row style={{ marginBottom: 8 }}>\r\n                <Text type=\"danger\">Invalid market ID</Text>\r\n              </Row>\r\n            )}\r\n          </>\r\n        )}\r\n        <Row style={{ marginBottom: 8 }}>\r\n          <Col span={24}>\r\n            <Input\r\n              placeholder=\"Market Id\"\r\n              value={marketId}\r\n              onChange={(e) => setMarketId(e.target.value)}\r\n              suffix={loadingMarket ? <LoadingOutlined /> : null}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row style={{ marginBottom: 8, marginTop: 8 }}>\r\n          <Col span={24}>\r\n            <Input\r\n              placeholder=\"Market Label\"\r\n              disabled={!market}\r\n              value={marketLabel}\r\n              onChange={(e) => setMarketLabel(e.target.value)}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[8]} style={{ marginBottom: 8 }}>\r\n          <Col span={12}>\r\n            <Input\r\n              placeholder=\"Base label\"\r\n              disabled={!market || knownBaseCurrency}\r\n              value={knownBaseCurrency || baseLabel}\r\n              onChange={(e) => setBaseLabel(e.target.value)}\r\n            />\r\n            {market && !knownBaseCurrency && (\r\n              <div style={{ marginTop: 8 }}>\r\n                <Text type=\"warning\">Warning: unknown token</Text>\r\n              </div>\r\n            )}\r\n          </Col>\r\n          <Col span={12}>\r\n            <Input\r\n              placeholder=\"Quote label\"\r\n              disabled={!market || knownQuoteCurrency}\r\n              value={knownQuoteCurrency || quoteLabel}\r\n              onChange={(e) => setQuoteLabel(e.target.value)}\r\n            />\r\n            {market && !knownQuoteCurrency && (\r\n              <div style={{ marginTop: 8 }}>\r\n                <Text type=\"warning\">Warning: unknown token</Text>\r\n              </div>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Button, Col, Popover, Row, Select, Typography } from 'antd';\r\nimport styled from 'styled-components';\r\nimport Orderbook from '../components/Orderbook';\r\nimport UserInfoTable from '../components/UserInfoTable';\r\nimport StandaloneBalancesDisplay from '../components/StandaloneBalancesDisplay';\r\nimport {\r\n  getMarketInfos,\r\n  getTradePageUrl,\r\n  MarketProvider,\r\n  useMarket,\r\n  useMarketsList,\r\n  useUnmigratedDeprecatedMarkets,\r\n} from '../utils/markets';\r\nimport TradeForm from '../components/TradeForm';\r\nimport TradesTable from '../components/TradesTable';\r\nimport LinkAddress from '../components/LinkAddress';\r\nimport DeprecatedMarketsInstructions from '../components/DeprecatedMarketsInstructions';\r\nimport {\r\n  DeleteOutlined,\r\n  InfoCircleOutlined,\r\n  PlusCircleOutlined,\r\n} from '@ant-design/icons';\r\nimport CustomMarketDialog from '../components/CustomMarketDialog';\r\nimport { notify } from '../utils/notifications';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nconst { Option, OptGroup } = Select;\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px 16px;\r\n  .borderNone .ant-select-selector {\r\n    border: none !important;\r\n  }\r\n`;\r\n\r\nexport default function TradePage() {\r\n  const { marketAddress } = useParams();\r\n  useEffect(() => {\r\n    if (marketAddress) {\r\n      localStorage.setItem('marketAddress', JSON.stringify(marketAddress));\r\n    }\r\n  }, [marketAddress]);\r\n  const history = useHistory();\r\n  function setMarketAddress(address) {\r\n    history.push(getTradePageUrl(address));\r\n  }\r\n\r\n  return (\r\n    <MarketProvider\r\n      marketAddress={marketAddress}\r\n      setMarketAddress={setMarketAddress}\r\n    >\r\n      <TradePageInner />\r\n    </MarketProvider>\r\n  );\r\n}\r\n\r\nfunction TradePageInner() {\r\n  const {\r\n    market,\r\n    marketName,\r\n    customMarkets,\r\n    setCustomMarkets,\r\n    setMarketAddress,\r\n  } = useMarket();\r\n  const markets = useMarketsList();\r\n  const [handleDeprecated, setHandleDeprecated] = useState(false);\r\n  const [addMarketVisible, setAddMarketVisible] = useState(false);\r\n  const deprecatedMarkets = useUnmigratedDeprecatedMarkets();\r\n  const [dimensions, setDimensions] = useState({\r\n    height: window.innerHeight,\r\n    width: window.innerWidth,\r\n  });\r\n\r\n  useEffect(() => {\r\n    document.title = marketName ? `${marketName} — Serum` : 'Serum';\r\n  }, [marketName]);\r\n\r\n  const changeOrderRef = useRef<\r\n    ({ size, price }: { size?: number; price?: number }) => void\r\n  >();\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setDimensions({\r\n        height: window.innerHeight,\r\n        width: window.innerWidth,\r\n      });\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  const width = dimensions?.width;\r\n  const componentProps = {\r\n    onChangeOrderRef: (ref) => (changeOrderRef.current = ref),\r\n    onPrice: useCallback(\r\n      (price) => changeOrderRef.current && changeOrderRef.current({ price }),\r\n      [],\r\n    ),\r\n    onSize: useCallback(\r\n      (size) => changeOrderRef.current && changeOrderRef.current({ size }),\r\n      [],\r\n    ),\r\n  };\r\n  const component = (() => {\r\n    if (handleDeprecated) {\r\n      return (\r\n        <DeprecatedMarketsPage\r\n          switchToLiveMarkets={() => setHandleDeprecated(false)}\r\n        />\r\n      );\r\n    } else if (width < 1000) {\r\n      return <RenderSmaller {...componentProps} />;\r\n    } else if (width < 1450) {\r\n      return <RenderSmall {...componentProps} />;\r\n    } else {\r\n      return <RenderNormal {...componentProps} />;\r\n    }\r\n  })();\r\n\r\n  const onAddCustomMarket = (customMarket) => {\r\n    const marketInfo = getMarketInfos(customMarkets).some(\r\n      (m) => m.address.toBase58() === customMarket.address,\r\n    );\r\n    if (marketInfo) {\r\n      notify({\r\n        message: `A market with the given ID already exists`,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    const newCustomMarkets = [...customMarkets, customMarket];\r\n    setCustomMarkets(newCustomMarkets);\r\n    setMarketAddress(customMarket.address);\r\n  };\r\n\r\n  const onDeleteCustomMarket = (address) => {\r\n    const newCustomMarkets = customMarkets.filter((m) => m.address !== address);\r\n    setCustomMarkets(newCustomMarkets);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CustomMarketDialog\r\n        visible={addMarketVisible}\r\n        onClose={() => setAddMarketVisible(false)}\r\n        onAddCustomMarket={onAddCustomMarket}\r\n      />\r\n      <Wrapper>\r\n        <Row\r\n          align=\"middle\"\r\n          style={{ paddingLeft: 5, paddingRight: 5 }}\r\n          gutter={16}\r\n        >\r\n          <Col>\r\n            <MarketSelector\r\n              markets={markets}\r\n              setHandleDeprecated={setHandleDeprecated}\r\n              placeholder={'Select market'}\r\n              customMarkets={customMarkets}\r\n              onDeleteCustomMarket={onDeleteCustomMarket}\r\n            />\r\n          </Col>\r\n          {market ? (\r\n            <Col>\r\n              <Popover\r\n                content={<LinkAddress address={market.publicKey.toBase58()} />}\r\n                placement=\"bottomRight\"\r\n                title=\"Market address\"\r\n                trigger=\"click\"\r\n              >\r\n                <InfoCircleOutlined style={{ color: '#2abdd2' }} />\r\n              </Popover>\r\n            </Col>\r\n          ) : null}\r\n          <Col>\r\n            <PlusCircleOutlined\r\n              style={{ color: '#2abdd2' }}\r\n              onClick={() => setAddMarketVisible(true)}\r\n            />\r\n          </Col>\r\n          {deprecatedMarkets && deprecatedMarkets.length > 0 && (\r\n            <React.Fragment>\r\n              <Col>\r\n                <Typography>\r\n                  You have unsettled funds on old markets! Please go through\r\n                  them to claim your funds.\r\n                </Typography>\r\n              </Col>\r\n              <Col>\r\n                <Button onClick={() => setHandleDeprecated(!handleDeprecated)}>\r\n                  {handleDeprecated ? 'View new markets' : 'Handle old markets'}\r\n                </Button>\r\n              </Col>\r\n            </React.Fragment>\r\n          )}\r\n        </Row>\r\n        {component}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction MarketSelector({\r\n  markets,\r\n  placeholder,\r\n  setHandleDeprecated,\r\n  customMarkets,\r\n  onDeleteCustomMarket,\r\n}) {\r\n  const { market, setMarketAddress } = useMarket();\r\n\r\n  const onSetMarketAddress = (marketAddress) => {\r\n    setHandleDeprecated(false);\r\n    setMarketAddress(marketAddress);\r\n  };\r\n\r\n  const extractBase = (a) => a.split('/')[0];\r\n  const extractQuote = (a) => a.split('/')[1];\r\n\r\n  const selectedMarket = getMarketInfos(customMarkets)\r\n    .find(\r\n      (proposedMarket) =>\r\n        market?.address && proposedMarket.address.equals(market.address),\r\n    )\r\n    ?.address?.toBase58();\r\n\r\n  return (\r\n    <Select\r\n      showSearch\r\n      size={'large'}\r\n      style={{ width: 200 }}\r\n      placeholder={placeholder || 'Select a market'}\r\n      optionFilterProp=\"name\"\r\n      onSelect={onSetMarketAddress}\r\n      listHeight={400}\r\n      value={selectedMarket}\r\n      filterOption={(input, option) =>\r\n        option?.name?.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n      }\r\n    >\r\n      {customMarkets && customMarkets.length > 0 && (\r\n        <OptGroup label=\"Custom\">\r\n          {customMarkets.map(({ address, name }, i) => (\r\n            <Option\r\n              value={address}\r\n              key={address}\r\n              name={name}\r\n              style={{\r\n                padding: '10px',\r\n                // @ts-ignore\r\n                backgroundColor: i % 2 === 0 ? 'rgb(39, 44, 61)' : null,\r\n              }}\r\n            >\r\n              <Row>\r\n                <Col flex=\"auto\">{name}</Col>\r\n                {selectedMarket !== address && (\r\n                  <Col>\r\n                    <DeleteOutlined\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        e.nativeEvent.stopImmediatePropagation();\r\n                        onDeleteCustomMarket && onDeleteCustomMarket(address);\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                )}\r\n              </Row>\r\n            </Option>\r\n          ))}\r\n        </OptGroup>\r\n      )}\r\n      <OptGroup label=\"Markets\">\r\n        {markets\r\n          .sort((a, b) =>\r\n            extractQuote(a.name) === 'USDT' && extractQuote(b.name) !== 'USDT'\r\n              ? -1\r\n              : extractQuote(a.name) !== 'USDT' &&\r\n                extractQuote(b.name) === 'USDT'\r\n              ? 1\r\n              : 0,\r\n          )\r\n          .sort((a, b) =>\r\n            extractBase(a.name) < extractBase(b.name)\r\n              ? -1\r\n              : extractBase(a.name) > extractBase(b.name)\r\n              ? 1\r\n              : 0,\r\n          )\r\n          .map(({ address, name, deprecated }, i) => (\r\n            <Option\r\n              value={address.toBase58()}\r\n              key={address}\r\n              name={name}\r\n              style={{\r\n                padding: '10px',\r\n                // @ts-ignore\r\n                backgroundColor: i % 2 === 0 ? 'rgb(39, 44, 61)' : null,\r\n              }}\r\n            >\r\n              {name} {deprecated ? ' (Deprecated)' : null}\r\n            </Option>\r\n          ))}\r\n      </OptGroup>\r\n    </Select>\r\n  );\r\n}\r\n\r\nconst DeprecatedMarketsPage = ({ switchToLiveMarkets }) => {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col flex=\"auto\">\r\n          <DeprecatedMarketsInstructions\r\n            switchToLiveMarkets={switchToLiveMarkets}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nconst RenderNormal = ({ onChangeOrderRef, onPrice, onSize }) => {\r\n  return (\r\n    <Row\r\n      style={{\r\n        minHeight: '900px',\r\n        flexWrap: 'nowrap',\r\n      }}\r\n    >\r\n      <Col flex=\"auto\" style={{ height: '100%', display: 'flex' }}>\r\n        <UserInfoTable />\r\n      </Col>\r\n      <Col flex={'360px'} style={{ height: '100%' }}>\r\n        <Orderbook smallScreen={false} onPrice={onPrice} onSize={onSize} />\r\n        <TradesTable smallScreen={false} />\r\n      </Col>\r\n      <Col\r\n        flex=\"400px\"\r\n        style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\r\n      >\r\n        <TradeForm setChangeOrderRef={onChangeOrderRef} />\r\n        <StandaloneBalancesDisplay />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst RenderSmall = ({ onChangeOrderRef, onPrice, onSize }) => {\r\n  return (\r\n    <>\r\n      <Row\r\n        style={{\r\n          height: '900px',\r\n        }}\r\n      >\r\n        <Col flex=\"auto\" style={{ height: '100%', display: 'flex' }}>\r\n          <Orderbook\r\n            smallScreen={true}\r\n            depth={13}\r\n            onPrice={onPrice}\r\n            onSize={onSize}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\" style={{ height: '100%', display: 'flex' }}>\r\n          <TradesTable smallScreen={true} />\r\n        </Col>\r\n        <Col\r\n          flex=\"400px\"\r\n          style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\r\n        >\r\n          <TradeForm setChangeOrderRef={onChangeOrderRef} />\r\n          <StandaloneBalancesDisplay />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col flex=\"auto\">\r\n          <UserInfoTable />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nconst RenderSmaller = ({ onChangeOrderRef, onPrice, onSize }) => {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col xs={24} sm={12} style={{ height: '100%', display: 'flex' }}>\r\n          <TradeForm style={{ flex: 1 }} setChangeOrderRef={onChangeOrderRef} />\r\n        </Col>\r\n        <Col xs={24} sm={12}>\r\n          <StandaloneBalancesDisplay />\r\n        </Col>\r\n      </Row>\r\n      <Row\r\n        style={{\r\n          height: '500px',\r\n        }}\r\n      >\r\n        <Col xs={24} sm={12} style={{ height: '100%', display: 'flex' }}>\r\n          <Orderbook smallScreen={true} onPrice={onPrice} onSize={onSize} />\r\n        </Col>\r\n        <Col xs={24} sm={12} style={{ height: '100%', display: 'flex' }}>\r\n          <TradesTable smallScreen={true} />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col flex=\"auto\">\r\n          <UserInfoTable />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport FloatingElement from '../components/layout/FloatingElement';\r\nimport {\r\n  useAllMarkets,\r\n  useAllOpenOrders,\r\n  useMarketInfos,\r\n} from '../utils/markets';\r\nimport OpenOrderTable from '../components/UserInfoTable/OpenOrderTable';\r\nimport { Button } from 'antd';\r\nimport { OrderWithMarketAndMarketName } from '../utils/types';\r\n\r\nexport default function OpenOrdersPage() {\r\n  const { openOrders, loaded, refreshOpenOrders } = useAllOpenOrders();\r\n  let marketInfos = useMarketInfos();\r\n  let marketAddressesToNames = Object.fromEntries(\r\n    marketInfos.map((info) => [info.address.toBase58(), info.name]),\r\n  );\r\n  let [allMarkets] = useAllMarkets();\r\n  const marketsByAddress = Object.fromEntries(\r\n    (allMarkets || []).map((marketInfo) => [\r\n      marketInfo.market.address.toBase58(),\r\n      marketInfo.market,\r\n    ]),\r\n  );\r\n\r\n  const dataSource: OrderWithMarketAndMarketName[] = (openOrders || [])\r\n    .map((orderInfos) =>\r\n      orderInfos.orders.map((order) => {\r\n        return {\r\n          marketName: marketAddressesToNames[orderInfos.marketAddress],\r\n          market: marketsByAddress[orderInfos.marketAddress],\r\n          ...order,\r\n        };\r\n      }),\r\n    )\r\n    .flat();\r\n\r\n  return (\r\n    <FloatingElement style={{ flex: 1, paddingTop: 10 }}>\r\n      <Button onClick={refreshOpenOrders} loading={!loaded}>\r\n        Refresh\r\n      </Button>\r\n      <OpenOrderTable\r\n        openOrders={dataSource}\r\n        pageSize={25}\r\n        loading={!loaded}\r\n        onCancelSuccess={refreshOpenOrders}\r\n        marketFilter\r\n      />\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport DataTable from '../layout/DataTable';\r\nimport { Button, Row } from 'antd';\r\nimport { settleAllFunds } from '../../utils/send';\r\nimport { notify } from '../../utils/notifications';\r\nimport { useConnection } from '../../utils/connection';\r\nimport { useWallet } from '../../utils/wallet';\r\nimport {\r\n  useAllMarkets,\r\n  useSelectedTokenAccounts,\r\n  useTokenAccounts,\r\n} from '../../utils/markets';\r\nimport StandaloneTokenAccountsSelect from '../StandaloneTokenAccountSelect';\r\nimport { abbreviateAddress } from '../../utils/utils';\r\nimport { PublicKey } from '@solana/web3.js';\r\n\r\nexport default function WalletBalancesTable({\r\n  walletBalances,\r\n}: {\r\n  walletBalances: {\r\n    coin: string;\r\n    mint: string;\r\n    totalBalance: number;\r\n    walletBalance: number;\r\n    openOrdersFree: number;\r\n    openOrdersTotal: number;\r\n  }[];\r\n}) {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\r\n  const [tokenAccounts, tokenAccountsConnected] = useTokenAccounts();\r\n  const [allMarkets, allMarketsConnected] = useAllMarkets();\r\n  const [settlingFunds, setSettlingFunds] = useState(false);\r\n\r\n  async function onSettleFunds() {\r\n    setSettlingFunds(true);\r\n    try {\r\n      if (!tokenAccounts || !tokenAccountsConnected) {\r\n        notify({\r\n          message: 'Error settling funds',\r\n          description: 'TokenAccounts not connected',\r\n          type: 'error',\r\n        });\r\n        return;\r\n      }\r\n      if (!allMarkets || !allMarketsConnected) {\r\n        notify({\r\n          message: 'Error settling funds',\r\n          description: 'Markets not connected',\r\n          type: 'error',\r\n        });\r\n        return;\r\n      }\r\n      await settleAllFunds({\r\n        connection,\r\n        tokenAccounts,\r\n        selectedTokenAccounts,\r\n        wallet,\r\n        markets: allMarkets.map((marketInfo) => marketInfo.market),\r\n      });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSettlingFunds(false);\r\n    }\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Coin',\r\n      key: 'coin',\r\n      width: '20%',\r\n      render: (walletBalance) => (\r\n        <Row align=\"middle\">\r\n          <a\r\n            href={`https://explorer.solana.com/address/${walletBalance.mint}`}\r\n            target={'_blank'}\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {walletBalance.coin ||\r\n              abbreviateAddress(new PublicKey(walletBalance.mint))}\r\n          </a>\r\n        </Row>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Total Balance',\r\n      dataIndex: 'totalBalance',\r\n      key: 'totalBalance',\r\n      width: '15%',\r\n    },\r\n    {\r\n      title: 'Wallet Balance',\r\n      dataIndex: 'walletBalance',\r\n      key: 'walletBalance',\r\n      width: '15%',\r\n    },\r\n    {\r\n      title: 'Open orders total balances',\r\n      dataIndex: 'openOrdersTotal',\r\n      key: 'openOrdersTotal',\r\n      width: '15%',\r\n    },\r\n    {\r\n      title: 'Unsettled balances',\r\n      dataIndex: 'openOrdersFree',\r\n      key: 'openOrdersFree',\r\n      width: '15%',\r\n    },\r\n    {\r\n      title: 'Selected token account',\r\n      key: 'selectTokenAccount',\r\n      width: '20%',\r\n      render: (walletBalance) => (\r\n        <Row align=\"middle\" style={{ width: '430px' }}>\r\n          <StandaloneTokenAccountsSelect\r\n            accounts={tokenAccounts?.filter(\r\n              (t) => t.effectiveMint.toBase58() === walletBalance.mint,\r\n            )}\r\n            mint={walletBalance.mint}\r\n          />\r\n        </Row>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <React.Fragment>\r\n      <DataTable\r\n        emptyLabel=\"No balances\"\r\n        dataSource={walletBalances}\r\n        columns={columns}\r\n        pagination={false}\r\n      />\r\n      {connected && (\r\n        <Button onClick={onSettleFunds} loading={settlingFunds}>\r\n          Settle all funds\r\n        </Button>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Tabs } from 'antd';\r\nimport {\r\n  useAllOpenOrdersBalances,\r\n  useWalletBalancesForAllMarkets,\r\n} from '../utils/markets';\r\nimport FloatingElement from '../components/layout/FloatingElement';\r\nimport WalletBalancesTable from '../components/UserInfoTable/WalletBalancesTable';\r\nimport { useMintToTickers } from '../utils/tokens';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function BalancesPage() {\r\n  const walletBalances = useWalletBalancesForAllMarkets();\r\n  const mintToTickers = useMintToTickers();\r\n  const openOrdersBalances = useAllOpenOrdersBalances();\r\n\r\n  const data = (walletBalances || [])\r\n  .map((balance) => {\r\n    const balances = {\r\n      coin: mintToTickers[balance.mint],\r\n      mint: balance.mint,\r\n      totalBalance: 0,\r\n      walletBalance: balance.balance,\r\n      openOrdersFree: 0,\r\n      openOrdersTotal: 0,\r\n    };\r\n    for (let openOrdersAccount of openOrdersBalances[balance.mint] || []) {\r\n      balances['openOrdersFree'] += openOrdersAccount.free;\r\n      balances['openOrdersTotal'] += openOrdersAccount.total;\r\n    }\r\n    balances.totalBalance = balances.walletBalance + balances.openOrdersFree + balances.openOrdersTotal;\r\n    return balances;\r\n  })\r\n  .sort((a,b) => {\r\n    console.log(a,b);\r\n    if(a.totalBalance !== b.totalBalance) {\r\n      return b.totalBalance - a.totalBalance;\r\n    }\r\n    else if(mintToTickers[a.mint] < mintToTickers[b.mint]) {\r\n      return -1;\r\n    }\r\n    else if(mintToTickers[a.mint] > mintToTickers[b.mint]) {\r\n      return 1;\r\n    }\r\n    else{\r\n      return 0;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <FloatingElement style={{ flex: 1, paddingTop: 10 }}>\r\n      <Tabs defaultActiveKey=\"walletBalances\">\r\n        <TabPane tab=\"Wallet Balances\" key=\"walletBalances\">\r\n          <WalletBalancesTable walletBalances={data} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, Popover } from 'antd';\r\nimport { InfoCircleOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { useWallet } from '../utils/wallet';\r\nimport LinkAddress from './LinkAddress';\r\n\r\nexport default function WalletConnect() {\r\n  const { connected, wallet } = useWallet();\r\n  const publicKey = wallet?.publicKey?.toBase58();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        type=\"text\"\r\n        size=\"large\"\r\n        onClick={connected ? wallet.disconnect : wallet.connect}\r\n        style={{ color: '#2abdd2' }}\r\n      >\r\n        <UserOutlined />\r\n        {!connected ? 'Connect wallet' : 'Disconnect'}\r\n      </Button>\r\n      {connected && (\r\n        <Popover\r\n          content={<LinkAddress address={publicKey} />}\r\n          placement=\"bottomRight\"\r\n          title=\"Wallet public key\"\r\n          trigger=\"click\"\r\n        >\r\n          <InfoCircleOutlined style={{ color: '#2abdd2' }} />\r\n        </Popover>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Input, Row, Select, Typography } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { Orderbook } from '@project-serum/serum';\r\nimport {\r\n  getExpectedFillPrice,\r\n  getMarketDetails,\r\n  getMarketInfos,\r\n  getMarketOrderPrice,\r\n  getSelectedTokenAccountForMint,\r\n  MarketProvider,\r\n  useBalances,\r\n  useCustomMarkets, useLocallyStoredFeeDiscountKey,\r\n  useMarket,\r\n  useTokenAccounts,\r\n} from '../utils/markets';\r\nimport { notify } from '../utils/notifications';\r\nimport { useWallet } from '../utils/wallet';\r\nimport { useConnection, useSendConnection } from '../utils/connection';\r\nimport { placeOrder } from '../utils/send';\r\nimport { floorToDecimal, getDecimalCount } from '../utils/utils';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport WalletConnect from './WalletConnect';\r\nimport { SwapOutlined } from '@ant-design/icons';\r\nimport { CustomMarketInfo } from '../utils/types';\r\nimport Wallet from '@project-serum/sol-wallet-adapter';\r\n\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\n\r\nconst ActionButton = styled(Button)`\r\n  color: #2abdd2;\r\n  background-color: #212734;\r\n  border-width: 0px;\r\n`;\r\n\r\nconst ConvertButton = styled(Button)`\r\n  background: #02bf76;\r\n  border-color: #02bf76;\r\n`;\r\n\r\nexport default function ConvertForm() {\r\n  const { connected, wallet } = useWallet();\r\n  const { customMarkets } = useCustomMarkets();\r\n  const marketInfos = getMarketInfos(customMarkets);\r\n  const [marketAddress, setMarketAddress] = useState<string | null>(null);\r\n\r\n  const [fromToken, setFromToken] = useState<string | undefined>(undefined);\r\n  const [toToken, setToToken] = useState<string | undefined>(undefined);\r\n  const [size, setSize] = useState<number | undefined>(undefined);\r\n\r\n  const marketInfosbyName = Object.fromEntries(\r\n    marketInfos.map((market) => [market.name, market]),\r\n  );\r\n\r\n  const tokenConvertMap: Map<string, Set<string>> = new Map();\r\n  Object.keys(marketInfosbyName).forEach((market) => {\r\n    let [base, quote] = market.split('/');\r\n    !tokenConvertMap.has(base)\r\n      ? tokenConvertMap.set(base, new Set([quote]))\r\n      : tokenConvertMap.set(\r\n          base,\r\n          new Set([...(tokenConvertMap.get(base) || []), quote]),\r\n        );\r\n    !tokenConvertMap.has(quote)\r\n      ? tokenConvertMap.set(quote, new Set([base]))\r\n      : tokenConvertMap.set(\r\n          quote,\r\n          new Set([...(tokenConvertMap.get(quote) || []), base]),\r\n        );\r\n  });\r\n\r\n  const setMarket = (toToken) => {\r\n    const marketInfo = marketInfos\r\n      .filter((marketInfo) => !marketInfo.deprecated)\r\n      .find(\r\n        (marketInfo) =>\r\n          marketInfo.name === `${fromToken}/${toToken}` ||\r\n          marketInfo.name === `${toToken}/${fromToken}`,\r\n      );\r\n    if (!marketInfo) {\r\n      console.warn(\r\n        `Could not find market info for market names ${fromToken}/${toToken} or ${toToken}/${fromToken}`,\r\n      );\r\n      notify({\r\n        message: 'Invalid market',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    setMarketAddress(marketInfo.address.toBase58());\r\n    setToToken(toToken);\r\n  };\r\n\r\n  return (\r\n    <FloatingElement style={{ maxWidth: 500 }}>\r\n      <Title level={3}>Convert</Title>\r\n      {!connected && (\r\n        <Row justify=\"center\">\r\n          <Col>\r\n            <WalletConnect />\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      {tokenConvertMap && connected && (\r\n        <>\r\n          <Row style={{ marginBottom: 8 }}>\r\n            <Col>\r\n              <Select\r\n                style={{ minWidth: 300 }}\r\n                placeholder=\"Select a token\"\r\n                value={fromToken}\r\n                onChange={(token) => {\r\n                  setFromToken(token);\r\n                  setToToken(undefined);\r\n                }}\r\n              >\r\n                {Array.from(tokenConvertMap.keys()).map((token) => (\r\n                  <Option value={token} key={token}>\r\n                    {token}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n          {fromToken && (\r\n            <Row style={{ marginBottom: 8 }}>\r\n              <Col>\r\n                <Select\r\n                  style={{ minWidth: 300 }}\r\n                  value={toToken}\r\n                  onChange={setMarket}\r\n                >\r\n                  {[...(tokenConvertMap.get(fromToken) || [])].map((token) => (\r\n                    <Option value={token} key={token}>\r\n                      {token}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n          {fromToken && toToken && (\r\n            <MarketProvider\r\n              marketAddress={marketAddress}\r\n              setMarketAddress={setMarketAddress}\r\n            >\r\n              <ConvertFormSubmit\r\n                size={size}\r\n                setSize={setSize}\r\n                fromToken={fromToken}\r\n                toToken={toToken}\r\n                wallet={wallet}\r\n                customMarkets={customMarkets}\r\n              />\r\n            </MarketProvider>\r\n          )}\r\n        </>\r\n      )}\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\nfunction ConvertFormSubmit({\r\n  size,\r\n  setSize,\r\n  fromToken,\r\n  toToken,\r\n  wallet,\r\n  customMarkets,\r\n}: {\r\n  size: number | null | undefined;\r\n  setSize: (newSize: number | undefined) => void;\r\n  fromToken: string;\r\n  toToken: string;\r\n  wallet: Wallet;\r\n  customMarkets: CustomMarketInfo[];\r\n}) {\r\n  const { market } = useMarket();\r\n  const [accounts] = useTokenAccounts();\r\n  const balances = useBalances();\r\n  const [fromAmount, setFromAmount] = useState<number | undefined>();\r\n  const [toAmount, setToAmount] = useState<number | undefined>();\r\n  const { storedFeeDiscountKey: feeDiscountKey } = useLocallyStoredFeeDiscountKey();\r\n\r\n  const connection = useConnection();\r\n  const sendConnection = useSendConnection();\r\n\r\n  const [isConverting, setIsConverting] = useState(false);\r\n\r\n  const isFromTokenBaseOfMarket = (market) => {\r\n    const { marketName } = getMarketDetails(market, customMarkets);\r\n    if (!marketName) {\r\n      throw Error(\r\n        'Cannot determine if coin is quote or base because marketName is missing',\r\n      );\r\n    }\r\n    const [base] = marketName.split('/');\r\n    return fromToken === base;\r\n  };\r\n\r\n  const onConvert = async () => {\r\n    if (!market) {\r\n      console.warn('Market is null when attempting convert.');\r\n      notify({\r\n        message: 'Invalid market',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    // get accounts\r\n    const baseCurrencyAccount = getSelectedTokenAccountForMint(\r\n      accounts,\r\n      market?.baseMintAddress,\r\n    );\r\n    const quoteCurrencyAccount = getSelectedTokenAccountForMint(\r\n      accounts,\r\n      market?.quoteMintAddress,\r\n    );\r\n\r\n    // get approximate price\r\n    let side;\r\n    try {\r\n      side = isFromTokenBaseOfMarket(market) ? 'sell' : 'buy';\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error placing order',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const sidedOrderbookAccount =\r\n      // @ts-ignore\r\n      side === 'buy' ? market._decoded.asks : market._decoded.bids;\r\n    const orderbookData = await connection.getAccountInfo(\r\n      sidedOrderbookAccount,\r\n    );\r\n    if (!orderbookData?.data) {\r\n      notify({ message: 'Invalid orderbook data', type: 'error' });\r\n      return;\r\n    }\r\n    const decodedOrderbookData = Orderbook.decode(market, orderbookData.data);\r\n    const [bbo] =\r\n      decodedOrderbookData &&\r\n      decodedOrderbookData.getL2(1).map(([price]) => price);\r\n    if (!bbo) {\r\n      notify({ message: 'No best price found', type: 'error' });\r\n      return;\r\n    }\r\n    if (!size) {\r\n      notify({ message: 'Size not specified', type: 'error' });\r\n      return;\r\n    }\r\n\r\n    const tickSizeDecimals = getDecimalCount(market.tickSize);\r\n    const parsedPrice = getMarketOrderPrice(\r\n      decodedOrderbookData,\r\n      size,\r\n      tickSizeDecimals,\r\n    );\r\n\r\n    // round size\r\n    const sizeDecimalCount = getDecimalCount(market.minOrderSize);\r\n    const nativeSize = side === 'sell' ? size : size / parsedPrice;\r\n    const parsedSize = floorToDecimal(nativeSize, sizeDecimalCount);\r\n\r\n    setIsConverting(true);\r\n    try {\r\n      await placeOrder({\r\n        side,\r\n        price: parsedPrice,\r\n        size: parsedSize,\r\n        orderType: 'ioc',\r\n        market,\r\n        connection: sendConnection,\r\n        wallet,\r\n        baseCurrencyAccount: baseCurrencyAccount?.pubkey,\r\n        quoteCurrencyAccount: quoteCurrencyAccount?.pubkey,\r\n        feeDiscountPubkey: feeDiscountKey,\r\n      });\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error placing order',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setIsConverting(false);\r\n    }\r\n  };\r\n\r\n  const getPrice = async () => {\r\n    try {\r\n      const side = isFromTokenBaseOfMarket(market) ? 'sell' : 'buy';\r\n      const sidedOrderbookAccount =\r\n        // @ts-ignore\r\n        side === 'buy' ? market._decoded.asks : market._decoded.bids;\r\n      const orderbookData = await connection.getAccountInfo(\r\n        sidedOrderbookAccount,\r\n      );\r\n      if (!orderbookData?.data || !market) {\r\n        return [null, null];\r\n      }\r\n      const decodedOrderbookData = Orderbook.decode(market, orderbookData.data);\r\n      const [bbo] =\r\n        decodedOrderbookData &&\r\n        decodedOrderbookData.getL2(1).map(([price]) => price);\r\n      if (!bbo || !size) {\r\n        return [null, null];\r\n      }\r\n      const tickSizeDecimals = getDecimalCount(market.tickSize);\r\n      const expectedPrice = getExpectedFillPrice(\r\n        decodedOrderbookData,\r\n        size,\r\n        tickSizeDecimals,\r\n      );\r\n      if (side === 'buy') {\r\n        return [expectedPrice.toFixed(6), 1];\r\n      } else {\r\n        return [1, expectedPrice.toFixed(6)];\r\n      }\r\n    } catch (e) {\r\n      console.log(`Got error ${e}`);\r\n      return [null, null];\r\n    }\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      getPrice().then(([fromAmount, toAmount]) => {\r\n        setFromAmount(fromAmount || undefined);\r\n        setToAmount(toAmount || undefined);\r\n      });\r\n    },\r\n    // eslint-disable-next-line\r\n    [market?.address.toBase58(), size],\r\n  );\r\n\r\n  const canConvert = market && size && size > 0;\r\n  const balance = balances.find(\r\n    (coinBalance) => coinBalance.coin === fromToken,\r\n  );\r\n  const availableBalance =\r\n    ((balance?.unsettled || 0) + (balance?.wallet || 0)) * 0.99;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Row style={{ marginBottom: 8 }}>\r\n        <Col>\r\n          <Input\r\n            style={{ minWidth: 300 }}\r\n            addonBefore={`Size (${fromToken})`}\r\n            placeholder=\"Size\"\r\n            value={size === null ? undefined : size}\r\n            type=\"number\"\r\n            onChange={(e) => setSize(parseFloat(e.target.value) || undefined)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={12} style={{ marginBottom: 8 }}>\r\n        <Col span={12}>\r\n          <ActionButton\r\n            block\r\n            size=\"large\"\r\n            onClick={() => setSize(floorToDecimal(availableBalance, 4))}\r\n          >\r\n            Max: {availableBalance.toFixed(4)}\r\n          </ActionButton>\r\n        </Col>\r\n        <Col span={12}>\r\n          <ConvertButton\r\n            block\r\n            type=\"primary\"\r\n            size=\"large\"\r\n            loading={isConverting}\r\n            onClick={onConvert}\r\n            disabled={!canConvert}\r\n          >\r\n            Convert\r\n          </ConvertButton>\r\n        </Col>\r\n      </Row>\r\n      {canConvert && (\r\n        <Row align=\"middle\" justify=\"center\">\r\n          <Col>\r\n            {fromAmount} {fromToken}\r\n          </Col>\r\n          <Col offset={1}>\r\n            <SwapOutlined />\r\n          </Col>\r\n          <Col offset={1}>\r\n            {toAmount} {toToken}\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ConvertForm from '../components/ConvertForm';\r\nimport { Row, Col } from 'antd';\r\nimport { DEFAULT_MARKET, MarketProvider } from '../utils/markets';\r\nimport { useLocalStorageState } from '../utils/utils';\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px 16px;\r\n  .borderNone .ant-select-selector {\r\n    border: none !important;\r\n  }\r\n`;\r\n\r\nexport default function ConvertPage() {\r\n  const [marketAddress, setMarketAddress] = useLocalStorageState(\r\n    'marketAddress',\r\n    DEFAULT_MARKET?.address.toBase58(),\r\n  );\r\n  return (\r\n    <Wrapper style={{ flex: 1, paddingTop: 10 }}>\r\n      <Row justify=\"center\">\r\n        <Col>\r\n          <MarketProvider\r\n            marketAddress={marketAddress}\r\n            setMarketAddress={setMarketAddress}\r\n          >\r\n            <ConvertForm />\r\n          </MarketProvider>\r\n        </Col>\r\n      </Row>\r\n    </Wrapper>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { useLocalStorageState } from './utils';\r\nimport { useInterval } from './useInterval';\r\nimport { useConnection } from './connection';\r\nimport { useWallet } from './wallet';\r\nimport {\r\n  useAllMarkets,\r\n  useSelectedTokenAccounts,\r\n  useTokenAccounts,\r\n} from './markets';\r\nimport { settleAllFunds } from './send';\r\nimport { PreferencesContextValues } from './types';\r\n\r\nconst PreferencesContext = React.createContext<PreferencesContextValues | null>(\r\n  null,\r\n);\r\n\r\nexport function PreferencesProvider({ children }) {\r\n  const [autoSettleEnabled, setAutoSettleEnabled] = useLocalStorageState(\r\n    'autoSettleEnabled',\r\n    true,\r\n  );\r\n\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const { connected, wallet } = useWallet();\r\n  const [marketList] = useAllMarkets();\r\n  const connection = useConnection();\r\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\r\n\r\n  useInterval(() => {\r\n    const autoSettle = async () => {\r\n      const markets = (marketList || []).map((m) => m.market);\r\n      try {\r\n        console.log('Auto settling');\r\n        await settleAllFunds({\r\n          connection,\r\n          wallet,\r\n          tokenAccounts: tokenAccounts || [],\r\n          markets,\r\n          selectedTokenAccounts,\r\n        });\r\n      } catch (e) {\r\n        console.log('Error auto settling funds: ' + e.message);\r\n      }\r\n    };\r\n\r\n    connected && wallet?.autoApprove && autoSettleEnabled && autoSettle();\r\n  }, 10000);\r\n\r\n  return (\r\n    <PreferencesContext.Provider\r\n      value={{\r\n        autoSettleEnabled,\r\n        setAutoSettleEnabled,\r\n      }}\r\n    >\r\n      {children}\r\n    </PreferencesContext.Provider>\r\n  );\r\n}\r\n\r\nexport function usePreferences() {\r\n  const context = useContext(PreferencesContext);\r\n  if (!context) {\r\n    throw new Error('Missing preferences context');\r\n  }\r\n  return {\r\n    autoSettleEnabled: context.autoSettleEnabled,\r\n    setAutoSettleEnabled: context.setAutoSettleEnabled,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { Switch, Typography } from 'antd';\r\nimport { usePreferences } from '../utils/preferences';\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nexport default function Settings({ autoApprove }) {\r\n  const { autoSettleEnabled, setAutoSettleEnabled } = usePreferences();\r\n\r\n  return (\r\n    <div>\r\n      <Switch\r\n        style={{ marginRight: 10 }}\r\n        disabled={!autoApprove}\r\n        checked={autoApprove && autoSettleEnabled}\r\n        onChange={setAutoSettleEnabled}\r\n      />{' '}\r\n      Auto settle\r\n      {!autoApprove && (\r\n        <Paragraph style={{ color: 'rgba(255,255,255,0.5)', marginTop: 10 }}>\r\n          To use auto settle, first enable auto approval in your wallet\r\n        </Paragraph>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Col, Input, Modal, Row } from 'antd';\r\nimport { EndpointInfo } from '../utils/types';\r\n\r\nexport default function CustomClusterEndpointDialog({\r\n  visible,\r\n  testingConnection,\r\n  onAddCustomEndpoint,\r\n  onClose,\r\n}: {\r\n  visible: boolean;\r\n  testingConnection: boolean;\r\n  onAddCustomEndpoint: (info: EndpointInfo) => void;\r\n  onClose?: () => void;\r\n}) {\r\n  const [customEndpoint, setCustomEndpoint] = useState('');\r\n  const [customEndpointName, setCustomEndpointName] = useState('');\r\n\r\n  const onSubmit = () => {\r\n    const fullEndpoint = 'https://' + customEndpoint;\r\n    const params = {\r\n      name: customEndpointName,\r\n      endpoint: fullEndpoint,\r\n      custom: true,\r\n    };\r\n    onAddCustomEndpoint(params);\r\n    onDoClose();\r\n  };\r\n  const onDoClose = () => {\r\n    setCustomEndpoint('');\r\n    setCustomEndpointName('');\r\n    onClose && onClose();\r\n  };\r\n  const canSubmit = customEndpoint !== '' && customEndpointName !== '';\r\n\r\n  return (\r\n    <Modal\r\n      title={'Add custom endpoint'}\r\n      visible={visible}\r\n      onOk={onSubmit}\r\n      okText={'Add'}\r\n      onCancel={onDoClose}\r\n      okButtonProps={{ disabled: !canSubmit, loading: testingConnection }}\r\n    >\r\n      <Row style={{ marginBottom: 8 }}>\r\n        <Col span={24}>\r\n          <Input\r\n            placeholder=\"Cluster Name\"\r\n            value={customEndpointName}\r\n            onChange={(e) => setCustomEndpointName(e.target.value)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginBottom: 8 }}>\r\n        <Col span={24}>\r\n          <Input\r\n            placeholder=\"Cluster Endpoint\"\r\n            value={customEndpoint}\r\n            addonBefore={'https://'}\r\n            onChange={(e) => setCustomEndpoint(e.target.value)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { Select, Typography } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { TOKEN_MINTS } from '@project-serum/serum';\r\nimport apps from '@project-serum/awesome-serum';\r\n\r\nconst { Option } = Select;\r\n\r\nconst appsAndTokens = apps.concat(\r\n  TOKEN_MINTS.map((mint) => {\r\n    return {\r\n      name: `${mint.name} SPL`,\r\n      url: `https://explorer.solana.com/address/${mint.address.toBase58()}`,\r\n      description: `${mint.name} SPL token`,\r\n      icon: '',\r\n      tags: [\r\n        'token',\r\n        'blockchain',\r\n        'solana',\r\n        'spl',\r\n        'solana',\r\n        mint.address.toBase58(),\r\n      ],\r\n    };\r\n  }),\r\n);\r\n\r\ninterface App {\r\n  name: string;\r\n  url: string;\r\n  description: string;\r\n  tags: string[];\r\n}\r\n\r\nexport default function AppSearch(props) {\r\n  const [searchMatches, setSearchMatches] = useState<App[]>([]);\r\n  const [searchValue, setSearchValue] = useState<string | undefined>(undefined);\r\n\r\n  const matchApp = (searchString: string, app: App) => {\r\n    const lowerSearchStr = searchString.toLowerCase();\r\n    return (\r\n      app.name.toLowerCase().includes(lowerSearchStr) ||\r\n      app.tags.some(\r\n        (tag) =>\r\n          tag.toLowerCase().includes(lowerSearchStr) ||\r\n          lowerSearchStr.includes(tag.toLowerCase()),\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleSearch = (value) => {\r\n    setSearchValue(value === '' ? undefined : value);\r\n    const filteredApps = appsAndTokens.filter((app) => matchApp(value, app));\r\n    setSearchMatches(filteredApps);\r\n  };\r\n\r\n  const handleSelect = (value, option) => {\r\n    window.open(option.href, '_blank');\r\n    handleClear();\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setSearchMatches([]);\r\n    setSearchValue(undefined);\r\n  };\r\n\r\n  const options = searchMatches.map((d) => (\r\n    <Option key={d.name} value={d.name} href={d.url}>\r\n      <h3>{d.name}</h3>\r\n      <Typography.Text type=\"secondary\">\r\n        {d.url.replace('https://', '')}\r\n      </Typography.Text>\r\n    </Option>\r\n  ));\r\n\r\n  const ref = useRef<any>();\r\n  return (\r\n    <Select\r\n      ref={ref}\r\n      showSearch\r\n      allowClear\r\n      value={searchValue}\r\n      placeholder={\r\n        props.focussed || props.focussed === undefined\r\n          ? 'Search for dex, swap, wallet, token...'\r\n          : ''\r\n      }\r\n      onSearch={handleSearch}\r\n      onClear={handleClear}\r\n      onSelect={handleSelect}\r\n      onFocus={props.onFocus}\r\n      onBlur={() => {\r\n        props.onBlur();\r\n        handleClear();\r\n      }}\r\n      notFoundContent={null} // todo: make this search history\r\n      style={{\r\n        width: props.width || '300px',\r\n        transition: props.focussed ? 'width 0.1s ease 0.1s' : '',\r\n      }}\r\n      dropdownStyle={{\r\n        width: props.width || '300px',\r\n      }}\r\n      dropdownMatchSelectWidth={false}\r\n      suffixIcon={\r\n        <SearchOutlined onClick={() => ref.current && ref.current.focus()} />\r\n      }\r\n      filterOption={false}\r\n    >\r\n      {options}\r\n    </Select>\r\n  );\r\n}\r\n","import {\r\n  InfoCircleOutlined,\r\n  PlusCircleOutlined,\r\n  SettingOutlined,\r\n} from '@ant-design/icons';\r\nimport { Button, Col, Menu, Popover, Row, Select } from 'antd';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport logo from '../assets/logo.svg';\r\nimport styled from 'styled-components';\r\nimport { useWallet, WALLET_PROVIDERS } from '../utils/wallet';\r\nimport { ENDPOINTS, useConnectionConfig } from '../utils/connection';\r\nimport Settings from './Settings';\r\nimport CustomClusterEndpointDialog from './CustomClusterEndpointDialog';\r\nimport { EndpointInfo } from '../utils/types';\r\nimport { notify } from '../utils/notifications';\r\nimport { Connection } from '@solana/web3.js';\r\nimport WalletConnect from './WalletConnect';\r\nimport AppSearch from './AppSearch';\r\nimport { getTradePageUrl } from '../utils/markets';\r\n\r\nconst Wrapper = styled.div`\r\n  background-color: #0d1017;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  padding: 0px 30px;\r\n  flex-wrap: wrap;\r\n`;\r\nconst LogoWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: #2abdd2;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  img {\r\n    height: 30px;\r\n    margin-right: 8px;\r\n  }\r\n`;\r\n\r\nconst EXTERNAL_LINKS = {\r\n  '/learn': 'https://serum-academy.com/en/serum-dex/',\r\n  '/add-market': 'https://serum-academy.com/en/add-market/',\r\n  '/wallet-support': 'https://serum-academy.com/en/wallet-support',\r\n  '/dex-list': 'https://serum-academy.com/en/dex-list/',\r\n  '/developer-resources': 'https://serum-academy.com/en/developer-resources/',\r\n  '/explorer': 'https://explorer.solana.com',\r\n  '/srm-faq': 'https://projectserum.com/srm-faq',\r\n  '/swap': 'https://swap.projectserum.com',\r\n};\r\n\r\nexport default function TopBar() {\r\n  const { connected, wallet, providerUrl, setProvider } = useWallet();\r\n  const {\r\n    endpoint,\r\n    endpointInfo,\r\n    setEndpoint,\r\n    availableEndpoints,\r\n    setCustomEndpoints,\r\n  } = useConnectionConfig();\r\n  const [addEndpointVisible, setAddEndpointVisible] = useState(false);\r\n  const [testingConnection, setTestingConnection] = useState(false);\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [searchFocussed, setSearchFocussed] = useState(false);\r\n\r\n  const handleClick = useCallback(\r\n    (e) => {\r\n      if (!(e.key in EXTERNAL_LINKS)) {\r\n        history.push(e.key);\r\n      }\r\n    },\r\n    [history],\r\n  );\r\n\r\n  const onAddCustomEndpoint = (info: EndpointInfo) => {\r\n    const existingEndpoint = availableEndpoints.some(\r\n      (e) => e.endpoint === info.endpoint,\r\n    );\r\n    if (existingEndpoint) {\r\n      notify({\r\n        message: `An endpoint with the given url already exists`,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const handleError = (e) => {\r\n      console.log(`Connection to ${info.endpoint} failed: ${e}`);\r\n      notify({\r\n        message: `Failed to connect to ${info.endpoint}`,\r\n        type: 'error',\r\n      });\r\n    };\r\n\r\n    try {\r\n      const connection = new Connection(info.endpoint, 'recent');\r\n      connection\r\n        .getEpochInfo()\r\n        .then((result) => {\r\n          setTestingConnection(true);\r\n          console.log(`testing connection to ${info.endpoint}`);\r\n          const newCustomEndpoints = [\r\n            ...availableEndpoints.filter((e) => e.custom),\r\n            info,\r\n          ];\r\n          setEndpoint(info.endpoint);\r\n          setCustomEndpoints(newCustomEndpoints);\r\n        })\r\n        .catch(handleError);\r\n    } catch (e) {\r\n      handleError(e);\r\n    } finally {\r\n      setTestingConnection(false);\r\n    }\r\n  };\r\n\r\n  const endpointInfoCustom = endpointInfo && endpointInfo.custom;\r\n  useEffect(() => {\r\n    const handler = () => {\r\n      if (endpointInfoCustom) {\r\n        setEndpoint(ENDPOINTS[0].endpoint);\r\n      }\r\n    };\r\n    window.addEventListener('beforeunload', handler);\r\n    return () => window.removeEventListener('beforeunload', handler);\r\n  }, [endpointInfoCustom, setEndpoint]);\r\n\r\n  const tradePageUrl = location.pathname.startsWith('/market/')\r\n    ? location.pathname\r\n    : getTradePageUrl();\r\n\r\n  return (\r\n    <>\r\n      <CustomClusterEndpointDialog\r\n        visible={addEndpointVisible}\r\n        testingConnection={testingConnection}\r\n        onAddCustomEndpoint={onAddCustomEndpoint}\r\n        onClose={() => setAddEndpointVisible(false)}\r\n      />\r\n      <Wrapper>\r\n        <LogoWrapper onClick={() => history.push(tradePageUrl)}>\r\n          <img src={logo} alt=\"\" />\r\n          {'SERUM'}\r\n        </LogoWrapper>\r\n        <Menu\r\n          mode=\"horizontal\"\r\n          onClick={handleClick}\r\n          selectedKeys={[location.pathname]}\r\n          style={{\r\n            borderBottom: 'none',\r\n            backgroundColor: 'transparent',\r\n            display: 'flex',\r\n            alignItems: 'flex-end',\r\n            flex: 1,\r\n          }}\r\n        >\r\n          <Menu.Item key={tradePageUrl} style={{ margin: '0 10px 0 20px' }}>\r\n            TRADE\r\n          </Menu.Item>\r\n          {!searchFocussed && (\r\n            <Menu.Item key=\"/swap\" style={{ margin: '0 10px' }}>\r\n              <a\r\n                href={EXTERNAL_LINKS['/swap']}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                SWAP\r\n              </a>\r\n            </Menu.Item>\r\n          )}\r\n          {connected && (!searchFocussed || location.pathname === '/balances') && (\r\n            <Menu.Item key=\"/balances\" style={{ margin: '0 10px' }}>\r\n              BALANCES\r\n            </Menu.Item>\r\n          )}\r\n          {connected && (!searchFocussed || location.pathname === '/orders') && (\r\n            <Menu.Item key=\"/orders\" style={{ margin: '0 10px' }}>\r\n              ORDERS\r\n            </Menu.Item>\r\n          )}\r\n          {connected && (!searchFocussed || location.pathname === '/convert') && (\r\n            <Menu.Item key=\"/convert\" style={{ margin: '0 10px' }}>\r\n              CONVERT\r\n            </Menu.Item>\r\n          )}\r\n          {(!searchFocussed || location.pathname === '/list-new-market') && (\r\n            <Menu.Item key=\"/list-new-market\" style={{ margin: '0 10px' }}>\r\n              ADD MARKET\r\n            </Menu.Item>\r\n          )}\r\n          {!searchFocussed && (\r\n            <Menu.SubMenu\r\n              title=\"LEARN\"\r\n              onTitleClick={() =>\r\n                window.open(EXTERNAL_LINKS['/learn'], '_blank')\r\n              }\r\n              style={{ margin: '0 0px 0 10px' }}\r\n            >\r\n              <Menu.Item key=\"/add-market\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/add-market']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Adding a market\r\n                </a>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/wallet-support\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/wallet-support']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Supported wallets\r\n                </a>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/dex-list\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/dex-list']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  DEX list\r\n                </a>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/developer-resources\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/developer-resources']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Developer resources\r\n                </a>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/explorer\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/explorer']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Solana block explorer\r\n                </a>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/srm-faq\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/srm-faq']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  SRM FAQ\r\n                </a>\r\n              </Menu.Item>\r\n            </Menu.SubMenu>\r\n          )}\r\n        </Menu>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            paddingRight: 5,\r\n          }}\r\n        >\r\n          <AppSearch\r\n            onFocus={() => setSearchFocussed(true)}\r\n            onBlur={() => setSearchFocussed(false)}\r\n            focussed={searchFocussed}\r\n            width={searchFocussed ? '350px' : '35px'}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Row\r\n            align=\"middle\"\r\n            style={{ paddingLeft: 5, paddingRight: 5 }}\r\n            gutter={16}\r\n          >\r\n            <Col>\r\n              <PlusCircleOutlined\r\n                style={{ color: '#2abdd2' }}\r\n                onClick={() => setAddEndpointVisible(true)}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Popover\r\n                content={endpoint}\r\n                placement=\"bottomRight\"\r\n                title=\"URL\"\r\n                trigger=\"hover\"\r\n              >\r\n                <InfoCircleOutlined style={{ color: '#2abdd2' }} />\r\n              </Popover>\r\n            </Col>\r\n            <Col>\r\n              <Select\r\n                onSelect={setEndpoint}\r\n                value={endpoint}\r\n                style={{ marginRight: 8, width: '150px' }}\r\n              >\r\n                {availableEndpoints.map(({ name, endpoint }) => (\r\n                  <Select.Option value={endpoint} key={endpoint}>\r\n                    {name}\r\n                  </Select.Option>\r\n                ))}\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        {connected && (\r\n          <div>\r\n            <Popover\r\n              content={<Settings autoApprove={wallet?.autoApprove} />}\r\n              placement=\"bottomRight\"\r\n              title=\"Settings\"\r\n              trigger=\"click\"\r\n            >\r\n              <Button style={{ marginRight: 8 }}>\r\n                <SettingOutlined />\r\n                Settings\r\n              </Button>\r\n            </Popover>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <Select onSelect={setProvider} value={providerUrl}>\r\n            {WALLET_PROVIDERS.map(({ name, url }) => (\r\n              <Select.Option value={url} key={url}>\r\n                {name}\r\n              </Select.Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n        <div>\r\n          <WalletConnect />\r\n        </div>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n","export const helpUrls = {\r\n  customerSupport: 'https://t.me/ProjectSerum',\r\n  customerSupportZh: 'https://t.me/ProjectSerum_Chinese',\r\n  contactEmail: 'mailto:contact@projectserum.com',\r\n  discord: 'https://discord.gg/EDvudv6',\r\n  telegram: 'https://t.me/ProjectSerum',\r\n  github: 'https://github.com/project-serum',\r\n  projectSerum: 'https://projectserum.com/',\r\n  developerResources: 'https://projectserum.com/developer-resources',\r\n  solanaBeach: 'https://solanabeach.io',\r\n};\r\n","import React from 'react';\r\nimport { Layout, Row, Col, Grid } from 'antd';\r\nimport Link from './Link';\r\nimport { helpUrls } from './HelpUrls';\r\nconst { Footer } = Layout;\r\nconst { useBreakpoint } = Grid;\r\n\r\nconst footerElements = [\r\n  {\r\n    description: 'Serum Developer Resources',\r\n    link: helpUrls.developerResources,\r\n  },\r\n  { description: 'Discord', link: helpUrls.discord },\r\n  { description: 'Telegram', link: helpUrls.telegram },\r\n  { description: 'GitHub', link: helpUrls.github },\r\n  { description: 'Project Serum', link: helpUrls.projectSerum },\r\n  { description: 'Solana Network', link: helpUrls.solanaBeach },\r\n];\r\n\r\nexport const CustomFooter = () => {\r\n  const smallScreen = !useBreakpoint().lg;\r\n\r\n  return (\r\n    <Footer\r\n      style={{\r\n        height: '45px',\r\n        paddingBottom: 10,\r\n        paddingTop: 10,\r\n      }}\r\n    >\r\n      <Row align=\"middle\" gutter={[16, 4]}>\r\n        {!smallScreen && (\r\n          <>\r\n            <Col flex=\"auto\" />\r\n            {footerElements.map((elem, index) => {\r\n              return (\r\n                <Col key={index + ''}>\r\n                  <Link external to={elem.link}>\r\n                    {elem.description}\r\n                  </Link>\r\n                </Col>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n        <Col flex=\"auto\">{/*  <DexProgramSelector />*/}</Col>\r\n      </Row>\r\n    </Footer>\r\n  );\r\n};\r\n","import { Layout } from 'antd';\r\nimport React from 'react';\r\nimport TopBar from './TopBar';\r\nimport { CustomFooter as Footer } from './Footer';\r\nconst { Header, Content } = Layout;\r\n\r\nexport default function BasicLayout({ children }) {\r\n  return (\r\n    <React.Fragment>\r\n      <Layout\r\n        style={{ display: 'flex', minHeight: '100vh', flexDirection: 'column' }}\r\n      >\r\n        <Header style={{ padding: 0, minHeight: 64, height: 'unset' }}>\r\n          <TopBar />\r\n        </Header>\r\n        <Content style={{ flex: 1 }}>{children}</Content>\r\n        <Footer />\r\n      </Layout>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import { PublicKey } from '@solana/web3.js';\r\nimport React, { ReactElement, useMemo, useState } from 'react';\r\nimport { useAccountInfo } from '../utils/connection';\r\nimport { isValidPublicKey } from '../utils/utils';\r\nimport { ValidateStatus } from 'antd/lib/form/FormItem';\r\nimport { TokenInstructions } from '@project-serum/serum';\r\nimport { parseTokenMintData, useMintToTickers } from '../utils/tokens';\r\nimport { AutoComplete, Form, Tooltip } from 'antd';\r\nimport Link from './Link';\r\n\r\nexport interface MintInfo {\r\n  address: PublicKey;\r\n  decimals: number;\r\n}\r\n\r\nexport function useMintInput(\r\n  name,\r\n  label: string | ReactElement,\r\n  tooltip?: string | ReactElement,\r\n): [ReactElement, MintInfo | null] {\r\n  const [address, setAddress] = useState('');\r\n  const [accountInfo, loaded] = useAccountInfo(\r\n    isValidPublicKey(address) ? new PublicKey(address) : null,\r\n  );\r\n\r\n  const mintToTickers = useMintToTickers();\r\n  const options = useMemo(() => {\r\n    return Object.entries(mintToTickers)\r\n      .filter(\r\n        ([mintAddress, ticker]) =>\r\n          mintAddress.includes(address) ||\r\n          ticker.toLowerCase().includes(address.toLowerCase()),\r\n      )\r\n      .map(([mintAddress, ticker]) => ({\r\n        value: mintAddress,\r\n        label: (\r\n          <>\r\n            {ticker} ({mintAddress})\r\n          </>\r\n        ),\r\n      }));\r\n  }, [mintToTickers, address]);\r\n\r\n  const { validateStatus, hasFeedback, help, mintInfo } = useMemo(() => {\r\n    let validateStatus: ValidateStatus = '';\r\n    let hasFeedback = false;\r\n    let help: string | null = null;\r\n    let mintInfo: MintInfo | null = null;\r\n    if (address) {\r\n      hasFeedback = true;\r\n      if (accountInfo) {\r\n        if (\r\n          accountInfo.owner.equals(TokenInstructions.TOKEN_PROGRAM_ID) &&\r\n          accountInfo.data.length === 82\r\n        ) {\r\n          let parsed = parseTokenMintData(accountInfo.data);\r\n          if (parsed.initialized) {\r\n            validateStatus = 'success';\r\n            mintInfo = {\r\n              address: new PublicKey(address),\r\n              decimals: parsed.decimals,\r\n            };\r\n          } else {\r\n            validateStatus = 'error';\r\n            help = 'Invalid SPL mint';\r\n          }\r\n        } else {\r\n          validateStatus = 'error';\r\n          help = 'Invalid SPL mint address';\r\n        }\r\n      } else if (isValidPublicKey(address) && !loaded) {\r\n        validateStatus = 'validating';\r\n      } else {\r\n        validateStatus = 'error';\r\n        help = 'Invalid Solana address';\r\n      }\r\n    }\r\n    return { validateStatus, hasFeedback, help, mintInfo };\r\n  }, [address, accountInfo, loaded]);\r\n\r\n  const input = (\r\n    <Form.Item\r\n      label={\r\n        <Tooltip\r\n          title={\r\n            <>\r\n              {tooltip} You can look up token mint addresses on{' '}\r\n              <Link external to=\"https://sollet.io\">\r\n                sollet.io\r\n              </Link>\r\n              .\r\n            </>\r\n          }\r\n        >\r\n          {label}\r\n        </Tooltip>\r\n      }\r\n      name={name}\r\n      validateStatus={validateStatus}\r\n      hasFeedback={hasFeedback}\r\n      help={help}\r\n    >\r\n      <AutoComplete\r\n        options={options}\r\n        value={address}\r\n        onChange={(value) => setAddress(value)}\r\n      />\r\n    </Form.Item>\r\n  );\r\n\r\n  return [input, mintInfo];\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button, Form, Input, Tooltip, Typography } from 'antd';\r\nimport { notify } from '../utils/notifications';\r\nimport { MARKETS } from '@project-serum/serum';\r\nimport { useConnection } from '../utils/connection';\r\nimport FloatingElement from '../components/layout/FloatingElement';\r\nimport styled from 'styled-components';\r\nimport { useWallet } from '../utils/wallet';\r\nimport { listMarket } from '../utils/send';\r\nimport { useMintInput } from '../components/useMintInput';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 800px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 24px;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nexport default function ListNewMarketPage() {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [baseMintInput, baseMintInfo] = useMintInput(\r\n    'baseMint',\r\n    <Text>\r\n      Base Token Mint Address{' '}\r\n      <Text type=\"secondary\">\r\n        (e.g. BTC solana address:{' '}\r\n        {\r\n          <Text type=\"secondary\" code>\r\n            9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\r\n          </Text>\r\n        }\r\n        )\r\n      </Text>\r\n    </Text>,\r\n    'The base token is the token being traded. For example, the base token of a BTC/USDT market is BTC.',\r\n  );\r\n  const [quoteMintInput, quoteMintInfo] = useMintInput(\r\n    'quoteMint',\r\n    <Text>\r\n      Quote Token Mint Address{' '}\r\n      <Text type=\"secondary\">\r\n        (e.g. USDT solana address:{' '}\r\n        {\r\n          <Text type=\"secondary\" code>\r\n            BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4\r\n          </Text>\r\n        }\r\n        )\r\n      </Text>\r\n    </Text>,\r\n    'The quote token is the token used to price trades. For example, the quote token of a BTC/USDT market is USDT.',\r\n  );\r\n  const [lotSize, setLotSize] = useState('1');\r\n  const [tickSize, setTickSize] = useState('0.01');\r\n  const dexProgramId = MARKETS.find(({ deprecated }) => !deprecated).programId;\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const [listedMarket, setListedMarket] = useState(null);\r\n\r\n  let baseLotSize;\r\n  let quoteLotSize;\r\n  if (baseMintInfo && parseFloat(lotSize) > 0) {\r\n    baseLotSize = Math.round(10 ** baseMintInfo.decimals * parseFloat(lotSize));\r\n    if (quoteMintInfo && parseFloat(tickSize) > 0) {\r\n      quoteLotSize = Math.round(\r\n        parseFloat(lotSize) *\r\n          10 ** quoteMintInfo.decimals *\r\n          parseFloat(tickSize),\r\n      );\r\n    }\r\n  }\r\n\r\n  const canSubmit =\r\n    connected &&\r\n    !!baseMintInfo &&\r\n    !!quoteMintInfo &&\r\n    !!baseLotSize &&\r\n    !!quoteLotSize;\r\n\r\n  async function onSubmit() {\r\n    if (!canSubmit) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const marketAddress = await listMarket({\r\n        connection,\r\n        wallet,\r\n        baseMint: baseMintInfo.address,\r\n        quoteMint: quoteMintInfo.address,\r\n        baseLotSize,\r\n        quoteLotSize,\r\n        dexProgramId,\r\n      });\r\n      setListedMarket(marketAddress);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error listing new market',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <FloatingElement>\r\n        <Title level={4}>List New Market</Title>\r\n        <Form\r\n          labelCol={{ span: 24 }}\r\n          wrapperCol={{ span: 24 }}\r\n          layout={'vertical'}\r\n          onFinish={onSubmit}\r\n        >\r\n          {baseMintInput}\r\n          {quoteMintInput}\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Smallest allowed order size. For a BTC/USDT market, this would be in units of BTC.\">\r\n                Minimum Order Size{' '}\r\n                <Text type=\"secondary\">(Lot size in e.g. BTC)</Text>\r\n              </Tooltip>\r\n            }\r\n            name=\"lotSize\"\r\n            initialValue=\"1\"\r\n            validateStatus={\r\n              baseMintInfo && quoteMintInfo\r\n                ? baseLotSize\r\n                  ? 'success'\r\n                  : 'error'\r\n                : null\r\n            }\r\n            hasFeedback={baseMintInfo && quoteMintInfo}\r\n          >\r\n            <Input\r\n              value={lotSize}\r\n              onChange={(e) => setLotSize(e.target.value.trim())}\r\n              type=\"number\"\r\n              min=\"0\"\r\n              step=\"any\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Smallest amount by which prices can move. For a BTC/USDT market, this would be in units of USDT.\">\r\n                Tick Size{' '}\r\n                <Text type=\"secondary\">(Price increment in e.g. USDT)</Text>\r\n              </Tooltip>\r\n            }\r\n            name=\"tickSize\"\r\n            initialValue=\"0.01\"\r\n            validateStatus={\r\n              baseMintInfo && quoteMintInfo\r\n                ? quoteLotSize\r\n                  ? 'success'\r\n                  : 'error'\r\n                : null\r\n            }\r\n            hasFeedback={baseMintInfo && quoteMintInfo}\r\n          >\r\n            <Input\r\n              value={tickSize}\r\n              onChange={(e) => setTickSize(e.target.value.trim())}\r\n              type=\"number\"\r\n              min=\"0\"\r\n              step=\"any\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item label=\" \" colon={false}>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              disabled={!canSubmit}\r\n              loading={submitting}\r\n            >\r\n              {connected ? 'Submit' : 'Not connected to wallet'}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </FloatingElement>\r\n      {listedMarket ? (\r\n        <FloatingElement>\r\n          <Text>New market address: {listedMarket.toBase58()}</Text>\r\n        </FloatingElement>\r\n      ) : null}\r\n    </Wrapper>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  AutoComplete,\r\n  Button,\r\n  Form,\r\n  Input,\r\n  Switch,\r\n  Tooltip,\r\n  Typography,\r\n} from 'antd';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useConnection } from '../../utils/connection';\r\nimport FloatingElement from '../../components/layout/FloatingElement';\r\nimport styled from 'styled-components';\r\nimport { useWallet } from '../../utils/wallet';\r\nimport { sendSignedTransaction, signTransactions } from '../../utils/send';\r\nimport { useMintInput } from '../../components/useMintInput';\r\nimport { PoolTransactions } from '@project-serum/pool';\r\nimport { useTokenAccounts } from '../../utils/markets';\r\nimport BN from 'bn.js';\r\nimport { notify } from '../../utils/notifications';\r\nimport Link from '../../components/Link';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 800px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 24px;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nconst AddRemoveTokenButtons = styled.div`\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nconst SIMPLE_POOL_PROGRAM_ID = '71JS8f7y7ASMbuuSMCVG7a3qDdcVco2qYD6bMJeZqUCm';\r\nconst ADMIN_CONTROLLED_POOL_PROGRAM_ID =\r\n  'WvmTNLpGMVbwJVYztYL4Hnsy82cJhQorxjnnXcRm3b6';\r\nconst DEFAULT_PROGRAM_ID = ADMIN_CONTROLLED_POOL_PROGRAM_ID;\r\nconst PROGRAM_ID_OPTIONS = [\r\n  {\r\n    label: `Simple Pool (${SIMPLE_POOL_PROGRAM_ID})`,\r\n    value: SIMPLE_POOL_PROGRAM_ID,\r\n  },\r\n  {\r\n    label: `Admin-Controlled Pool (${ADMIN_CONTROLLED_POOL_PROGRAM_ID})`,\r\n    value: ADMIN_CONTROLLED_POOL_PROGRAM_ID,\r\n  },\r\n];\r\n\r\nexport default function NewPoolPage() {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [poolName, setPoolName] = useState('');\r\n  const [programId, setProgramId] = useState(DEFAULT_PROGRAM_ID);\r\n  const [initialSupply, setInitialSupply] = useState('1');\r\n  const [initialAssets, setInitialAssets] = useState<InitialAsset[]>([\r\n    { valid: false },\r\n    { valid: false },\r\n  ]);\r\n  const [adminControlled, setAdminControlled] = useState(false);\r\n  const [adminAddress, setAdminAddress] = useState('');\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [newPoolAddress, setNewPoolAddress] = useState<PublicKey | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (programId === SIMPLE_POOL_PROGRAM_ID) {\r\n      setAdminControlled(false);\r\n    } else if (programId === ADMIN_CONTROLLED_POOL_PROGRAM_ID) {\r\n      setAdminControlled(true);\r\n    }\r\n  }, [programId]);\r\n\r\n  useEffect(() => {\r\n    if (connected) {\r\n      setAdminAddress(wallet.publicKey.toBase58());\r\n    }\r\n  }, [wallet, connected]);\r\n\r\n  const canSubmit =\r\n    connected &&\r\n    poolName.trim() &&\r\n    programId &&\r\n    parseFloat(initialSupply) > 0 &&\r\n    initialAssets.every((asset) => asset.valid) &&\r\n    tokenAccounts &&\r\n    (adminAddress || !adminControlled);\r\n\r\n  async function onSubmit() {\r\n    if (!canSubmit) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const assets = initialAssets as ValidInitialAsset[];\r\n      const [\r\n        poolAddress,\r\n        transactionsAndSigners,\r\n      ] = await PoolTransactions.initializeSimplePool({\r\n        connection,\r\n        programId: new PublicKey(programId),\r\n        poolName,\r\n        poolStateSpace: 1024,\r\n        poolMintDecimals: 6,\r\n        initialPoolMintSupply: new BN(\r\n          Math.round(10 ** 6 * parseFloat(initialSupply)),\r\n        ),\r\n        assetMints: assets.map((asset) => asset.mint),\r\n        initialAssetQuantities: assets.map((asset) => new BN(asset.quantity)),\r\n        creator: wallet.publicKey,\r\n        creatorAssets: assets.map((asset) => {\r\n          const found = tokenAccounts?.find((tokenAccount) =>\r\n            tokenAccount.effectiveMint.equals(asset.mint),\r\n          );\r\n          if (!found) {\r\n            throw new Error('No token account for ' + asset.mint.toBase58());\r\n          }\r\n          return found.pubkey;\r\n        }),\r\n        additionalAccounts: adminControlled\r\n          ? [\r\n              {\r\n                pubkey: new PublicKey(adminAddress),\r\n                isSigner: false,\r\n                isWritable: false,\r\n              },\r\n            ]\r\n          : [],\r\n      });\r\n      const signed = await signTransactions({\r\n        transactionsAndSigners,\r\n        wallet,\r\n        connection,\r\n      });\r\n      for (let signedTransaction of signed) {\r\n        await sendSignedTransaction({ signedTransaction, connection });\r\n      }\r\n      setNewPoolAddress(poolAddress);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error creating new pool',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <FloatingElement>\r\n        <Title level={4}>Create new pool</Title>\r\n        <Form layout=\"vertical\" onFinish={onSubmit}>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Public name of the pool.\">Pool Name</Tooltip>\r\n            }\r\n            name=\"name\"\r\n          >\r\n            <Input\r\n              value={poolName}\r\n              onChange={(e) => setPoolName(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Address of the pool program.\">\r\n                Program ID{' '}\r\n                <Text type=\"secondary\">(e.g. {DEFAULT_PROGRAM_ID})</Text>\r\n              </Tooltip>\r\n            }\r\n            name=\"programId\"\r\n            initialValue={DEFAULT_PROGRAM_ID}\r\n          >\r\n            <AutoComplete\r\n              value={programId}\r\n              onChange={(value) => setProgramId(value)}\r\n              options={PROGRAM_ID_OPTIONS}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Initial number of pool tokens to mint to your account.\">\r\n                Initial Pool Token Supply\r\n              </Tooltip>\r\n            }\r\n            name=\"initialSupply\"\r\n            initialValue=\"1\"\r\n          >\r\n            <Input\r\n              value={initialSupply}\r\n              onChange={(e) => setInitialSupply(e.target.value.trim())}\r\n              type=\"number\"\r\n              min=\"0\"\r\n              step=\"any\"\r\n            />\r\n          </Form.Item>\r\n          <AddRemoveTokenButtons>\r\n            <Button\r\n              onClick={() =>\r\n                setInitialAssets((assets) => assets.concat({ valid: false }))\r\n              }\r\n            >\r\n              Add token\r\n            </Button>{' '}\r\n            <Button\r\n              onClick={() =>\r\n                setInitialAssets((assets) => assets.slice(0, assets.length - 1))\r\n              }\r\n              disabled={initialAssets.length <= 1}\r\n            >\r\n              Remove token\r\n            </Button>\r\n          </AddRemoveTokenButtons>\r\n          {initialAssets.map((asset, i) => (\r\n            <AssetInput setInitialAssets={setInitialAssets} index={i} key={i} />\r\n          ))}\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Whether the assets in the pool can be controlled by the pool admin.\">\r\n                Admin Controlled\r\n              </Tooltip>\r\n            }\r\n            name=\"adminControlled\"\r\n          >\r\n            <Switch\r\n              checked={adminControlled}\r\n              onChange={(checked) => setAdminControlled(checked)}\r\n              disabled={\r\n                programId === SIMPLE_POOL_PROGRAM_ID ||\r\n                programId === ADMIN_CONTROLLED_POOL_PROGRAM_ID\r\n              }\r\n            />\r\n          </Form.Item>\r\n          {adminControlled ? (\r\n            <Form.Item\r\n              label={\r\n                <Tooltip title=\"Address of the pool admin account.\">\r\n                  Admin Address\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Input\r\n                value={adminAddress}\r\n                onChange={(e) => setAdminAddress(e.target.value.trim())}\r\n              />\r\n            </Form.Item>\r\n          ) : null}\r\n          <Form.Item label=\" \" colon={false}>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              disabled={!canSubmit}\r\n              loading={submitting}\r\n            >\r\n              {connected ? 'Submit' : 'Not connected to wallet'}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </FloatingElement>\r\n      {newPoolAddress ? (\r\n        <FloatingElement>\r\n          <Text>\r\n            New pool address:{' '}\r\n            <Link to={`/pools/${newPoolAddress.toBase58()}`}>\r\n              {newPoolAddress.toBase58()}\r\n            </Link>\r\n          </Text>\r\n        </FloatingElement>\r\n      ) : null}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\ntype InitialAsset = { valid: false } | ValidInitialAsset;\r\ninterface ValidInitialAsset {\r\n  valid: true;\r\n  mint: PublicKey;\r\n  quantity: number;\r\n}\r\n\r\nfunction AssetInput({ setInitialAssets, index }) {\r\n  const [mintInput, mintInfo] = useMintInput(\r\n    `mint${index}`,\r\n    <Text>Token {index + 1} Mint Address</Text>,\r\n    <>Token mint address for token {index + 1}.</>,\r\n  );\r\n  const [quantity, setQuantity] = useState('');\r\n\r\n  useEffect(() => {\r\n    let change: InitialAsset;\r\n    if (mintInfo && parseFloat(quantity) >= 0) {\r\n      let parsedQuantity = Math.round(\r\n        10 ** mintInfo.decimals * parseFloat(quantity),\r\n      );\r\n      change = {\r\n        mint: mintInfo.address,\r\n        quantity: parsedQuantity,\r\n        valid: true,\r\n      };\r\n    } else {\r\n      change = { valid: false };\r\n    }\r\n    setInitialAssets((assets: InitialAsset[]) =>\r\n      assets.map((old, i) => (i === index ? change : old)),\r\n    );\r\n  }, [setInitialAssets, index, mintInfo, quantity]);\r\n\r\n  return (\r\n    <>\r\n      {mintInput}\r\n      <Form.Item\r\n        label={\r\n          <Tooltip\r\n            title={\r\n              <>\r\n                Initial quantity of token {index + 1} to deposit into the pool.\r\n              </>\r\n            }\r\n          >\r\n            Token {index + 1} Initial Quantity\r\n          </Tooltip>\r\n        }\r\n        name={`quantity${index}`}\r\n        validateStatus={'success'}\r\n      >\r\n        <Input\r\n          value={quantity}\r\n          onChange={(e) => setQuantity(e.target.value.trim())}\r\n          type=\"number\"\r\n          min=\"0\"\r\n          step=\"any\"\r\n        />\r\n      </Form.Item>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { abbreviateAddress } from '../utils/utils';\r\nimport { useMintToTickers } from '../utils/tokens';\r\nimport { Popover } from 'antd';\r\nimport LinkAddress from './LinkAddress';\r\nimport { InfoCircleOutlined } from '@ant-design/icons';\r\n\r\nexport function MintName({\r\n  mint,\r\n  showAddress = false,\r\n}: {\r\n  mint: string | PublicKey | null | undefined;\r\n  showAddress?: boolean;\r\n}) {\r\n  const mintToTickers = useMintToTickers();\r\n  if (!mint) {\r\n    return null;\r\n  }\r\n  const mintKey = typeof mint === 'string' ? new PublicKey(mint) : mint;\r\n  const mintAddress = typeof mint === 'string' ? mint : mint.toBase58();\r\n  const ticker = mintToTickers[mintAddress] ?? abbreviateAddress(mintKey);\r\n\r\n  return (\r\n    <>\r\n      {ticker}\r\n      {showAddress ? (\r\n        <>\r\n          {' '}\r\n          <Popover\r\n            content={<LinkAddress address={mintAddress} />}\r\n            placement=\"bottomRight\"\r\n            title=\"Token mint\"\r\n            trigger=\"hover\"\r\n          >\r\n            <InfoCircleOutlined style={{ color: '#2abdd2' }} />\r\n          </Popover>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n","import { Basket, PoolInfo } from '@project-serum/pool';\r\nimport React from 'react';\r\nimport BN from 'bn.js';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useAccountInfo } from '../../../utils/connection';\r\nimport { parseTokenMintData } from '../../../utils/tokens';\r\nimport { Spin } from 'antd';\r\nimport { MintName } from '../../../components/MintName';\r\n\r\ninterface BasketDisplayProps {\r\n  poolInfo: PoolInfo;\r\n  basket?: Basket | null | undefined;\r\n}\r\n\r\nexport default function PoolBasketDisplay({\r\n  poolInfo,\r\n  basket,\r\n}: BasketDisplayProps) {\r\n  return (\r\n    <ul>\r\n      {poolInfo.state.assets.map((asset, index) => (\r\n        <BasketItem\r\n          key={index}\r\n          mint={asset.mint}\r\n          quantity={basket?.quantities[index]}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\ninterface BasketItemProps {\r\n  mint: PublicKey;\r\n  quantity?: BN;\r\n}\r\n\r\nfunction BasketItem({ mint, quantity }: BasketItemProps) {\r\n  const [mintAccountInfo] = useAccountInfo(mint);\r\n  let quantityDisplay = <Spin size=\"small\" />;\r\n  if (mintAccountInfo && quantity) {\r\n    const mintInfo = parseTokenMintData(mintAccountInfo.data);\r\n    quantityDisplay = <>{quantity.toNumber() / 10 ** mintInfo.decimals}</>;\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      {quantityDisplay} <MintName mint={mint} showAddress />\r\n    </li>\r\n  );\r\n}\r\n","import { getPoolBasket, PoolInfo } from '@project-serum/pool';\r\nimport React from 'react';\r\nimport FloatingElement from '../../../components/layout/FloatingElement';\r\nimport { Typography } from 'antd';\r\nimport { MintInfo } from '../../../utils/tokens';\r\nimport { useAsyncData } from '../../../utils/fetch-loop';\r\nimport { useConnection } from '../../../utils/connection';\r\nimport tuple from 'immutable-tuple';\r\nimport PoolBasketDisplay from './PoolBasketDisplay';\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\ninterface PoolInfoProps {\r\n  poolInfo: PoolInfo;\r\n  mintInfo: MintInfo;\r\n}\r\n\r\nconst feeFormat = new Intl.NumberFormat(undefined, {\r\n  style: 'percent',\r\n  minimumFractionDigits: 0,\r\n  maximumFractionDigits: 6,\r\n});\r\n\r\nexport default function PoolInfoPanel({ poolInfo, mintInfo }: PoolInfoProps) {\r\n  const connection = useConnection();\r\n\r\n  const [totalBasket] = useAsyncData(\r\n    () => getPoolBasket(connection, poolInfo, { redeem: mintInfo.supply }),\r\n    tuple(getPoolBasket, connection, poolInfo, 'total', mintInfo),\r\n  );\r\n\r\n  return (\r\n    <FloatingElement stretchVertical>\r\n      <Paragraph>Name: {poolInfo.state.name}</Paragraph>\r\n      <Paragraph>\r\n        Address: <Text copyable>{poolInfo.address.toBase58()}</Text>\r\n      </Paragraph>\r\n      <Paragraph>\r\n        Pool token mint address:{' '}\r\n        <Text copyable>{poolInfo.state.poolTokenMint.toBase58()}</Text>\r\n      </Paragraph>\r\n      {poolInfo.state.adminKey ? (\r\n        <Paragraph>\r\n          Pool admin: <Text copyable>{poolInfo.state.adminKey.toBase58()}</Text>\r\n        </Paragraph>\r\n      ) : null}\r\n      <Paragraph>\r\n        Fee rate: {feeFormat.format(poolInfo.state.feeRate / 1_000_000)}\r\n      </Paragraph>\r\n      <Paragraph>\r\n        Total supply: {mintInfo.supply.toNumber() / 10 ** mintInfo.decimals}\r\n      </Paragraph>\r\n      <Text>Total assets:</Text>\r\n      <div>\r\n        <PoolBasketDisplay poolInfo={poolInfo} basket={totalBasket} />\r\n      </div>\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import { getPoolBasket, PoolInfo, PoolTransactions } from '@project-serum/pool';\r\nimport React, { useMemo, useState } from 'react';\r\nimport FloatingElement from '../../../components/layout/FloatingElement';\r\nimport { Button, Input, Spin, Tabs, Typography } from 'antd';\r\nimport { MintInfo } from '../../../utils/tokens';\r\nimport { useAsyncData } from '../../../utils/fetch-loop';\r\nimport { useConnection } from '../../../utils/connection';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport tuple from 'immutable-tuple';\r\nimport PoolBasketDisplay from './PoolBasketDisplay';\r\nimport BN from 'bn.js';\r\nimport { notify } from '../../../utils/notifications';\r\nimport { useWallet } from '../../../utils/wallet';\r\nimport { useTokenAccounts } from '../../../utils/markets';\r\nimport { sendTransaction } from '../../../utils/send';\r\n\r\nconst { Text } = Typography;\r\nconst { TabPane } = Tabs;\r\n\r\ninterface PoolCreateRedeemPanel {\r\n  poolInfo: PoolInfo;\r\n  mintInfo: MintInfo;\r\n}\r\n\r\nexport default function PoolCreateRedeemPanel({\r\n  poolInfo,\r\n  mintInfo,\r\n}: PoolCreateRedeemPanel) {\r\n  return (\r\n    <FloatingElement stretchVertical>\r\n      <Tabs>\r\n        <TabPane tab=\"Create\" key=\"create\">\r\n          <CreateRedeemTab\r\n            poolInfo={poolInfo}\r\n            mintInfo={mintInfo}\r\n            tab=\"create\"\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Redeem\" key=\"redeem\">\r\n          <CreateRedeemTab\r\n            poolInfo={poolInfo}\r\n            mintInfo={mintInfo}\r\n            tab=\"redeem\"\r\n          />\r\n        </TabPane>\r\n      </Tabs>\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\ninterface CreateRedeemInnerPanel {\r\n  poolInfo: PoolInfo;\r\n  mintInfo: MintInfo;\r\n  tab: string;\r\n}\r\n\r\nfunction CreateRedeemTab({ poolInfo, mintInfo, tab }: CreateRedeemInnerPanel) {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [quantity, setQuantity] = useState('');\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const action = useMemo(() => {\r\n    const parsedQuantity = Math.round(\r\n      parseFloat(quantity) * 10 ** mintInfo.decimals,\r\n    );\r\n    if (parsedQuantity > 0) {\r\n      if (tab === 'create') {\r\n        return { create: new BN(parsedQuantity) };\r\n      } else {\r\n        return { redeem: new BN(parsedQuantity) };\r\n      }\r\n    }\r\n    return null;\r\n  }, [mintInfo.decimals, quantity, tab]);\r\n\r\n  const [basket, basketLoaded] = useAsyncData(\r\n    async () =>\r\n      action ? await getPoolBasket(connection, poolInfo, action) : null,\r\n    tuple(getPoolBasket, connection, poolInfo.address.toBase58(), action),\r\n  );\r\n\r\n  function findTokenAccount(mint: PublicKey): PublicKey {\r\n    const account = tokenAccounts?.find((account) =>\r\n      account.effectiveMint.equals(mint),\r\n    );\r\n    if (account) {\r\n      return account.pubkey;\r\n    }\r\n    throw new Error('No token account for ' + mint.toBase58());\r\n  }\r\n\r\n  const canSubmit = connected && action && basket;\r\n\r\n  async function onSubmit(e) {\r\n    e.preventDefault();\r\n    if (!action || !basket || !connected || !canSubmit) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const { transaction, signers } = PoolTransactions.execute(\r\n        poolInfo,\r\n        action,\r\n        {\r\n          owner: wallet.publicKey,\r\n          poolTokenAccount: findTokenAccount(poolInfo.state.poolTokenMint),\r\n          assetAccounts: poolInfo.state.assets.map((asset) =>\r\n            findTokenAccount(asset.mint),\r\n          ),\r\n        },\r\n        basket,\r\n      );\r\n      await sendTransaction({ connection, wallet, transaction, signers });\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message:\r\n          'Error ' +\r\n          (tab === 'create' ? 'creating' : 'redeeming') +\r\n          ' pool tokens',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <Input\r\n        addonBefore={<>Quantity</>}\r\n        value={quantity}\r\n        onChange={(e) => setQuantity(e.target.value.trim())}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <div>\r\n        {!basket ? (\r\n          basketLoaded ? null : (\r\n            <Spin />\r\n          )\r\n        ) : (\r\n          <>\r\n            <Text>{tab === 'create' ? 'Cost' : 'Proceeds'}: </Text>\r\n            <Text type=\"secondary\">(indicative only)</Text>\r\n            <PoolBasketDisplay poolInfo={poolInfo} basket={basket} />\r\n          </>\r\n        )}\r\n      </div>\r\n      <Button\r\n        htmlType=\"submit\"\r\n        type=\"primary\"\r\n        disabled={!canSubmit || submitting}\r\n      >\r\n        {!connected ? 'Wallet not connected' : 'Submit'}\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n","import { PoolInfo } from '@project-serum/pool';\r\nimport React from 'react';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useAccountInfo } from '../../../utils/connection';\r\nimport {\r\n  parseTokenAccountData,\r\n  parseTokenMintData,\r\n} from '../../../utils/tokens';\r\nimport { Button, Spin, Tabs } from 'antd';\r\nimport FloatingElement from '../../../components/layout/FloatingElement';\r\nimport { useTokenAccounts } from '../../../utils/markets';\r\nimport { MintName } from '../../../components/MintName';\r\nimport { LinkOutlined } from '@ant-design/icons';\r\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function PoolBalancesPanel({\r\n  poolInfo,\r\n}: {\r\n  poolInfo: PoolInfo;\r\n}) {\r\n  return (\r\n    <FloatingElement>\r\n      <Tabs>\r\n        <TabPane tab=\"Wallet Balances\" key=\"wallet\">\r\n          <WalletBalancesTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Pool Balances\" key=\"pool\">\r\n          <PoolBalancesTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\nfunction WalletBalancesTab({ poolInfo }: { poolInfo: PoolInfo }) {\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  return (\r\n    <ul>\r\n      {[\r\n        poolInfo.state.poolTokenMint,\r\n        ...poolInfo.state.assets.map((asset) => asset.mint),\r\n      ].map((mint, index) => {\r\n        const tokenAccount = tokenAccounts?.find((account) =>\r\n          account.effectiveMint.equals(mint),\r\n        );\r\n        if (!tokenAccount) {\r\n          return null;\r\n        }\r\n        return (\r\n          <BalanceItem\r\n            key={index}\r\n            mint={mint}\r\n            publicKey={tokenAccount.pubkey}\r\n            isPoolToken={mint.equals(poolInfo.state.poolTokenMint)}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction PoolBalancesTab({ poolInfo }: { poolInfo: PoolInfo }) {\r\n  return (\r\n    <ul>\r\n      {poolInfo.state.assets.map((asset, index) => {\r\n        return (\r\n          <BalanceItem\r\n            key={index}\r\n            mint={asset.mint}\r\n            publicKey={asset.vaultAddress}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\ninterface BalanceItemProps {\r\n  mint: PublicKey;\r\n  publicKey: PublicKey;\r\n  isPoolToken?: boolean;\r\n}\r\n\r\nfunction BalanceItem({ mint, publicKey, isPoolToken }: BalanceItemProps) {\r\n  const [mintAccountInfo] = useAccountInfo(mint);\r\n  const [balanceAccountInfo] = useAccountInfo(publicKey);\r\n  let quantityDisplay = <Spin size=\"small\" />;\r\n  if (mintAccountInfo && balanceAccountInfo) {\r\n    const mintInfo = parseTokenMintData(mintAccountInfo.data);\r\n    if (mint.equals(WRAPPED_SOL_MINT)) {\r\n      quantityDisplay = (\r\n        <>{balanceAccountInfo.lamports / 10 ** mintInfo.decimals}</>\r\n      );\r\n    } else {\r\n      const accountInfo = parseTokenAccountData(balanceAccountInfo.data);\r\n      quantityDisplay = <>{accountInfo.amount / 10 ** mintInfo.decimals}</>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      {quantityDisplay}{' '}\r\n      {isPoolToken ? (\r\n        <>\r\n          Pool Token (<MintName mint={mint} />)\r\n        </>\r\n      ) : (\r\n        <MintName mint={mint} />\r\n      )}{' '}\r\n      <Button\r\n        type=\"link\"\r\n        icon={<LinkOutlined />}\r\n        href={'https://explorer.solana.com/address/' + publicKey.toBase58()}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      />\r\n    </li>\r\n  );\r\n}\r\n","import React, { FormEvent, useMemo, useState } from 'react';\r\nimport { AdminControlledPoolInstructions, PoolInfo } from '@project-serum/pool';\r\nimport { TokenInstructions } from '@project-serum/serum';\r\nimport FloatingElement from '../../../components/layout/FloatingElement';\r\nimport { useConnection } from '../../../utils/connection';\r\nimport { useWallet } from '../../../utils/wallet';\r\nimport {\r\n  getSelectedTokenAccountForMint,\r\n  useTokenAccounts,\r\n} from '../../../utils/markets';\r\nimport { sendTransaction } from '../../../utils/send';\r\nimport { notify } from '../../../utils/notifications';\r\nimport {\r\n  Account,\r\n  PublicKey,\r\n  SystemProgram,\r\n  Transaction,\r\n} from '@solana/web3.js';\r\nimport { AutoComplete, Button, Input, Select, Tabs } from 'antd';\r\nimport {\r\n  createAssociatedTokenAccount,\r\n  getAssociatedTokenAddress,\r\n} from '@project-serum/associated-token';\r\nimport { parseTokenMintData, useMintToTickers } from '../../../utils/tokens';\r\nimport BN from 'bn.js';\r\nimport { refreshAllCaches } from '../../../utils/fetch-loop';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\n\r\nexport function PoolAdminPanel({ poolInfo }: { poolInfo: PoolInfo }) {\r\n  return (\r\n    <FloatingElement>\r\n      <Tabs>\r\n        <TabPane tab=\"Pause/Unpause\" key=\"pause\">\r\n          <PauseUnpauseTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Add Token\" key=\"addAsset\">\r\n          <AddAssetTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Remove Token\" key=\"removeAsset\">\r\n          <RemoveAssetTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Deposit\" key=\"deposit\">\r\n          <DepositTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Withdraw\" key=\"withdraw\">\r\n          <WithdrawTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Modify Fee\" key=\"updateFee\">\r\n          <UpdateFeeTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\ninterface TabParams {\r\n  poolInfo: PoolInfo;\r\n}\r\n\r\nfunction PauseUnpauseTab({ poolInfo }: TabParams) {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  async function sendPause() {\r\n    if (!connected) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const transaction = new Transaction();\r\n      transaction.add(AdminControlledPoolInstructions.pause(poolInfo));\r\n      await sendTransaction({ connection, wallet, transaction });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error pausing pool',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  async function sendUnpause() {\r\n    if (!connected) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const transaction = new Transaction();\r\n      transaction.add(AdminControlledPoolInstructions.unpause(poolInfo));\r\n      await sendTransaction({ connection, wallet, transaction });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error unpausing pool',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={sendPause} disabled={submitting}>\r\n        Pause\r\n      </Button>{' '}\r\n      <Button onClick={sendUnpause} disabled={submitting}>\r\n        Unpause\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction AddAssetTab({ poolInfo }: TabParams) {\r\n  const connection = useConnection();\r\n  const [address, setAddress] = useState('');\r\n  const { wallet, connected } = useWallet();\r\n  const canSubmit = connected && address;\r\n  const [onSubmit, submitting] = useOnSubmitHandler(\r\n    'adding asset to pool',\r\n    async () => {\r\n      const mintAddress = new PublicKey(address);\r\n      const vaultAddress = await getAssociatedTokenAddress(\r\n        poolInfo.state.vaultSigner,\r\n        mintAddress,\r\n      );\r\n      const transaction = new Transaction();\r\n      if (!(await connection.getAccountInfo(vaultAddress))) {\r\n        transaction.add(\r\n          await createAssociatedTokenAccount(\r\n            wallet.publicKey,\r\n            poolInfo.state.vaultSigner,\r\n            mintAddress,\r\n          ),\r\n        );\r\n      }\r\n      transaction.add(\r\n        AdminControlledPoolInstructions.addAsset(poolInfo, vaultAddress),\r\n      );\r\n      return [transaction, []];\r\n    },\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <MintSelector\r\n        label=\"Token Mint Address\"\r\n        value={address}\r\n        onChange={(value) => setAddress(value)}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction RemoveAssetTab({ poolInfo }: TabParams) {\r\n  const [address, setAddress] = useState('');\r\n  const { connected } = useWallet();\r\n  const canSubmit = connected && address;\r\n  const [onSubmit, submitting] = useOnSubmitHandler(\r\n    'removing asset from pool',\r\n    async () => {\r\n      const mintAddress = new PublicKey(address);\r\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\r\n        asset.mint.equals(mintAddress),\r\n      )?.vaultAddress;\r\n      if (!vaultAddress) {\r\n        throw new Error('Asset not in pool');\r\n      }\r\n      const transaction = new Transaction();\r\n      transaction.add(\r\n        AdminControlledPoolInstructions.removeAsset(poolInfo, vaultAddress),\r\n      );\r\n      return [transaction, []];\r\n    },\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <MintInPoolSelector\r\n        poolInfo={poolInfo}\r\n        label=\"Token Mint Address\"\r\n        value={address}\r\n        onChange={(value) => setAddress(value)}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction DepositTab({ poolInfo }: TabParams) {\r\n  const [address, setAddress] = useState('');\r\n  const [quantity, setQuantity] = useState('');\r\n\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const canSubmit =\r\n    connected && address && tokenAccounts && parseFloat(quantity);\r\n\r\n  const [onSubmit, submitting] = useOnSubmitHandler(\r\n    'depositing to pool',\r\n    async () => {\r\n      const mintAddress = new PublicKey(address);\r\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\r\n        asset.mint.equals(mintAddress),\r\n      )?.vaultAddress;\r\n      if (!vaultAddress) {\r\n        throw new Error('Asset not in pool');\r\n      }\r\n\r\n      const walletTokenAccount = getSelectedTokenAccountForMint(\r\n        tokenAccounts,\r\n        mintAddress,\r\n      );\r\n      if (!walletTokenAccount) {\r\n        throw new Error('Asset not in wallet');\r\n      }\r\n\r\n      const mintAccountInfo = await connection.getAccountInfo(mintAddress);\r\n      if (!mintAccountInfo) {\r\n        throw new Error('Mint not found');\r\n      }\r\n      const mintDecimals = parseTokenMintData(mintAccountInfo.data).decimals;\r\n      const parsedQuantity = Math.round(\r\n        parseFloat(quantity) * 10 ** mintDecimals,\r\n      );\r\n\r\n      const wrappedSolAccount =\r\n        mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT) &&\r\n        walletTokenAccount.pubkey.equals(wallet.publicKey)\r\n          ? new Account()\r\n          : null;\r\n\r\n      const transaction = new Transaction();\r\n      const signers: Account[] = [];\r\n      if (wrappedSolAccount) {\r\n        transaction.add(\r\n          SystemProgram.createAccount({\r\n            fromPubkey: wallet.publicKey,\r\n            lamports: parsedQuantity + 2.04e6,\r\n            newAccountPubkey: wrappedSolAccount.publicKey,\r\n            programId: TokenInstructions.TOKEN_PROGRAM_ID,\r\n            space: 165,\r\n          }),\r\n          TokenInstructions.initializeAccount({\r\n            account: wrappedSolAccount.publicKey,\r\n            mint: TokenInstructions.WRAPPED_SOL_MINT,\r\n            owner: wallet.publicKey,\r\n          }),\r\n          TokenInstructions.transfer({\r\n            source: wrappedSolAccount.publicKey,\r\n            destination: vaultAddress,\r\n            amount: parsedQuantity,\r\n            owner: wallet.publicKey,\r\n          }),\r\n          TokenInstructions.closeAccount({\r\n            source: wrappedSolAccount.publicKey,\r\n            destination: walletTokenAccount.pubkey,\r\n            owner: wallet.publicKey,\r\n          }),\r\n        );\r\n        signers.push(wrappedSolAccount);\r\n      } else {\r\n        transaction.add(\r\n          TokenInstructions.transfer({\r\n            source: walletTokenAccount.pubkey,\r\n            destination: vaultAddress,\r\n            amount: parsedQuantity,\r\n            owner: wallet.publicKey,\r\n          }),\r\n        );\r\n      }\r\n      return [transaction, signers];\r\n    },\r\n    true,\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <MintInPoolSelector\r\n        poolInfo={poolInfo}\r\n        label=\"Token Mint Address\"\r\n        value={address}\r\n        onChange={(value) => setAddress(value)}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <Input\r\n        addonBefore={<>Quantity</>}\r\n        value={quantity}\r\n        onChange={(e) => setQuantity(e.target.value.trim())}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction WithdrawTab({ poolInfo }: TabParams) {\r\n  const [address, setAddress] = useState('');\r\n  const [quantity, setQuantity] = useState('');\r\n\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const canSubmit =\r\n    connected && address && tokenAccounts && parseFloat(quantity);\r\n\r\n  const [onSubmit, submitting] = useOnSubmitHandler(\r\n    'withdrawing from pool',\r\n    async () => {\r\n      const mintAddress = new PublicKey(address);\r\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\r\n        asset.mint.equals(mintAddress),\r\n      )?.vaultAddress;\r\n      if (!vaultAddress) {\r\n        throw new Error('Asset not in pool');\r\n      }\r\n\r\n      const walletTokenAccount = getSelectedTokenAccountForMint(\r\n        tokenAccounts,\r\n        mintAddress,\r\n      );\r\n      if (!walletTokenAccount) {\r\n        throw new Error('Asset not in wallet');\r\n      }\r\n\r\n      const mintAccountInfo = await connection.getAccountInfo(mintAddress);\r\n      if (!mintAccountInfo) {\r\n        throw new Error('Mint not found');\r\n      }\r\n      const mintDecimals = parseTokenMintData(mintAccountInfo.data).decimals;\r\n      const parsedQuantity = Math.round(\r\n        parseFloat(quantity) * 10 ** mintDecimals,\r\n      );\r\n\r\n      const wrappedSolAccount =\r\n        mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT) &&\r\n        walletTokenAccount.pubkey.equals(wallet.publicKey)\r\n          ? new Account()\r\n          : null;\r\n\r\n      const transaction = new Transaction();\r\n      const signers: Account[] = [];\r\n      if (wrappedSolAccount) {\r\n        transaction.add(\r\n          SystemProgram.createAccount({\r\n            fromPubkey: wallet.publicKey,\r\n            lamports: 2.04e6,\r\n            newAccountPubkey: wrappedSolAccount.publicKey,\r\n            programId: TokenInstructions.TOKEN_PROGRAM_ID,\r\n            space: 165,\r\n          }),\r\n          TokenInstructions.initializeAccount({\r\n            account: wrappedSolAccount.publicKey,\r\n            mint: TokenInstructions.WRAPPED_SOL_MINT,\r\n            owner: wallet.publicKey,\r\n          }),\r\n        );\r\n        signers.push(wrappedSolAccount);\r\n      }\r\n      transaction.add(\r\n        AdminControlledPoolInstructions.approveDelegate(\r\n          poolInfo,\r\n          vaultAddress,\r\n          wallet.publicKey,\r\n          new BN(parsedQuantity),\r\n        ),\r\n      );\r\n      if (wrappedSolAccount) {\r\n        transaction.add(\r\n          TokenInstructions.transfer({\r\n            source: vaultAddress,\r\n            destination: wrappedSolAccount.publicKey,\r\n            amount: parsedQuantity,\r\n            owner: wallet.publicKey,\r\n          }),\r\n          TokenInstructions.closeAccount({\r\n            source: wrappedSolAccount.publicKey,\r\n            destination: walletTokenAccount.pubkey,\r\n            owner: wallet.publicKey,\r\n          }),\r\n        );\r\n      } else {\r\n        transaction.add(\r\n          TokenInstructions.transfer({\r\n            source: vaultAddress,\r\n            destination: walletTokenAccount.pubkey,\r\n            amount: parsedQuantity,\r\n            owner: wallet.publicKey,\r\n          }),\r\n        );\r\n      }\r\n      return [transaction, signers];\r\n    },\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <MintInPoolSelector\r\n        poolInfo={poolInfo}\r\n        label=\"Token Mint Address\"\r\n        value={address}\r\n        onChange={(value) => setAddress(value)}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <Input\r\n        addonBefore={<>Quantity</>}\r\n        value={quantity}\r\n        onChange={(e) => setQuantity(e.target.value.trim())}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction UpdateFeeTab({ poolInfo }: TabParams) {\r\n  const [feeRate, setFeeRate] = useState('');\r\n\r\n  const { connected } = useWallet();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const canSubmit = connected && tokenAccounts && parseFloat(feeRate);\r\n\r\n  const [onSubmit, submitting] = useOnSubmitHandler(\r\n    'changing pool fee',\r\n    async () => {\r\n      const transaction = new Transaction();\r\n      transaction.add(\r\n        AdminControlledPoolInstructions.updateFee(\r\n          poolInfo,\r\n          Math.round(parseFloat(feeRate) * 1_000_000),\r\n        ),\r\n      );\r\n      return [transaction, []];\r\n    },\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <Input\r\n        addonBefore={<>Fee Rate</>}\r\n        value={feeRate}\r\n        onChange={(e) => setFeeRate(e.target.value.trim())}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction useOnSubmitHandler(\r\n  description: string,\r\n  makeTransaction: () => Promise<[Transaction, Account[]]>,\r\n  refresh = false,\r\n): [(FormEvent) => void, boolean] {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  async function onSubmit(e: FormEvent) {\r\n    e.preventDefault();\r\n    if (submitting) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      if (!connected) {\r\n        throw new Error('Wallet not connected');\r\n      }\r\n      const [transaction, signers] = await makeTransaction();\r\n      await sendTransaction({ connection, wallet, transaction, signers });\r\n      if (refresh) {\r\n        refreshAllCaches();\r\n      }\r\n    } catch (e) {\r\n      notify({\r\n        message: `Error ${description}`,\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return [onSubmit, submitting];\r\n}\r\n\r\nfunction SubmitButton({ canSubmit, submitting }) {\r\n  const { connected } = useWallet();\r\n  return (\r\n    <Button\r\n      htmlType=\"submit\"\r\n      type=\"primary\"\r\n      disabled={!canSubmit || submitting}\r\n    >\r\n      {!connected ? 'Wallet not connected' : 'Submit'}\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction MintInPoolSelector({\r\n  poolInfo,\r\n  label,\r\n  value,\r\n  onChange,\r\n  style,\r\n}: {\r\n  poolInfo: PoolInfo;\r\n  label: string;\r\n  value: string;\r\n  onChange: (string) => void;\r\n  style: any;\r\n}) {\r\n  const mintToTickers = useMintToTickers();\r\n  return (\r\n    <Input.Group style={style}>\r\n      <span className=\"ant-input-group-addon\">{label}</span>\r\n      <Select onChange={onChange} value={value} style={{ width: '100%' }}>\r\n        {poolInfo.state.assets.map((asset) => (\r\n          <Option value={asset.mint.toBase58()} key={asset.mint.toBase58()}>\r\n            {mintToTickers[asset.mint.toBase58()] ? (\r\n              <>\r\n                {mintToTickers[asset.mint.toBase58()]} ({asset.mint.toBase58()})\r\n              </>\r\n            ) : (\r\n              asset.mint.toBase58()\r\n            )}\r\n          </Option>\r\n        ))}\r\n      </Select>\r\n    </Input.Group>\r\n  );\r\n}\r\n\r\nfunction MintSelector({ label, style, value, onChange }) {\r\n  const mintToTickers = useMintToTickers();\r\n  const options = useMemo(() => {\r\n    return Object.entries(mintToTickers)\r\n      .filter(\r\n        ([mintAddress, ticker]) =>\r\n          mintAddress.includes(value) ||\r\n          ticker.toLowerCase().includes(value.toLowerCase()),\r\n      )\r\n      .map(([mintAddress, ticker]) => ({\r\n        value: mintAddress,\r\n        label: (\r\n          <>\r\n            {ticker} ({mintAddress})\r\n          </>\r\n        ),\r\n      }));\r\n  }, [mintToTickers, value]);\r\n  return (\r\n    <Input.Group style={style}>\r\n      <span className=\"ant-input-group-addon\">{label}</span>\r\n      <AutoComplete\r\n        options={options}\r\n        value={value}\r\n        onChange={(e) => onChange(e)}\r\n        style={{ width: '100%' }}\r\n      />\r\n    </Input.Group>\r\n  );\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Col, PageHeader, Row, Spin, Typography } from 'antd';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useAccountInfo } from '../../../utils/connection';\r\nimport FloatingElement from '../../../components/layout/FloatingElement';\r\nimport {\r\n  decodePoolState,\r\n  isAdminControlledPool,\r\n  PoolInfo,\r\n} from '@project-serum/pool';\r\nimport PoolInfoPanel from './PoolInfoPanel';\r\nimport { parseTokenMintData } from '../../../utils/tokens';\r\nimport PoolCreateRedeemPanel from './PoolCreateRedeemPanel';\r\nimport PoolBalancesPanel from './PoolBalancesPanel';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { PoolAdminPanel } from './PoolAdminPanel';\r\nimport { useWallet } from '../../../utils/wallet';\r\n\r\nconst { Text } = Typography;\r\n\r\nexport default function PoolPage() {\r\n  const { poolAddress } = useParams();\r\n  const [poolAccountInfo, poolAccountLoaded] = useAccountInfo(\r\n    isPublicKey(poolAddress) ? new PublicKey(poolAddress) : null,\r\n  );\r\n  const history = useHistory();\r\n\r\n  const poolInfo: PoolInfo | null = useMemo(() => {\r\n    if (!poolAccountInfo) {\r\n      return null;\r\n    }\r\n    try {\r\n      return {\r\n        address: new PublicKey(poolAddress),\r\n        state: decodePoolState(poolAccountInfo.data),\r\n        program: poolAccountInfo.owner,\r\n      };\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }, [poolAddress, poolAccountInfo]);\r\n  const [mintAccountInfo, mintAccountInfoLoaded] = useAccountInfo(\r\n    poolInfo?.state.poolTokenMint,\r\n  );\r\n  const mintInfo = useMemo(\r\n    () => (mintAccountInfo ? parseTokenMintData(mintAccountInfo.data) : null),\r\n    [mintAccountInfo],\r\n  );\r\n  const { wallet } = useWallet();\r\n\r\n  if (poolInfo && mintInfo) {\r\n    return (\r\n      <>\r\n        <PageHeader\r\n          title={<>Pool {poolInfo.address.toBase58()}</>}\r\n          onBack={() => history.push('/pools')}\r\n          subTitle={poolInfo.state.name}\r\n        />\r\n        <Row>\r\n          <Col xs={24} lg={12}>\r\n            <PoolInfoPanel poolInfo={poolInfo} mintInfo={mintInfo} />\r\n          </Col>\r\n          <Col xs={24} lg={12}>\r\n            <PoolCreateRedeemPanel poolInfo={poolInfo} mintInfo={mintInfo} />\r\n          </Col>\r\n          <Col xs={24}>\r\n            <PoolBalancesPanel poolInfo={poolInfo} />\r\n          </Col>\r\n          {wallet.connected &&\r\n          poolInfo.state.adminKey?.equals(wallet.publicKey) &&\r\n          isAdminControlledPool(poolInfo) ? (\r\n            <Col xs={24}>\r\n              <PoolAdminPanel poolInfo={poolInfo} />\r\n            </Col>\r\n          ) : null}\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        title={<>Pool {poolAddress}</>}\r\n        onBack={() => history.push('/pools')}\r\n      />\r\n      <FloatingElement>\r\n        {!poolAccountLoaded || !mintAccountInfoLoaded ? (\r\n          <Spin />\r\n        ) : (\r\n          <Text>Invalid pool</Text>\r\n        )}\r\n      </FloatingElement>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction isPublicKey(address) {\r\n  try {\r\n    new PublicKey(address);\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n","import styled from 'styled-components';\r\nimport FloatingElement from '../../components/layout/FloatingElement';\r\nimport React, { useState } from 'react';\r\nimport { Button, Input, Typography } from 'antd';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Link from '../../components/Link';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 700px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 24px;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  margin-top: 16px;\r\n  margin-bottom: 48px;\r\n`;\r\n\r\nexport default function PoolListPage() {\r\n  const [poolAddress, setPoolAddress] = useState('');\r\n  const history = useHistory();\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    history.push(`/pools/${poolAddress}`);\r\n  }\r\n  return (\r\n    <Wrapper>\r\n      <FloatingElement>\r\n        <Title level={3}>Pools</Title>\r\n        <Form onSubmit={onSubmit}>\r\n          <Input\r\n            value={poolAddress}\r\n            onChange={(e) => setPoolAddress(e.target.value.trim())}\r\n            placeholder=\"Pool address\"\r\n          />\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Go\r\n          </Button>\r\n        </Form>\r\n        <Link to=\"/pools/new\">Create new pool</Link>\r\n      </FloatingElement>\r\n    </Wrapper>\r\n  );\r\n}\r\n","import { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport TradePage from './pages/TradePage';\r\nimport OpenOrdersPage from './pages/OpenOrdersPage';\r\nimport React from 'react';\r\nimport BalancesPage from './pages/BalancesPage';\r\nimport ConvertPage from './pages/ConvertPage';\r\nimport BasicLayout from './components/BasicLayout';\r\nimport ListNewMarketPage from './pages/ListNewMarketPage';\r\nimport NewPoolPage from './pages/pools/NewPoolPage';\r\nimport PoolPage from './pages/pools/PoolPage';\r\nimport PoolListPage from './pages/pools/PoolListPage';\r\nimport { getTradePageUrl } from './utils/markets';\r\n\r\nexport function Routes() {\r\n  return (\r\n    <>\r\n      <HashRouter basename={'/'}>\r\n        <BasicLayout>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Redirect to={getTradePageUrl()} />\r\n            </Route>\r\n            <Route exact path=\"/market/:marketAddress\">\r\n              <TradePage />\r\n            </Route>\r\n            <Route exact path=\"/orders\" component={OpenOrdersPage} />\r\n            <Route exact path=\"/balances\" component={BalancesPage} />\r\n            <Route exact path=\"/convert\" component={ConvertPage} />\r\n            <Route\r\n              exact\r\n              path=\"/list-new-market\"\r\n              component={ListNewMarketPage}\r\n            />\r\n            <Route exact path=\"/pools\">\r\n              <PoolListPage />\r\n            </Route>\r\n            <Route exact path=\"/pools/new\">\r\n              <NewPoolPage />\r\n            </Route>\r\n            <Route exact path=\"/pools/:poolAddress\">\r\n              <PoolPage />\r\n            </Route>\r\n          </Switch>\r\n        </BasicLayout>\r\n      </HashRouter>\r\n    </>\r\n  );\r\n}\r\n","import React, { Suspense } from 'react';\r\nimport './App.less';\r\nimport { ConnectionProvider } from './utils/connection';\r\nimport { WalletProvider } from './utils/wallet';\r\nimport { GlobalStyle } from './global_style';\r\nimport { Spin } from 'antd';\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\nimport { Routes } from './routes';\r\nimport { PreferencesProvider } from './utils/preferences';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Suspense fallback={() => <Spin size=\"large\" />}>\r\n      <GlobalStyle />\r\n      <ErrorBoundary>\r\n        <ConnectionProvider>\r\n          <WalletProvider>\r\n            <PreferencesProvider>\r\n              <Suspense fallback={() => <Spin size=\"large\" />}>\r\n                <Routes />\r\n              </Suspense>\r\n            </PreferencesProvider>\r\n          </WalletProvider>\r\n        </ConnectionProvider>\r\n      </ErrorBoundary>\r\n    </Suspense>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}